parameters:
  acrName: ''  # Required: ACR name
  resourceGroup: ''  # Required: Resource group name
  services: []  # Required: List of services to build (matrix)
  dockerBuildArgs: '--pull'  # Optional: Docker build arguments
  maxParallel: 4  # Optional: Maximum parallel builds
  retryCount: 2  # Optional: Number of retries on failure
  vmImage: 'ubuntu-latest'  # Optional: VM image to use
  azureSubscription: '$(AZURE_SUBSCRIPTION)'  # Optional: Azure subscription
  buildCacheFrom: ''  # Optional: Build cache configuration
  buildCacheTo: ''  # Optional: Build cache to configuration
  tags: '$(SEMVER)'  # Optional: Image tags
  timeoutInMinutes: 30  # Optional: Job timeout in minutes

steps:
- task: AzureCLI@2
  displayName: 'Login to Azure Container Registry'
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Check if ACR exists and is accessible
      if ! az acr show -n ${{ parameters.acrName }} -g ${{ parameters.resourceGroup }} &>/dev/null; then
        echo "##vso[task.logissue type=error]ACR ${{ parameters.acrName }} not found or not accessible"
        exit 1
      fi
      # Check if we have necessary permissions
      if ! az acr check-name -n ${{ parameters.acrName }} &>/dev/null; then
        echo "##vso[task.logissue type=error]Insufficient permissions for ACR ${{ parameters.acrName }}"
        exit 1
      fi
- task: Docker@2
  displayName: 'Build and Push ${{ parameters.serviceName }}'
  retryCountOnTaskFailure: ${{ parameters.retryCount }}
  inputs:
    command: buildAndPush
    repository: ${{ parameters.serviceName }}
    dockerfile: ${{ parameters.dockerfile }}
    buildContext: '$(System.DefaultWorkingDirectory)/${{ parameters.context }}'
    containerRegistry: ${{ parameters.acrName }}
    tags: ${{ parameters.tags }}
    buildOptions: --pull --cache-from type=registry,ref=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.tags }} --cache-to type=registry,ref=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.tags }}

- script: |
    echo "Image built and pushed: ${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.tags }}"
  displayName: 'Echo Built Image Tag for ${{ parameters.serviceName }}'