parameters:
  jobType: ''  # Required - no default
  vmImage: 'ubuntu-latest'  # Only essential default
  
  # Package configuration
  packageMaxParallel: 4
  packageRetryCount: 2
  packageTimeoutMinutes: 30
  
  # Helm configuration
  chartPath: 'online-boutique-chart'
  valuesFile: 'values.yaml'
  helmVersion: '3.12.0'
  namespace: 'online-boutique'
  releaseName: 'online-boutique'
  helmTimeout: '10m'
  podReadyTimeout: 300

jobs:
- ${{ if eq(parameters.jobType, 'version') }}:
  - job: GitVersion
    displayName: 'Calculate Semantic Version'
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - checkout: self
        fetchDepth: 0
      - task: gitversion/setup@3
        name: gitversionSetup
        inputs:
          versionSpec: '5.x'
      - task: gitversion/execute@3
        name: gitversionExecute
        inputs:
          useConfigFile: false
      - script: |
          echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$(GitVersion.SemVer)"
        name: SetSemver
        displayName: 'Set SEMVER variable'
      - script: |
          echo "Calculated SEMVER is: $(GitVersion.SemVer)"
        displayName: 'Echo SEMVER Output'

- ${{ if eq(parameters.jobType, 'package') }}:
  - job: ValidateACRConnection
    displayName: 'Validate ACR Connection'
    condition: succeeded()
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - task: AzureCLI@2
        displayName: 'Validate ACR Access'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "=== Validating ACR: $(ACR_NAME) in Resource Group: $(RESOURCE_GROUP) ==="
            
            # Validate resource group and ACR existence
            if ! az group show -n "$(RESOURCE_GROUP)" &>/dev/null; then
              echo "##vso[task.logissue type=error]Resource group $(RESOURCE_GROUP) not found"
              az group list --query "[].name" -o tsv
              exit 1
            fi
            
            if ! az acr show -n "$(ACR_NAME)" -g "$(RESOURCE_GROUP)" &>/dev/null; then
              echo "##vso[task.logissue type=error]ACR $(ACR_NAME) not found in resource group $(RESOURCE_GROUP)"
              exit 1
            fi
            
            # Test ACR login
            if ! az acr login --name "$(ACR_NAME)" &>/dev/null; then
              echo "##vso[task.logissue type=error]Failed to login to ACR $(ACR_NAME)"
              exit 1
            fi
            
            echo "✅ ACR $(ACR_NAME) is accessible and ready for builds"

  - job: Package
    displayName: 'Package Container Images'
    dependsOn: ValidateACRConnection
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
    timeoutInMinutes: ${{ parameters.packageTimeoutMinutes }}
    strategy:
      matrix: 
        cartservice:
          serviceName: cartservice
          dockerfile: '$(APP_SOURCE_DIR)/cartservice/src/Dockerfile'
          context: 'src/cartservice/src'
        productcatalogservice:
          serviceName: productcatalogservice
          dockerfile: '$(APP_SOURCE_DIR)/productcatalogservice/Dockerfile'
          context: 'src/productcatalogservice'
        currencyservice:
          serviceName: currencyservice
          dockerfile: '$(APP_SOURCE_DIR)/currencyservice/Dockerfile'
          context: 'src/currencyservice'
        emailservice:
          serviceName: emailservice
          dockerfile: '$(APP_SOURCE_DIR)/emailservice/Dockerfile'
          context: 'src/emailservice'
        paymentservice:
          serviceName: paymentservice
          dockerfile: '$(APP_SOURCE_DIR)/paymentservice/Dockerfile'
          context: 'src/paymentservice'
        shippingservice:
          serviceName: shippingservice
          dockerfile: '$(APP_SOURCE_DIR)/shippingservice/Dockerfile'
          context: 'src/shippingservice'
        recommendationservice:
          serviceName: recommendationservice
          dockerfile: '$(APP_SOURCE_DIR)/recommendationservice/Dockerfile'
          context: 'src/recommendationservice'
        adservice:
          serviceName: adservice
          dockerfile: '$(APP_SOURCE_DIR)/adservice/Dockerfile'
          context: 'src/adservice'
        checkoutservice:
          serviceName: checkoutservice
          dockerfile: '$(APP_SOURCE_DIR)/checkoutservice/Dockerfile'
          context: 'src/checkoutservice'
        shoppingassistantservice:
          serviceName: shoppingassistantservice
          dockerfile: '$(APP_SOURCE_DIR)/shoppingassistantservice/Dockerfile'
          context: 'src/shoppingassistantservice'
        frontend:
          serviceName: frontend
          dockerfile: '$(APP_SOURCE_DIR)/frontend/Dockerfile'
          context: 'src/frontend'
      maxParallel: ${{ parameters.packageMaxParallel }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - script: |
          echo "Using SEMVER: $(SEMVER)"
          echo "Building service: $(serviceName)"
        displayName: 'Echo SEMVER and Service'

      - template: docker/acr-build-template.yml
        parameters:
          acrName: $(ACR_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          serviceName: $(serviceName)
          dockerfile: $(dockerfile)
          context: $(context)
          retryCount: ${{ parameters.packageRetryCount }}
          azureSubscription: $(AZURE_SUBSCRIPTION)
          tags: $(SEMVER)

- ${{ if eq(parameters.jobType, 'validate') }}:
  - job: ChartValidation
    displayName: 'Validate Helm Chart'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - checkout: self
      - task: HelmInstaller@0
        displayName: 'Install Helm'
        inputs:
          helmVersion: ${{ parameters.helmVersion }}
      - script: |
          helm lint ${{ parameters.chartPath }}
          helm dependency build ${{ parameters.chartPath }}
          helm template ${{ parameters.releaseName }} ${{ parameters.chartPath }} \
            --values ${{ parameters.chartPath }}/${{ parameters.valuesFile }} \
            --namespace ${{ parameters.namespace }} \
            --debug
        displayName: 'Validate Chart and Values'

- ${{ if eq(parameters.jobType, 'deploy') }}:
  - job: Deploy
    displayName: 'Deploy to Environment'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - template: helm/helm-deploy-template.yml
        parameters:
          clusterName: $(AKS_CLUSTER_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          namespace: ${{ parameters.namespace }}
          chartPath: ${{ parameters.chartPath }}
          releaseName: ${{ parameters.releaseName }}
          valuesFile: ${{ parameters.valuesFile }}
          acrName: $(ACR_NAME)
          helmVersion: ${{ parameters.helmVersion }}
          helmTimeout: ${{ parameters.helmTimeout }}
          semver: $(SEMVER)
          azureSubscription: $(AZURE_SUBSCRIPTION)

- ${{ if eq(parameters.jobType, 'verify') }}:
  - job: HealthCheck
    displayName: 'Verify Deployment'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
      POD_READY_TIMEOUT: ${{ parameters.podReadyTimeout }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - task: AzureCLI@2
        displayName: 'Get AKS Credentials'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials -n $(AKS_CLUSTER_NAME) -g $(RESOURCE_GROUP) --overwrite-existing

      - script: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=${{ parameters.releaseName }} -n ${{ parameters.namespace }} --timeout=$(POD_READY_TIMEOUT)s
          
          # Display deployment status
          echo "=== Deployment Status ==="
          kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          kubectl get services -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          kubectl get deployments -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          
          # Show image tags
          echo "=== Image Tags in Use ==="
          kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }} -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].image}{"\n"}{end}'
        displayName: 'Verify Deployment Status'

      - script: |
          echo "✅ Deployment verification completed"
          echo "Release: ${{ parameters.releaseName }}"
          echo "Namespace: ${{ parameters.namespace }}"
          echo "ACR: $(ACR_NAME).azurecr.io"
          echo "SEMVER: $(SEMVER)"
        displayName: 'Verification Summary' 