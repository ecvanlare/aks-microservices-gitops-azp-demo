parameters:
  jobType: ''  # Required - no default
  vmImage: 'ubuntu-latest'  # Only essential default
  
  # Environment-specific parameters (required)
  deployEnvironment: ''
  deployNamespace: ''
  deployReleaseName: ''
  chartPath: ''
  valuesFile: ''
  helmVersion: '3.12.0'  # Helm version to use
  
  # Package configuration
  packageMaxParallel: 4
  packageRetryCount: 2
  packageTimeoutMinutes: 30
  
  # Helm deployment configuration
  helmTimeout: '10m'
  helmMaxHistory: 5
  
  # Verification configuration
  podReadyTimeout: 300

jobs:
- ${{ if eq(parameters.jobType, 'version') }}:
  - job: GitVersion
    displayName: 'Run GitVersion'
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - checkout: self
        fetchDepth: 0
      - task: gitversion/setup@3
        name: gitversionSetup
        inputs:
          versionSpec: '5.x'
      - task: gitversion/execute@3
        name: gitversionExecute
        inputs:
          useConfigFile: false
      - script: |
          echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$(GitVersion.SemVer)"
        name: SetSemver
        displayName: 'Set SEMVER variable'
      - script: |
          echo "Calculated SEMVER is: $(GitVersion.SemVer)"
        displayName: 'Echo SEMVER Output'

- ${{ if eq(parameters.jobType, 'package') }}:
  - job: Package
    displayName: 'Package Container Images'
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
    timeoutInMinutes: ${{ parameters.packageTimeoutMinutes }}
    strategy:
      matrix: 
        cartservice:
          serviceName: cartservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/cartservice/src/Dockerfile'
          context: 'src/cartservice/src'
        productcatalogservice:
          serviceName: productcatalogservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/productcatalogservice/Dockerfile'
          context: 'src/productcatalogservice'
        currencyservice:
          serviceName: currencyservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/currencyservice/Dockerfile'
          context: 'src/currencyservice'
        emailservice:
          serviceName: emailservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/emailservice/Dockerfile'
          context: 'src/emailservice'
        paymentservice:
          serviceName: paymentservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/paymentservice/Dockerfile'
          context: 'src/paymentservice'
        shippingservice:
          serviceName: shippingservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/shippingservice/Dockerfile'
          context: 'src/shippingservice'
        recommendationservice:
          serviceName: recommendationservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/recommendationservice/Dockerfile'
          context: 'src/recommendationservice'
        adservice:
          serviceName: adservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/adservice/Dockerfile'
          context: 'src/adservice'
        checkoutservice:
          serviceName: checkoutservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/checkoutservice/Dockerfile'
          context: 'src/checkoutservice'
        shoppingassistantservice:
          serviceName: shoppingassistantservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/shoppingassistantservice/Dockerfile'
          context: 'src/shoppingassistantservice'
        frontend:
          serviceName: frontend
          dockerfile: '$(System.DefaultWorkingDirectory)/src/frontend/Dockerfile'
          context: 'src/frontend'
      maxParallel: ${{ parameters.packageMaxParallel }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - script: |
          echo "Using SEMVER: $(SEMVER)"
          echo "Building service: $(serviceName)"
        displayName: 'Echo SEMVER and Service in Package Stage'

      - template: docker/acr-build-template.yml
        parameters:
          acrName: $(ACR_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          serviceName: $(serviceName)
          dockerfile: $(dockerfile)
          context: $(context)
          retryCount: ${{ parameters.packageRetryCount }}
          dockerBuildArgs: --pull
          buildCacheFrom: type=registry,ref=$(ACR_NAME).azurecr.io/$(serviceName):$(SEMVER)
          buildCacheTo: type=registry,ref=$(ACR_NAME).azurecr.io/$(serviceName):$(SEMVER)

- ${{ if eq(parameters.jobType, 'validate') }}:
  - job: ChartValidation
    displayName: 'Validate Chart Structure'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - checkout: self
      - task: HelmInstaller@0
        displayName: 'Install Helm'
        inputs:
          helmVersion: ${{ parameters.helmVersion }}
      - script: |
          # Validate chart structure
          helm lint ${{ parameters.chartPath }}
          if [ $? -ne 0 ]; then
            echo "##vso[task.logissue type=error]Helm chart validation failed"
            exit 1
          fi
          
          # Check dependencies
          helm dependency build ${{ parameters.chartPath }}
          if [ $? -ne 0 ]; then
            echo "##vso[task.logissue type=error]Helm dependency build failed"
            exit 1
          fi
          
          # Dry run to validate values
          helm template ${{ parameters.deployReleaseName }} ${{ parameters.chartPath }} \
            --values ${{ parameters.chartPath }}/${{ parameters.valuesFile }} \
            --namespace ${{ parameters.deployNamespace }} \
            --debug
        displayName: 'Validate Chart and Values'

- ${{ if eq(parameters.jobType, 'deploy') }}:
  - job: Deploy
    displayName: 'Deploy to ${{ parameters.deployEnvironment }}'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
      ENVIRONMENT: ${{ parameters.deployEnvironment }}
      NAMESPACE: ${{ parameters.deployNamespace }}
      RELEASE_NAME: ${{ parameters.deployReleaseName }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - script: |
          echo "Using SEMVER: $(SEMVER)"
          echo "ACR Name: $(ACR_NAME)"
          echo "Environment: $(ENVIRONMENT)"
          echo "Namespace: $(NAMESPACE)"
          echo "Helm Version: ${{ parameters.helmVersion }}"
        displayName: 'Echo Version in Deploy Stage'

      - template: helm/helm-deploy-template.yml
        parameters:
          clusterName: $(AKS_CLUSTER_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          namespace: $(NAMESPACE)
          chartPath: ${{ parameters.chartPath }}
          releaseName: $(RELEASE_NAME)
          valuesFile: ${{ parameters.valuesFile }}
          acrName: $(ACR_NAME)
          helmVersion: ${{ parameters.helmVersion }}
          helmTimeout: ${{ parameters.helmTimeout }}
          helmMaxHistory: ${{ parameters.helmMaxHistory }}

- ${{ if eq(parameters.jobType, 'verify') }}:
  - job: HealthCheck
    displayName: 'Health Check - ${{ parameters.deployEnvironment }}'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
      ENVIRONMENT: ${{ parameters.deployEnvironment }}
      NAMESPACE: ${{ parameters.deployNamespace }}
      RELEASE_NAME: ${{ parameters.deployReleaseName }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - task: AzureCLI@2
        displayName: 'Get AKS Credentials'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials -n $(AKS_CLUSTER_NAME) -g $(RESOURCE_GROUP) --overwrite-existing

      - script: |
          # Wait for all pods to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=$(RELEASE_NAME) -n $(NAMESPACE) --timeout=${{ parameters.podReadyTimeout }}s
          
          # Check pod status
          kubectl get pods -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME)
          
          # Check service status
          kubectl get services -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME)
          
          # Check deployment status
          kubectl get deployments -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME)
          
          # Check image tags being used
          echo "=== Image Tags in Use ==="
          kubectl get pods -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME) -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].image}{"\n"}{end}'
        displayName: 'Verify Pods and Services'

      - script: |
          # Environment-specific health checks
          echo "=== Environment-Specific Health Checks ==="
          
          if [ "$(ENVIRONMENT)" = "dev" ]; then
            echo "Running DEV environment health checks..."
            echo "Checking service endpoints..."
            kubectl get endpoints -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME)
            
          elif [ "$(ENVIRONMENT)" = "staging" ]; then
            echo "Running STAGING environment health checks..."
            echo "Checking service endpoints..."
            kubectl get endpoints -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME)
            
            echo "Checking service configurations..."
            kubectl get services -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME) -o wide
            
          elif [ "$(ENVIRONMENT)" = "prod" ]; then
            echo "Running PROD environment health checks..."
            echo "Checking service endpoints..."
            kubectl get endpoints -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME)
            
            echo "Checking service configurations..."
            kubectl get services -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME) -o wide
            
            echo "Checking resource usage..."
            kubectl top pods -n $(NAMESPACE) 2>/dev/null || echo "Metrics not available"
            
            echo "Checking pod resource limits..."
            kubectl get pods -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME) -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].resources.limits.cpu}{"\t"}{.spec.containers[*].resources.limits.memory}{"\n"}{end}'
          fi
        displayName: 'Environment-Specific Health Checks'

      - script: |
          echo "Deployment verification completed"
          echo "Release: $(RELEASE_NAME)"
          echo "Namespace: $(NAMESPACE)"
          echo "Environment: $(ENVIRONMENT)"
          echo "Using latest images from ACR: $(ACR_NAME).azurecr.io"
          echo "SEMVER: $(SEMVER)"
        displayName: 'Verification Summary' 