parameters:
  jobType: ''  # Required - no default
  vmImage: 'ubuntu-latest'  # Only essential default
  
  # Package configuration
  packageMaxParallel: 4
  packageRetryCount: 2
  packageTimeoutMinutes: 30
  
  # Environment-specific parameters (required)
  deployEnvironment: ''
  deployNamespace: ''
  deployReleaseName: ''
  chartPath: ''
  valuesFile: ''
  helmVersion: '3.12.0'  # Helm version to use
  namespace: 'online-boutique'  # Default namespace
  releaseName: 'online-boutique'  # Default release name
  
  # Helm deployment configuration
  helmTimeout: '10m'
  helmMaxHistory: 5
  
  # Verification configuration
  podReadyTimeout: 300

jobs:
- ${{ if eq(parameters.jobType, 'version') }}:
  - job: GitVersion
    displayName: 'Run GitVersion'
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - checkout: self
        fetchDepth: 0
      - task: gitversion/setup@3
        name: gitversionSetup
        inputs:
          versionSpec: '5.x'
      - task: gitversion/execute@3
        name: gitversionExecute
        inputs:
          useConfigFile: false
      - script: |
          echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$(GitVersion.SemVer)"
        name: SetSemver
        displayName: 'Set SEMVER variable'
      - script: |
          echo "Calculated SEMVER is: $(GitVersion.SemVer)"
        displayName: 'Echo SEMVER Output'

- ${{ if eq(parameters.jobType, 'package') }}:
  - job: ValidateACR
    displayName: 'Validate ACR Access'
    condition: succeeded()
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - script: |
          echo "=== Package Stage - ACR Variables Debug ==="
          echo "Stage: Package (ACR Builds)"
          echo "ACR_NAME: '$(ACR_NAME)'"
          echo "RESOURCE_GROUP: '$(RESOURCE_GROUP)'"
          echo "AZURE_SUBSCRIPTION: '$(AZURE_SUBSCRIPTION)'"
          echo "================================"
          
          # List all environment variables to debug
          echo "=== All Environment Variables ==="
          env | grep -E "(ACR|RESOURCE|AZURE|SUBSCRIPTION)" | sort
          echo "=================================="
          
          # Check if variables are empty
          if [ -z "$(ACR_NAME)" ]; then
            echo "##vso[task.logissue type=error]ACR_NAME is empty or not set"
            echo "##vso[task.setvariable variable=ACR_NAME]acronlineboutique"
            echo "Using fallback ACR_NAME: acronlineboutique"
          fi
          
          if [ -z "$(RESOURCE_GROUP)" ]; then
            echo "##vso[task.logissue type=error]RESOURCE_GROUP is empty or not set"
            echo "##vso[task.setvariable variable=RESOURCE_GROUP]rg-online-boutique"
            echo "Using fallback RESOURCE_GROUP: rg-online-boutique"
          fi
          
          if [ -z "$(AZURE_SUBSCRIPTION)" ]; then
            echo "##vso[task.logissue type=error]AZURE_SUBSCRIPTION is empty or not set"
            exit 1
          fi
        displayName: 'Debug ACR Variables in Package Stage'

      - task: AzureCLI@2
        displayName: 'Validate ACR Access'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Use fallback values if variables are empty
            ACR_NAME="${ACR_NAME:-acronlineboutique}"
            RESOURCE_GROUP="${RESOURCE_GROUP:-rg-online-boutique}"
            
            echo "Validating ACR: $ACR_NAME in Resource Group: $RESOURCE_GROUP"
            
            # Check if ACR exists and is accessible
            if ! az acr show -n "$ACR_NAME" -g "$RESOURCE_GROUP" &>/dev/null; then
              echo "##vso[task.logissue type=error]ACR $ACR_NAME not found or not accessible in resource group $RESOURCE_GROUP"
              echo "Trying to list all ACRs in the subscription..."
              az acr list --output table
              exit 1
            fi
            
            # Check if we have necessary permissions
            if ! az acr check-name -n "$ACR_NAME" &>/dev/null; then
              echo "##vso[task.logissue type=error]Insufficient permissions for ACR $ACR_NAME"
              exit 1
            fi
            
            echo "ACR $ACR_NAME is accessible and ready for builds"
            echo "ACR Login Server: $(az acr show -n "$ACR_NAME" -g "$RESOURCE_GROUP" --query loginServer -o tsv)"

  - job: Package
    displayName: 'Package Container Images'
    dependsOn: ValidateACR
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
    timeoutInMinutes: ${{ parameters.packageTimeoutMinutes }}
    strategy:
      matrix: 
        cartservice:
          serviceName: cartservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/cartservice/src/Dockerfile'
          context: 'src/cartservice/src'
        productcatalogservice:
          serviceName: productcatalogservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/productcatalogservice/Dockerfile'
          context: 'src/productcatalogservice'
        currencyservice:
          serviceName: currencyservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/currencyservice/Dockerfile'
          context: 'src/currencyservice'
        emailservice:
          serviceName: emailservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/emailservice/Dockerfile'
          context: 'src/emailservice'
        paymentservice:
          serviceName: paymentservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/paymentservice/Dockerfile'
          context: 'src/paymentservice'
        shippingservice:
          serviceName: shippingservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/shippingservice/Dockerfile'
          context: 'src/shippingservice'
        recommendationservice:
          serviceName: recommendationservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/recommendationservice/Dockerfile'
          context: 'src/recommendationservice'
        adservice:
          serviceName: adservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/adservice/Dockerfile'
          context: 'src/adservice'
        checkoutservice:
          serviceName: checkoutservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/checkoutservice/Dockerfile'
          context: 'src/checkoutservice'
        shoppingassistantservice:
          serviceName: shoppingassistantservice
          dockerfile: '$(System.DefaultWorkingDirectory)/src/shoppingassistantservice/Dockerfile'
          context: 'src/shoppingassistantservice'
        frontend:
          serviceName: frontend
          dockerfile: '$(System.DefaultWorkingDirectory)/src/frontend/Dockerfile'
          context: 'src/frontend'
      maxParallel: ${{ parameters.packageMaxParallel }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - script: |
          echo "Using SEMVER: $(SEMVER)"
          echo "Building service: $(serviceName)"
        displayName: 'Echo SEMVER and Service in Package Stage'

      - template: docker/acr-build-template.yml
        parameters:
          acrName: $(ACR_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          serviceName: $(serviceName)
          dockerfile: $(dockerfile)
          context: $(context)
          retryCount: ${{ parameters.packageRetryCount }}
          tags: $(SEMVER)

- ${{ if eq(parameters.jobType, 'validate') }}:
  - job: ChartValidation
    displayName: 'Validate Chart Structure'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - checkout: self
      - task: HelmInstaller@0
        displayName: 'Install Helm'
        inputs:
          helmVersion: '3.12.0'
      - script: |
          # Validate chart structure
          helm lint online-boutique-chart
          if [ $? -ne 0 ]; then
            echo "##vso[task.logissue type=error]Helm chart validation failed"
            exit 1
          fi
          
          # Check dependencies
          helm dependency build online-boutique-chart
          if [ $? -ne 0 ]; then
            echo "##vso[task.logissue type=error]Helm dependency build failed"
            exit 1
          fi
          
          # Dry run to validate values
          helm template ${{ parameters.releaseName }} online-boutique-chart \
            --values online-boutique-chart/values.yaml \
            --namespace ${{ parameters.namespace }} \
            --debug
        displayName: 'Validate Chart and Values'

- ${{ if eq(parameters.jobType, 'deploy') }}:
  - job: Deploy
    displayName: 'Deploy to Environment'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
      ENVIRONMENT: 'main'
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - script: |
          echo "Using SEMVER: $(SEMVER)"
          echo "ACR Name: $(ACR_NAME)"
          echo "Environment: $(ENVIRONMENT)"
          echo "Namespace: ${{ parameters.namespace }}"
          echo "Helm Version: 3.12.0"
        displayName: 'Echo Version in Deploy Stage'

      - template: helm/helm-deploy-template.yml
        parameters:
          clusterName: $(AKS_CLUSTER_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          namespace: ${{ parameters.namespace }}
          chartPath: 'online-boutique-chart'
          releaseName: ${{ parameters.releaseName }}
          valuesFile: 'values.yaml'
          acrName: $(ACR_NAME)
          helmVersion: '3.12.0'
          helmTimeout: '10m'
          helmMaxHistory: 5
          semver: $(SEMVER)

- ${{ if eq(parameters.jobType, 'verify') }}:
  - job: HealthCheck
    displayName: 'Health Check - Environment'
    variables:
      SEMVER: $[ stageDependencies.Version.GitVersion.outputs['SetSemver.SEMVER'] ]
      ENVIRONMENT: 'main'
      POD_READY_TIMEOUT: 300
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - task: AzureCLI@2
        displayName: 'Get AKS Credentials'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials -n $(AKS_CLUSTER_NAME) -g $(RESOURCE_GROUP) --overwrite-existing

      - script: |
          # Wait for all pods to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=${{ parameters.releaseName }} -n ${{ parameters.namespace }} --timeout=$(POD_READY_TIMEOUT)s
          
          # Check pod status
          kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          
          # Check service status
          kubectl get services -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          
          # Check deployment status
          kubectl get deployments -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          
          # Check image tags being used
          echo "=== Image Tags in Use ==="
          kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }} -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].image}{"\n"}{end}'
        displayName: 'Verify Pods and Services'

      - script: |
          # Environment-specific health checks
          echo "=== Environment-Specific Health Checks ==="
          
          if [ "$(ENVIRONMENT)" = "dev" ]; then
            echo "Running DEV environment health checks..."
            echo "Checking service endpoints..."
            kubectl get endpoints -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
            
          elif [ "$(ENVIRONMENT)" = "staging" ]; then
            echo "Running STAGING environment health checks..."
            echo "Checking service endpoints..."
            kubectl get endpoints -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
            
            echo "Checking service configurations..."
            kubectl get services -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }} -o wide
            
          elif [ "$(ENVIRONMENT)" = "prod" ]; then
            echo "Running PROD environment health checks..."
            echo "Checking service endpoints..."
            kubectl get endpoints -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
            
            echo "Checking service configurations..."
            kubectl get services -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }} -o wide
            
            echo "Checking resource usage..."
            kubectl top pods -n ${{ parameters.namespace }} 2>/dev/null || echo "Metrics not available"
            
            echo "Checking pod resource limits..."
            kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }} -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].resources.limits.cpu}{"\t"}{.spec.containers[*].resources.limits.memory}{"\n"}{end}'
          fi
        displayName: 'Environment-Specific Health Checks'

      - script: |
          echo "Deployment verification completed"
          echo "Release: ${{ parameters.releaseName }}"
          echo "Namespace: ${{ parameters.namespace }}"
          echo "Environment: $(ENVIRONMENT)"
          echo "Using latest images from ACR: $(ACR_NAME).azurecr.io"
          echo "SEMVER: $(SEMVER)"
        displayName: 'Verification Summary' 