parameters:
  gitDepth: 1  # Number of commits to look back
  sourceDir: 'src'  # Source directory to monitor
  chartDir: 'online-boutique-chart'  # Helm chart directory to monitor
  acrName: ''  # Required: ACR name for emptiness check
  resourceGroup: ''  # Required: Resource group for ACR
  azureSubscription: ''  # Required: Azure subscription service connection
  services:  # Optional: Override default services
    - name: 'cartservice'
      path: 'src/cartservice/'
      dependencies: []
    - name: 'frontend'
      path: 'src/frontend/'
      dependencies: []
    - name: 'productcatalogservice'
      path: 'src/productcatalogservice/'
      dependencies: []
    - name: 'currencyservice'
      path: 'src/currencyservice/'
      dependencies: []
    - name: 'emailservice'
      path: 'src/emailservice/'
      dependencies: []
    - name: 'paymentservice'
      path: 'src/paymentservice/'
      dependencies: []
    - name: 'shippingservice'
      path: 'src/shippingservice/'
      dependencies: []
    - name: 'recommendationservice'
      path: 'src/recommendationservice/'
      dependencies: ['productcatalogservice']
    - name: 'adservice'
      path: 'src/adservice/'
      dependencies: []
    - name: 'checkoutservice'
      path: 'src/checkoutservice/'
      dependencies: ['cartservice', 'paymentservice']
    - name: 'shoppingassistantservice'
      path: 'src/shoppingassistantservice/'
      dependencies: []

steps:
  - checkout: self
    fetchDepth: ${{ parameters.gitDepth }}

  # ACR Emptiness Check
  - task: AzureCLI@2
    displayName: 'Check ACR Repository Status'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "=== ACR Emptiness Check ==="
        echo "ACR: ${{ parameters.acrName }}"
        echo "Resource Group: ${{ parameters.resourceGroup }}"
        
        # Login to ACR
        if ! az acr login --name "${{ parameters.acrName }}" &>/dev/null; then
          echo "‚ùå Failed to login to ACR ${{ parameters.acrName }}"
          exit 1
        fi
        
        # Get list of repositories in ACR
        REPOSITORIES=$(az acr repository list -n "${{ parameters.acrName }}" --output tsv 2>/dev/null)
        
        if [ -z "$REPOSITORIES" ]; then
          echo "‚úÖ ACR is empty - no repositories found"
          echo "üîÑ Will force build all services"
          echo "##vso[task.setvariable variable=ACR_EMPTY;isOutput=true]true"
          echo "##vso[task.setvariable variable=FORCE_BUILD_ALL;isOutput=true]true"
        else
          echo "üì¶ ACR contains repositories:"
          echo "$REPOSITORIES"
          echo "##vso[task.setvariable variable=ACR_EMPTY;isOutput=true]false"
          echo "##vso[task.setvariable variable=FORCE_BUILD_ALL;isOutput=true]false"
        fi
        
        echo "====================================="
    name: ACRCheck

  - script: |
      echo "=== Change Detection for Online Boutique ==="
      echo "Git depth: ${{ parameters.gitDepth }}"
      echo "Source directory: ${{ parameters.sourceDir }}"
      echo "Chart directory: ${{ parameters.chartDir }}"
      echo "ACR Empty: $(ACRCheck.ACR_EMPTY)"
      echo "Force Build All: $(ACRCheck.FORCE_BUILD_ALL)"
      echo "============================================="
      
      # Check if ACR is empty and force build all
      if [ "$(ACRCheck.FORCE_BUILD_ALL)" == "true" ]; then
        echo "üîÑ ACR is empty - forcing build of all services"
        SERVICES_TO_BUILD="all"
        CHANGED_SERVICES="all"
        echo "##vso[task.setvariable variable=SERVICES_TO_BUILD;isOutput=true]all"
        echo "##vso[task.setvariable variable=CHANGED_SERVICES;isOutput=true]all"
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
        echo "##vso[task.setvariable variable=BUILD_REASON;isOutput=true]ACR_EMPTY"
        
        # Debug output
        echo "=== DEBUG: ACR Empty Output Variables ==="
        echo "SERVICES_TO_BUILD: all"
        echo "CHANGED_SERVICES: all"
        echo "BUILD_ALL: true"
        echo "BUILD_REASON: ACR_EMPTY"
        echo "========================================="
        
        # Set all individual service flags to true
        declare -A SERVICE_PATHS=(
          ["cartservice"]="src/cartservice/"
          ["frontend"]="src/frontend/"
          ["productcatalogservice"]="src/productcatalogservice/"
          ["currencyservice"]="src/currencyservice/"
          ["emailservice"]="src/emailservice/"
          ["paymentservice"]="src/paymentservice/"
          ["shippingservice"]="src/shippingservice/"
          ["recommendationservice"]="src/recommendationservice/"
          ["adservice"]="src/adservice/"
          ["checkoutservice"]="src/checkoutservice/"
          ["shoppingassistantservice"]="src/shoppingassistantservice/"
        )
        
        for service in "${!SERVICE_PATHS[@]}"; do
          echo "##vso[task.setvariable variable=BUILD_${service^^};isOutput=true]true"
          echo "DEBUG: Setting BUILD_${service^^}=true"
        done
        
        exit 0
      fi
      
      # Get list of changed files
      CHANGED_FILES=$(git diff --name-only HEAD~${{ parameters.gitDepth }})
      echo "Changed files:"
      echo "$CHANGED_FILES"
      echo ""
      
      # Initialize services to build
      SERVICES_TO_BUILD=""
      CHANGED_SERVICES=""
      
      # Check each service for changes
      echo "=== Checking Service Changes ==="
      
      # Define services and their paths
      declare -A SERVICE_PATHS=(
        ["cartservice"]="src/cartservice/"
        ["frontend"]="src/frontend/"
        ["productcatalogservice"]="src/productcatalogservice/"
        ["currencyservice"]="src/currencyservice/"
        ["emailservice"]="src/emailservice/"
        ["paymentservice"]="src/paymentservice/"
        ["shippingservice"]="src/shippingservice/"
        ["recommendationservice"]="src/recommendationservice/"
        ["adservice"]="src/adservice/"
        ["checkoutservice"]="src/checkoutservice/"
        ["shoppingassistantservice"]="src/shoppingassistantservice/"
      )
      
      # Define service dependencies
      declare -A SERVICE_DEPS=(
        ["recommendationservice"]="productcatalogservice"
        ["checkoutservice"]="cartservice paymentservice"
      )
      
      # Check each service for changes
      for service in "${!SERVICE_PATHS[@]}"; do
        echo "Checking service: $service"
        if echo "$CHANGED_FILES" | grep -q "${SERVICE_PATHS[$service]}"; then
          echo "  ‚úÖ $service has changes"
          CHANGED_SERVICES="$CHANGED_SERVICES $service"
          SERVICES_TO_BUILD="$SERVICES_TO_BUILD $service"
        else
          echo "  ‚ùå $service has no changes"
        fi
      done
      
      echo ""
      echo "=== Resolving Dependencies ==="
      
      # Resolve service dependencies
      for service in $CHANGED_SERVICES; do
        if [[ -n "${SERVICE_DEPS[$service]}" ]]; then
          echo "Checking dependencies for $service"
          for dep in ${SERVICE_DEPS[$service]}; do
            if ! echo "$SERVICES_TO_BUILD" | grep -q "$dep"; then
              echo "  ‚ûï Adding dependency: $dep"
              SERVICES_TO_BUILD="$SERVICES_TO_BUILD $dep"
            else
              echo "  ‚úÖ Dependency already included: $dep"
            fi
          done
        fi
      done
      
      echo ""
      echo "=== Checking Infrastructure Changes ==="
      
      # Check for infrastructure changes
      if echo "$CHANGED_FILES" | grep -q "${{ parameters.chartDir }}/"; then
        echo "‚úÖ Infrastructure changes detected in ${{ parameters.chartDir }}/"
        echo "üîÑ Building all services for infrastructure update"
        SERVICES_TO_BUILD="all"
      else
        echo "‚ùå No infrastructure changes detected"
      fi
      
      # Remove duplicates and trim whitespace
      SERVICES_TO_BUILD=$(echo "$SERVICES_TO_BUILD" | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      
      echo ""
      echo "=== Final Results ==="
      echo "Changed services: $CHANGED_SERVICES"
      echo "Services to build: $SERVICES_TO_BUILD"
      echo "====================================="
      
      # Set output variables
      echo "##vso[task.setvariable variable=SERVICES_TO_BUILD;isOutput=true]$SERVICES_TO_BUILD"
      echo "##vso[task.setvariable variable=CHANGED_SERVICES;isOutput=true]$CHANGED_SERVICES"
      echo "##vso[task.setvariable variable=CHANGED_FILES;isOutput=true]$CHANGED_FILES"
      echo "##vso[task.setvariable variable=BUILD_REASON;isOutput=true]CODE_CHANGES"
      
      # Debug output
      echo "=== DEBUG: Normal Change Detection Output Variables ==="
      echo "SERVICES_TO_BUILD: $SERVICES_TO_BUILD"
      echo "CHANGED_SERVICES: $CHANGED_SERVICES"
      echo "BUILD_REASON: CODE_CHANGES"
      echo "====================================================="
      
      # Set individual service flags for easier condition checking
      for service in "${!SERVICE_PATHS[@]}"; do
        if echo "$SERVICES_TO_BUILD" | grep -q "$service"; then
          echo "##vso[task.setvariable variable=BUILD_${service^^};isOutput=true]true"
          echo "DEBUG: Setting BUILD_${service^^}=true"
        else
          echo "##vso[task.setvariable variable=BUILD_${service^^};isOutput=true]false"
          echo "DEBUG: Setting BUILD_${service^^}=false"
        fi
      done
      
      # Set infrastructure flag
      if echo "$SERVICES_TO_BUILD" | grep -q "all"; then
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
        echo "DEBUG: Setting BUILD_ALL=true"
      else
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]false"
        echo "DEBUG: Setting BUILD_ALL=false"
      fi
      
    displayName: 'Detect Changed Services'
    name: DetectChanges 