parameters:
  gitDepth: 0  # Number of commits to look back
  sourceDir: 'src'  # Source directory to monitor
  chartDir: 'online-boutique-chart'  # Helm chart directory to monitor
  acrName: ''  # Required: ACR name for emptiness check
  resourceGroup: ''  # Required: Resource group for ACR
  azureSubscription: ''  # Required: Azure subscription service connection

steps:
  # Include centralized service definitions
  - template: service-definitions.yml

  # ACR Emptiness Check with better error handling
  - task: AzureCLI@2
    displayName: 'Check ACR Repository Status'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "=== ACR Emptiness Check ==="
        echo "ACR: ${{ parameters.acrName }}"
        echo "Resource Group: ${{ parameters.resourceGroup }}"
        
        # Login to ACR with better error handling
        if ! az acr login --name "${{ parameters.acrName }}" &>/dev/null; then
          echo "‚ö†Ô∏è Warning: Failed to login to ACR ${{ parameters.acrName }}"
          echo "Will assume ACR is not empty and proceed with normal change detection"
          echo "##vso[task.setvariable variable=ACR_EMPTY;isOutput=true]false"
          echo "##vso[task.setvariable variable=FORCE_BUILD_ALL;isOutput=true]false"
          echo "##vso[task.setvariable variable=ACR_CHECK_FAILED;isOutput=true]true"
          exit 0  # Don't fail the pipeline
        fi
        
        # Get list of repositories in ACR
        REPOSITORIES=$(az acr repository list -n "${{ parameters.acrName }}" --output tsv 2>/dev/null)
        
        if [ -z "$REPOSITORIES" ]; then
          echo "‚úÖ ACR is empty - no repositories found"
          echo "üîÑ Will force build all services"
          echo "##vso[task.setvariable variable=ACR_EMPTY;isOutput=true]true"
          echo "##vso[task.setvariable variable=FORCE_BUILD_ALL;isOutput=true]true"
          echo "##vso[task.setvariable variable=ACR_CHECK_FAILED;isOutput=true]false"
        else
          echo "üì¶ ACR contains repositories:"
          echo "$REPOSITORIES"
          echo "##vso[task.setvariable variable=ACR_EMPTY;isOutput=true]false"
          echo "##vso[task.setvariable variable=FORCE_BUILD_ALL;isOutput=true]false"
          echo "##vso[task.setvariable variable=ACR_CHECK_FAILED;isOutput=true]false"
        fi
        
        echo "====================================="
    name: ACRCheck

  # Enhanced Change Detection with improved structure
  - script: |
      echo "=== Enhanced Change Detection for Online Boutique ==="
      echo "Git depth: ${{ parameters.gitDepth }}"
      echo "Source directory: ${{ parameters.sourceDir }}"
      echo "Chart directory: ${{ parameters.chartDir }}"
      echo "ACR Empty: $(ACRCheck.ACR_EMPTY)"
      echo "Force Build All: $(ACRCheck.FORCE_BUILD_ALL)"
      echo "ACR Check Failed: $(ACRCheck.ACR_CHECK_FAILED)"
      echo "============================================="
      
      # Parse service definitions from template variables
      ALL_SERVICES_LIST=$(SetServiceDefinitions.ALL_SERVICES)
      echo "All services: $ALL_SERVICES_LIST"
      
      # Convert comma-separated list to array
      IFS=',' read -ra SERVICES <<< "$ALL_SERVICES_LIST"
      
      # Build service paths and dependencies from template variables
      declare -A SERVICE_PATHS
      declare -A SERVICE_DEPS
      
      # Parse each service config from template variables
      for service in "${SERVICES[@]}"; do
        service_upper=$(echo "$service" | tr '[:lower:]' '[:upper:]')
        config_var="${service_upper}_CONFIG"
        config_value=$(SetServiceDefinitions.$config_var)
        
        if [ -n "$config_value" ]; then
          # Extract path from JSON config
          path=$(echo "$config_value" | grep -o '"path":"[^"]*"' | cut -d'"' -f4)
          dependencies=$(echo "$config_value" | grep -o '"dependencies":\[[^]]*\]' | grep -o '"[^"]*"' | tr '\n' ' ')
          
          SERVICE_PATHS["$service"]="$path"
          if [ -n "$dependencies" ]; then
            SERVICE_DEPS["$service"]="$dependencies"
          fi
          
          echo "Service: $service, Path: $path, Dependencies: $dependencies"
        fi
      done
      
      # Function to set all service flags
      set_all_service_flags() {
        local reason="$1"
        echo "üîÑ Setting all service flags to true (Reason: $reason)"
        for service in "${!SERVICE_PATHS[@]}"; do
          echo "##vso[task.setvariable variable=BUILD_${service^^};isOutput=true]true"
        done
      }
      
      # Function to set service flags based on list
      set_service_flags() {
        local services_to_build="$1"
        echo "üîÑ Setting service flags based on changes"
        for service in "${!SERVICE_PATHS[@]}"; do
          if echo "$services_to_build" | grep -q "$service"; then
            echo "##vso[task.setvariable variable=BUILD_${service^^};isOutput=true]true"
            echo "DEBUG: Setting BUILD_${service^^}=true"
          else
            echo "##vso[task.setvariable variable=BUILD_${service^^};isOutput=true]false"
            echo "DEBUG: Setting BUILD_${service^^}=false"
          fi
        done
      }
      
      # Check commit message for override keywords
      COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
      echo "Latest commit message: $COMMIT_MESSAGE"
      
      # Check for commit message override keywords
      if echo "$COMMIT_MESSAGE" | grep -qi "\[force-build-all\]\|\[rebuild-all\]\|\[build-all\]"; then
        echo "üîÑ Commit message contains override keyword - forcing build of all services"
        SERVICES_TO_BUILD="all"
        CHANGED_SERVICES="all"
        BUILD_REASON="COMMIT_OVERRIDE"
        set_all_service_flags "commit override"
        
        # Set output variables
        echo "##vso[task.setvariable variable=SERVICES_TO_BUILD;isOutput=true]all"
        echo "##vso[task.setvariable variable=CHANGED_SERVICES;isOutput=true]all"
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
        echo "##vso[task.setvariable variable=BUILD_REASON;isOutput=true]$BUILD_REASON"
        
        echo "=== Final Results ==="
        echo "Build Reason: $BUILD_REASON"
        echo "Services to build: all"
        echo "====================================="
        exit 0
      fi
      
      # Check if ACR is empty and force build all
      if [ "$(ACRCheck.FORCE_BUILD_ALL)" == "true" ]; then
        echo "üîÑ ACR is empty - forcing build of all services"
        SERVICES_TO_BUILD="all"
        CHANGED_SERVICES="all"
        BUILD_REASON="ACR_EMPTY"
        set_all_service_flags "ACR empty"
        
        # Set output variables
        echo "##vso[task.setvariable variable=SERVICES_TO_BUILD;isOutput=true]all"
        echo "##vso[task.setvariable variable=CHANGED_SERVICES;isOutput=true]all"
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
        echo "##vso[task.setvariable variable=BUILD_REASON;isOutput=true]$BUILD_REASON"
        
        echo "=== Final Results ==="
        echo "Build Reason: $BUILD_REASON"
        echo "Services to build: all"
        echo "====================================="
        exit 0
      fi
      
      # Validate git depth and handle edge cases
      if [ "${{ parameters.gitDepth }}" -eq 0 ]; then
        echo "‚ö†Ô∏è Git depth is 0, checking if this is a shallow clone"
        if git rev-parse --is-shallow-repository 2>/dev/null | grep -q "true"; then
          echo "‚ö†Ô∏è Shallow clone detected, using all available commits"
          CHANGED_FILES=$(git diff --name-only HEAD~$(git rev-list --count HEAD) 2>/dev/null || git diff --name-only HEAD~1 2>/dev/null || echo "")
        else
          echo "‚úÖ Full repository, using all commits"
          CHANGED_FILES=$(git diff --name-only HEAD~$(git rev-list --count HEAD) 2>/dev/null || echo "")
        fi
      else
        echo "‚úÖ Using specified git depth: ${{ parameters.gitDepth }}"
        CHANGED_FILES=$(git diff --name-only HEAD~${{ parameters.gitDepth }} 2>/dev/null || echo "")
      fi
      
      echo "Changed files:"
      echo "$CHANGED_FILES"
      echo ""
      
      # Initialize services to build
      SERVICES_TO_BUILD=""
      CHANGED_SERVICES=""
      
      # Check each service for changes
      echo "=== Checking Service Changes ==="
      
      for service in "${!SERVICE_PATHS[@]}"; do
        echo "Checking service: $service"
        if echo "$CHANGED_FILES" | grep -q "${SERVICE_PATHS[$service]}"; then
          echo "  ‚úÖ $service has changes"
          CHANGED_SERVICES="$CHANGED_SERVICES $service"
          SERVICES_TO_BUILD="$SERVICES_TO_BUILD $service"
        else
          echo "  ‚ùå $service has no changes"
        fi
      done
      
      echo ""
      echo "=== Resolving Dependencies ==="
      
      # Resolve service dependencies
      for service in $CHANGED_SERVICES; do
        if [[ -n "${SERVICE_DEPS[$service]}" ]]; then
          echo "Checking dependencies for $service"
          for dep in ${SERVICE_DEPS[$service]}; do
            if ! echo "$SERVICES_TO_BUILD" | grep -q "$dep"; then
              echo "  ‚ûï Adding dependency: $dep"
              SERVICES_TO_BUILD="$SERVICES_TO_BUILD $dep"
            else
              echo "  ‚úÖ Dependency already included: $dep"
            fi
          done
        fi
      done
      
      echo ""
      echo "=== Checking Infrastructure Changes ==="
      
      # Check for infrastructure changes
      if echo "$CHANGED_FILES" | grep -q "${{ parameters.chartDir }}/"; then
        echo "‚úÖ Infrastructure changes detected in ${{ parameters.chartDir }}/"
        echo "üîÑ Building all services for infrastructure update"
        SERVICES_TO_BUILD="all"
        BUILD_REASON="INFRASTRUCTURE_CHANGES"
        set_all_service_flags "infrastructure changes"
        
        # Set output variables
        echo "##vso[task.setvariable variable=SERVICES_TO_BUILD;isOutput=true]all"
        echo "##vso[task.setvariable variable=CHANGED_SERVICES;isOutput=true]all"
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
        echo "##vso[task.setvariable variable=BUILD_REASON;isOutput=true]$BUILD_REASON"
        
        echo "=== Final Results ==="
        echo "Build Reason: $BUILD_REASON"
        echo "Services to build: all"
        echo "====================================="
        exit 0
      else
        echo "‚ùå No infrastructure changes detected"
      fi
      
      # Remove duplicates and trim whitespace
      SERVICES_TO_BUILD=$(echo "$SERVICES_TO_BUILD" | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      
      # Set service flags based on changes
      set_service_flags "$SERVICES_TO_BUILD"
      
      # Set infrastructure flag
      if echo "$SERVICES_TO_BUILD" | grep -q "all"; then
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
        echo "DEBUG: Setting BUILD_ALL=true"
      else
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]false"
        echo "DEBUG: Setting BUILD_ALL=false"
      fi
      
      # Set output variables
      echo "##vso[task.setvariable variable=SERVICES_TO_BUILD;isOutput=true]$SERVICES_TO_BUILD"
      echo "##vso[task.setvariable variable=CHANGED_SERVICES;isOutput=true]$CHANGED_SERVICES"
      echo "##vso[task.setvariable variable=CHANGED_FILES;isOutput=true]$CHANGED_FILES"
      echo "##vso[task.setvariable variable=BUILD_REASON;isOutput=true]CODE_CHANGES"
      
      echo "=== Final Results ==="
      echo "Changed services: $CHANGED_SERVICES"
      echo "Services to build: $SERVICES_TO_BUILD"
      echo "Build reason: CODE_CHANGES"
      echo "====================================="
      
    displayName: 'Detect Changed Services'
    name: DetectChanges 