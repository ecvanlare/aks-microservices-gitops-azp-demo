parameters:
  gitDepth: 1  # Number of commits to look back
  sourceDir: 'src'  # Source directory to monitor
  chartDir: 'online-boutique-chart'  # Helm chart directory to monitor
  services:  # Optional: Override default services
    - name: 'cartservice'
      path: 'src/cartservice/'
      dependencies: []
    - name: 'frontend'
      path: 'src/frontend/'
      dependencies: []
    - name: 'productcatalogservice'
      path: 'src/productcatalogservice/'
      dependencies: []
    - name: 'currencyservice'
      path: 'src/currencyservice/'
      dependencies: []
    - name: 'emailservice'
      path: 'src/emailservice/'
      dependencies: []
    - name: 'paymentservice'
      path: 'src/paymentservice/'
      dependencies: []
    - name: 'shippingservice'
      path: 'src/shippingservice/'
      dependencies: []
    - name: 'recommendationservice'
      path: 'src/recommendationservice/'
      dependencies: ['productcatalogservice']
    - name: 'adservice'
      path: 'src/adservice/'
      dependencies: []
    - name: 'checkoutservice'
      path: 'src/checkoutservice/'
      dependencies: ['cartservice', 'paymentservice']
    - name: 'shoppingassistantservice'
      path: 'src/shoppingassistantservice/'
      dependencies: []

steps:
  - checkout: self
    fetchDepth: ${{ parameters.gitDepth }}

  - script: |
      echo "=== Change Detection for Online Boutique ==="
      echo "Git depth: ${{ parameters.gitDepth }}"
      echo "Source directory: ${{ parameters.sourceDir }}"
      echo "Chart directory: ${{ parameters.chartDir }}"
      echo "============================================="
      
      # Get list of changed files
      CHANGED_FILES=$(git diff --name-only HEAD~${{ parameters.gitDepth }})
      echo "Changed files:"
      echo "$CHANGED_FILES"
      echo ""
      
      # Initialize services to build
      SERVICES_TO_BUILD=""
      CHANGED_SERVICES=""
      
      # Check each service for changes
      echo "=== Checking Service Changes ==="
      
      # Define services and their paths
      declare -A SERVICE_PATHS=(
        ["cartservice"]="src/cartservice/"
        ["frontend"]="src/frontend/"
        ["productcatalogservice"]="src/productcatalogservice/"
        ["currencyservice"]="src/currencyservice/"
        ["emailservice"]="src/emailservice/"
        ["paymentservice"]="src/paymentservice/"
        ["shippingservice"]="src/shippingservice/"
        ["recommendationservice"]="src/recommendationservice/"
        ["adservice"]="src/adservice/"
        ["checkoutservice"]="src/checkoutservice/"
        ["shoppingassistantservice"]="src/shoppingassistantservice/"
      )
      
      # Define service dependencies
      declare -A SERVICE_DEPS=(
        ["recommendationservice"]="productcatalogservice"
        ["checkoutservice"]="cartservice paymentservice"
      )
      
      # Check each service for changes
      for service in "${!SERVICE_PATHS[@]}"; do
        echo "Checking service: $service"
        if echo "$CHANGED_FILES" | grep -q "${SERVICE_PATHS[$service]}"; then
          echo "  ‚úÖ $service has changes"
          CHANGED_SERVICES="$CHANGED_SERVICES $service"
          SERVICES_TO_BUILD="$SERVICES_TO_BUILD $service"
        else
          echo "  ‚ùå $service has no changes"
        fi
      done
      
      echo ""
      echo "=== Resolving Dependencies ==="
      
      # Resolve service dependencies
      for service in $CHANGED_SERVICES; do
        if [[ -n "${SERVICE_DEPS[$service]}" ]]; then
          echo "Checking dependencies for $service"
          for dep in ${SERVICE_DEPS[$service]}; do
            if ! echo "$SERVICES_TO_BUILD" | grep -q "$dep"; then
              echo "  ‚ûï Adding dependency: $dep"
              SERVICES_TO_BUILD="$SERVICES_TO_BUILD $dep"
            else
              echo "  ‚úÖ Dependency already included: $dep"
            fi
          done
        fi
      done
      
      echo ""
      echo "=== Checking Infrastructure Changes ==="
      
      # Check for infrastructure changes
      if echo "$CHANGED_FILES" | grep -q "${{ parameters.chartDir }}/"; then
        echo "‚úÖ Infrastructure changes detected in ${{ parameters.chartDir }}/"
        echo "üîÑ Building all services for infrastructure update"
        SERVICES_TO_BUILD="all"
      else
        echo "‚ùå No infrastructure changes detected"
      fi
      
      # Remove duplicates and trim whitespace
      SERVICES_TO_BUILD=$(echo "$SERVICES_TO_BUILD" | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      
      echo ""
      echo "=== Final Results ==="
      echo "Changed services: $CHANGED_SERVICES"
      echo "Services to build: $SERVICES_TO_BUILD"
      echo "====================================="
      
      # Set output variables
      echo "##vso[task.setvariable variable=SERVICES_TO_BUILD;isOutput=true]$SERVICES_TO_BUILD"
      echo "##vso[task.setvariable variable=CHANGED_SERVICES;isOutput=true]$CHANGED_SERVICES"
      echo "##vso[task.setvariable variable=CHANGED_FILES;isOutput=true]$CHANGED_FILES"
      
      # Set individual service flags for easier condition checking
      for service in "${!SERVICE_PATHS[@]}"; do
        if echo "$SERVICES_TO_BUILD" | grep -q "$service"; then
          echo "##vso[task.setvariable variable=BUILD_${service^^};isOutput=true]true"
        else
          echo "##vso[task.setvariable variable=BUILD_${service^^};isOutput=true]false"
        fi
      done
      
      # Set infrastructure flag
      if echo "$SERVICES_TO_BUILD" | grep -q "all"; then
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
      else
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]false"
      fi
      
    displayName: 'Detect Changed Services'
    name: DetectChanges 