parameters:
  workingDirectory: ''
  command: ''  # validate, plan, apply, or destroy

steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: 'latest'

- task: AzureCLI@2
  displayName: 'Run Terraform Command'
  inputs:
    azureSubscription: $(AZURE_SUBSCRIPTION)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    workingDirectory: ${{ parameters.workingDirectory }}
    inlineScript: |
      set -e

      echo "Current working directory: $(pwd)"
      echo "Working directory parameter: ${{ parameters.workingDirectory }}"
      echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"

      echo "Initializing Terraform..."
      terraform init \
        -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
        -backend-config="container_name=$(CONTAINER_NAME)" \
        -backend-config="key=$(TERRAFORM_STATE_KEY)" \
        -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
        -reconfigure

      case "${{ parameters.command }}" in
        validate)
          terraform validate
          ;;
        plan)
          echo "Creating plan file..."
          terraform plan -out=tfplan
          echo "Plan file created at: $(pwd)/tfplan"
          ls -la tfplan
          ;;
        apply)
          echo "Looking for plan file..."
          ls -la tfplan || echo "Plan file not found"
          terraform apply -auto-approve "${{ parameters.workingDirectory }}/tfplan"
          ;;
        destroy)
          terraform destroy -auto-approve
          ;;
        *)
          echo "Invalid command: ${{ parameters.command }}"
          exit 1
          ;;
      esac

- ${{ if eq(parameters.command, 'plan') }}:
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Plan'
    inputs:
      targetPath: '${{ parameters.workingDirectory }}/tfplan'
      artifact: 'tfplan'
      publishLocation: 'pipeline'