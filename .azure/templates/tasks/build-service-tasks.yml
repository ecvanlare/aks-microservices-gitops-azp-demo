parameters:
  vmImage: 'ubuntu-latest'
  packageMaxParallel: 4
  packageRetryCount: 2
  packageTimeoutMinutes: 30
  services: []  # List of service names or full service configurations
  serviceName: ''  # Single service name (alternative to services array)
  semver: ''  # Semantic version for tagging

steps:
  # Include centralized service definitions
  - template: service-definitions.yml

  # ACR validation
  - task: AzureCLI@2
    displayName: 'Validate ACR Access'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "=== Validating ACR: $(ACR_NAME) in Resource Group: $(RESOURCE_GROUP) ==="
        
        # Validate resource group and ACR existence
        if ! az group show -n "$(RESOURCE_GROUP)" &>/dev/null; then
          echo "##vso[task.logissue type=error]Resource group $(RESOURCE_GROUP) not found"
          az group list --query "[].name" -o tsv
          exit 1
        fi
        
        if ! az acr show -n "$(ACR_NAME)" -g "$(RESOURCE_GROUP)" &>/dev/null; then
          echo "##vso[task.logissue type=error]ACR $(ACR_NAME) not found in resource group $(RESOURCE_GROUP)"
          exit 1
        fi
        
        # Test ACR login
        if ! az acr login --name "$(ACR_NAME)" &>/dev/null; then
          echo "##vso[task.logissue type=error]Failed to login to ACR $(ACR_NAME)"
          exit 1
        fi
        
        echo "âœ… ACR $(ACR_NAME) is accessible and ready for builds"

  # Handle single service case
  - ${{ if ne(parameters.serviceName, '') }}:
    - script: |
        # Get service config from variables set by service-definitions template
        SERVICE_UPPER=$(echo "${{ parameters.serviceName }}" | tr '[:lower:]' '[:upper:]')
        CONFIG_VAR="${SERVICE_UPPER}_CONFIG"
        CONFIG_VALUE="${!CONFIG_VAR}"
        
        # Extract dockerfile and context from JSON config
        DOCKERFILE=$(echo "$CONFIG_VALUE" | grep -o '"dockerfile":"[^"]*"' | cut -d'"' -f4)
        CONTEXT=$(echo "$CONFIG_VALUE" | grep -o '"context":"[^"]*"' | cut -d'"' -f4)
        
        # Set job-level variables for the template
        echo "##vso[task.setvariable variable=DOCKERFILE_PATH;isOutput=true]$DOCKERFILE"
        echo "##vso[task.setvariable variable=CONTEXT_PATH;isOutput=true]$CONTEXT"
      displayName: 'Extract Service Config'
      name: ExtractConfig

    - template: docker/acr-build-template.yml
      parameters:
        acrName: $(ACR_NAME)
        resourceGroup: $(RESOURCE_GROUP)
        serviceName: ${{ parameters.serviceName }}
        dockerfile: $(ExtractConfig.DOCKERFILE_PATH)
        context: $(ExtractConfig.CONTEXT_PATH)
        retryCount: ${{ parameters.packageRetryCount }}
        azureSubscription: $(AZURE_SUBSCRIPTION)
        tags: ${{ parameters.semver }}

  # Handle multiple services case
  - ${{ if ne(parameters.services, '') }}:
    - ${{ each service in parameters.services }}:
      - script: |
          # Get service config from variables set by service-definitions template
          SERVICE_UPPER=$(echo "${{ service.name }}" | tr '[:lower:]' '[:upper:]')
          CONFIG_VAR="${SERVICE_UPPER}_CONFIG"
          CONFIG_VALUE="${!CONFIG_VAR}"
          
          # Extract dockerfile and context from JSON config
          DOCKERFILE=$(echo "$CONFIG_VALUE" | grep -o '"dockerfile":"[^"]*"' | cut -d'"' -f4)
          CONTEXT=$(echo "$CONFIG_VALUE" | grep -o '"context":"[^"]*"' | cut -d'"' -f4)
          
          # Set job-level variables for the template
          echo "##vso[task.setvariable variable=DOCKERFILE_PATH;isOutput=true]$DOCKERFILE"
          echo "##vso[task.setvariable variable=CONTEXT_PATH;isOutput=true]$CONTEXT"
        displayName: 'Extract Config for ${{ service.name }}'
        name: ExtractConfig${{ service.name }}

      - template: docker/acr-build-template.yml
        parameters:
          acrName: $(ACR_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          serviceName: ${{ service.name }}
          dockerfile: $(ExtractConfig${{ service.name }}.DOCKERFILE_PATH)
          context: $(ExtractConfig${{ service.name }}.CONTEXT_PATH)
          retryCount: ${{ parameters.packageRetryCount }}
          azureSubscription: $(AZURE_SUBSCRIPTION)
          tags: ${{ parameters.semver }} 