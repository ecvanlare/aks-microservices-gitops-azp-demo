parameters:
  clusterName: ''  # Required: AKS cluster name
  resourceGroup: ''  # Required: Resource group name
  namespace: 'online-boutique'  # Optional: Kubernetes namespace
  chartPath: 'online-boutique-chart'  # Optional: Path to Helm chart
  releaseName: 'online-boutique'  # Optional: Helm release name
  valuesFile: 'values.yaml'  # Optional: Values file to use
  acrName: ''  # Required: ACR name for getting latest tags
  helmVersion: '3.12.0'  # Optional: Helm version to install
  helmTimeout: '10m'  # Optional: Helm deployment timeout
  helmMaxHistory: 5  # Optional: Maximum number of release history

variables:
  CHART_PATH: 'online-boutique-chart'
  VALUES_FILE: 'values.yaml'
  RELEASE_NAME: 'online-boutique'
  NAMESPACE: 'online-boutique'
  HELM_VERSION: '3.12.0'
  HELM_TIMEOUT: '10m'
  HELM_MAX_HISTORY: 5

steps:
- task: AzureCLI@2
  displayName: 'Validate AKS Access'
  inputs:
    azureSubscription: '$(AZURE_SUBSCRIPTION)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Check if AKS cluster exists and is accessible
      if ! az aks show -n ${{ parameters.clusterName }} -g ${{ parameters.resourceGroup }} &>/dev/null; then
        echo "##vso[task.logissue type=error]AKS cluster ${{ parameters.clusterName }} not found or not accessible"
        exit 1
      fi
      # Check if we have necessary permissions
      if ! az aks get-credentials -n ${{ parameters.clusterName }} -g ${{ parameters.resourceGroup }} --overwrite-existing &>/dev/null; then
        echo "##vso[task.logissue type=error]Insufficient permissions for AKS cluster ${{ parameters.clusterName }}"
        exit 1
      fi

- task: HelmInstaller@0
  displayName: 'Install Helm'
  inputs:
    helmVersion: $(HELM_VERSION)

- script: |
    # Validate Helm chart
    helm lint $(CHART_PATH)
    if [ $? -ne 0 ]; then
      echo "##vso[task.logissue type=error]Helm chart validation failed"
      exit 1
    fi
    
    # Check chart dependencies
    helm dependency build $(CHART_PATH)
    if [ $? -ne 0 ]; then
      echo "##vso[task.logissue type=error]Helm dependency build failed"
      exit 1
    fi
  displayName: 'Validate Helm Chart'

- task: AzureCLI@2
  displayName: 'Get AKS Credentials'
  inputs:
    azureSubscription: '$(AZURE_SUBSCRIPTION)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Get AKS credentials
      az aks get-credentials -n ${{ parameters.clusterName }} -g ${{ parameters.resourceGroup }} --overwrite-existing
      
      # Create namespace if it doesn't exist
      kubectl create namespace ${{ parameters.namespace }} --dry-run=client -o yaml | kubectl apply -f -

- task: HelmInstaller@0
  displayName: 'Install Helm for Deployment'
  inputs:
    helmVersion: $(HELM_VERSION)

- script: |
    # Build chart dependencies
    helm dependency build $(CHART_PATH)
    
    # Get latest image tags from ACR for each service
    echo "Getting latest image tags from ACR..."
    
    # Function to get latest tag for a service
    get_latest_tag() {
      local service_name=$1
      local latest_tag=$(az acr repository show-tags -n ${{ parameters.acrName }} --repository $service_name --orderby time_desc --top 1 --query '[0]' -o tsv 2>/dev/null)
      if [ -z "$latest_tag" ]; then
        echo "Warning: No tags found for $service_name, using default tag"
        echo "latest"
      else
        echo "$latest_tag"
      fi
    }
    
    # Get latest tags for all services
    AD_TAG=$(get_latest_tag "adservice")
    CART_TAG=$(get_latest_tag "cartservice")
    CHECKOUT_TAG=$(get_latest_tag "checkoutservice")
    CURRENCY_TAG=$(get_latest_tag "currencyservice")
    EMAIL_TAG=$(get_latest_tag "emailservice")
    FRONTEND_TAG=$(get_latest_tag "frontend")
    PAYMENT_TAG=$(get_latest_tag "paymentservice")
    PRODUCT_TAG=$(get_latest_tag "productcatalogservice")
    RECOMMENDATION_TAG=$(get_latest_tag "recommendationservice")
    SHIPPING_TAG=$(get_latest_tag "shippingservice")
    SHOPPING_ASSISTANT_TAG=$(get_latest_tag "shoppingassistantservice")
    
    echo "Latest tags:"
    echo "  adservice: $AD_TAG"
    echo "  cartservice: $CART_TAG"
    echo "  checkoutservice: $CHECKOUT_TAG"
    echo "  currencyservice: $CURRENCY_TAG"
    echo "  emailservice: $EMAIL_TAG"
    echo "  frontend: $FRONTEND_TAG"
    echo "  paymentservice: $PAYMENT_TAG"
    echo "  productcatalogservice: $PRODUCT_TAG"
    echo "  recommendationservice: $RECOMMENDATION_TAG"
    echo "  shippingservice: $SHIPPING_TAG"
    echo "  shoppingassistantservice: $SHOPPING_ASSISTANT_TAG"
    
    # Prepare values override with latest image tags
    cat > values-override.yaml << EOF
    global:
      image:
        registry: ${{ parameters.acrName }}.azurecr.io
      imagePullPolicy: Always
    adservice:
      image:
        tag: $AD_TAG
    cartservice:
      image:
        tag: $CART_TAG
    checkoutservice:
      image:
        tag: $CHECKOUT_TAG
    currencyservice:
      image:
        tag: $CURRENCY_TAG
    emailservice:
      image:
        tag: $EMAIL_TAG
    frontend:
      image:
        tag: $FRONTEND_TAG
    paymentservice:
      image:
        tag: $PAYMENT_TAG
    productcatalogservice:
      image:
        tag: $PRODUCT_TAG
    recommendationservice:
      image:
        tag: $RECOMMENDATION_TAG
    shippingservice:
      image:
        tag: $SHIPPING_TAG
    shoppingassistantservice:
      image:
        tag: $SHOPPING_ASSISTANT_TAG
    EOF
  displayName: 'Get Latest Image Tags and Prepare Values Override'

- script: |
    # Deploy using Helm
    helm upgrade --install $(RELEASE_NAME) $(CHART_PATH) \
      --namespace $(NAMESPACE) \
      --values $(CHART_PATH)/$(VALUES_FILE) \
      --values values-override.yaml \
      --timeout $(HELM_TIMEOUT) \
      --wait \
      --atomic \
      --cleanup-on-fail \
      --max-history $(HELM_MAX_HISTORY)
  displayName: 'Deploy with Helm'
  env:
    HELM_EXPERIMENTAL_OCI: 1

- script: |
    # Verify deployment
    kubectl get pods -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME)
    kubectl get services -n $(NAMESPACE) -l app.kubernetes.io/instance=$(RELEASE_NAME)
  displayName: 'Verify Deployment'

- script: |
    echo "Deployment completed successfully"
    echo "Release: $(RELEASE_NAME)"
    echo "Namespace: $(NAMESPACE)"
    echo "Using latest images from ACR: ${{ parameters.acrName }}.azurecr.io"
  displayName: 'Deployment Summary'