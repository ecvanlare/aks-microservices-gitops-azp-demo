trigger: none

pr: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: "online-boutique.common"
  - group: "online-boutique.kubernetes"
  - group: "online-boutique.gitops"

stages:
  - stage: Deploy
    displayName: "Deploy GitOps Infrastructure"
    jobs:
      - job: GitOpsBootstrap
        displayName: "Bootstrap GitOps with ArgoCD"
        steps:
          - checkout: self
            displayName: "Checkout repository"

          - template: templates/azure-auth.yml
            parameters:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              resourceGroup: $(RESOURCE_GROUP)
              aksClusterName: $(AKS_CLUSTER_NAME)
              namespace: "argocd"

          - task: AzureCLI@2
            displayName: "Setup SSH Authentication"
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                set -e
                echo "=== Step 4: Setup SSH Authentication ==="

                # Setup SSH key for private repository access
                echo "Setting up SSH key for ArgoCD repo access..."
                mkdir -p ~/.ssh

                # Write SSH key with proper formatting
                echo "$(ARGOCD_GIT_PRIVATE_KEY)" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa

                # Verify SSH key was created successfully
                if [ ! -f ~/.ssh/id_rsa ]; then
                  echo "ERROR: Failed to create SSH key file"
                  exit 1
                fi

                # Add GitHub to known_hosts to avoid host key verification issues
                echo "Adding GitHub to known_hosts..."
                ssh-keyscan github.com >> ~/.ssh/known_hosts

                # Start SSH agent and add key
                echo "Starting SSH agent..."
                eval $(ssh-agent -s)
                ssh-add ~/.ssh/id_rsa

                # Test SSH connection to GitHub
                echo "Testing SSH connection to GitHub..."
                ssh -T git@github.com || true

                echo "SSH authentication setup completed"
            env:
              ARGOCD_GIT_PRIVATE_KEY: $(ARGOCD_GIT_PRIVATE_KEY)

          - task: AzureCLI@2
            displayName: "Register Repositories"
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                set -e
                echo "=== Step 5: Register Repositories ==="

                # Setup SSH key for repository registration
                echo "Setting up SSH key for repository registration..."
                mkdir -p ~/.ssh
                echo "$(ARGOCD_GIT_PRIVATE_KEY)" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa
                ssh-keyscan github.com >> ~/.ssh/known_hosts
                eval $(ssh-agent -s)
                ssh-add ~/.ssh/id_rsa

                # Clean up any existing port-forward on 8080
                echo "Cleaning up any existing port-forward processes on port 8080..."
                lsof -ti:8080 | xargs --no-run-if-empty kill -9 || true

                # Start port-forward for ArgoCD access
                echo "Starting port-forward for ArgoCD access..."
                kubectl port-forward -n argocd svc/argocd-server 8080:443 &
                PF_PID=$!
                echo $PF_PID > /tmp/port-forward.pid
                sleep 10

                # Login to ArgoCD CLI using port-forward
                echo "Logging into ArgoCD CLI via port-forward..."
                ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure

                # Add external repositories for infrastructure components (public repos only)
                echo "Adding external repositories for infrastructure components..."
                argocd repo add https://charts.jetstack.io --type helm --name jetstack
                argocd repo add https://github.com/kubernetes/ingress-nginx.git --type git
                argocd repo add https://github.com/kubernetes-sigs/external-dns.git --type git
                argocd repo add https://prometheus-community.github.io/helm-charts --type helm --name prometheus-community

                # Register private repository with SSH key
                echo "Registering private repository with SSH key..."
                argocd repo add git@github.com:ecvanlare/aks-microservices-gitops-demo.git \
                  --name gitops-private \
                  --ssh-private-key-path ~/.ssh/id_rsa \
                  --insecure-ignore-host-key

                # Create SSH secret in ArgoCD namespace for internal Git operations
                echo "Creating SSH secret in ArgoCD namespace..."
                kubectl create secret generic argocd-repo-credentials \
                  --from-literal=sshPrivateKey="$(cat ~/.ssh/id_rsa)" \
                  -n argocd \
                  --dry-run=client -o yaml | kubectl apply -f -

                # Cleanup port-forward
                if [ -f /tmp/port-forward.pid ]; then
                  kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
                  rm -f /tmp/port-forward.pid
                fi

                echo "Repository registration completed"
            env:
              ARGOCD_GIT_PRIVATE_KEY: $(ARGOCD_GIT_PRIVATE_KEY)

          - template: templates/gitops-sync.yml
            parameters:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "root-app"
              appYamlPath: "cluster/root/root-app.yaml"
              syncMessage: "Bootstrap GitOps Infrastructure"

          - task: AzureCLI@2
            displayName: "Monitor & Verify Deployment"
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                set -e
                echo "=== Step 7: Monitor & Verify Deployment ==="

                # Clean up any existing port-forward on 8080
                echo "Cleaning up any existing port-forward processes on port 8080..."
                lsof -ti:8080 | xargs --no-run-if-empty kill -9 || true

                # Start port-forward for ArgoCD access
                echo "Starting port-forward for ArgoCD access..."
                kubectl port-forward -n argocd svc/argocd-server 8080:443 &
                PF_PID=$!
                echo $PF_PID > /tmp/port-forward.pid
                sleep 10

                # Login to ArgoCD CLI using port-forward
                echo "Logging into ArgoCD CLI via port-forward..."
                ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure

                # Strictly wait for all apps to be Synced and Healthy
                for app in root-app apps-of-apps infra-of-infra; do
                  echo "Waiting for $app to be Synced and Healthy..."
                  argocd app wait $app --health --operation --timeout 600
                done
                echo "All ArgoCD apps are Synced and Healthy!"

                # Monitor application status
                echo "Monitoring application status..."
                echo "=== Application List ==="
                argocd app list
                echo ""

                # Check if root app exists
                if argocd app get root-app > /dev/null 2>&1; then
                  echo "=== Root App Status ==="
                  argocd app get root-app
                else
                  echo "=== Root App Status ==="
                  echo "Root app not found - private repository may not be registered"
                fi
                echo ""
                echo "=== Infrastructure Components Status ==="
                kubectl get pods -n cert-manager 2>/dev/null || echo "cert-manager namespace not found"
                kubectl get pods -n ingress-nginx 2>/dev/null || echo "ingress-nginx namespace not found"
                kubectl get pods -n external-dns 2>/dev/null || echo "external-dns namespace not found"

                # Log completion details
                echo ""
                echo "=== GitOps Bootstrap Completed Successfully! ==="
                echo "Repository: $(GITOPS_REPO_URL)"
                echo "Branch: $(GITOPS_BRANCH)"
                echo "Azure Subscription: $(AZURE_SUBSCRIPTION)"
                echo "Resource Group: $(RESOURCE_GROUP)"
                echo "AKS Cluster: $(AKS_CLUSTER_NAME)"
                echo ""
                echo "ArgoCD is now fully configured and infrastructure is deployed."
                echo "Access ArgoCD UI via port-forward: https://127.0.0.1:8080"
                echo "Username: admin"
                echo "Password: $ADMIN_PASSWORD"

                # Cleanup port-forward
                if [ -f /tmp/port-forward.pid ]; then
                  kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
                  rm -f /tmp/port-forward.pid
                fi

                echo "=== Pipeline completed successfully! ==="
