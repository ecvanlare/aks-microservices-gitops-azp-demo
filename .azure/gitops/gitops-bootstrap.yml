trigger: none

pr: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: "online-boutique.common"
  - group: "online-boutique.kubernetes"
  - group: "online-boutique.gitops"

stages:
  - stage: Deploy
    displayName: "Deploy GitOps Infrastructure"
    jobs:
      - job: GitOpsBootstrap
        displayName: "Bootstrap GitOps with ArgoCD"
        steps:
          - checkout: self
            displayName: "Checkout repository"

          - template: templates/azure-auth.yml
            parameters:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              resourceGroup: $(RESOURCE_GROUP)
              aksClusterName: $(AKS_CLUSTER_NAME)
              namespace: "argocd"

          - task: AzureCLI@2
            displayName: "Setup ArgoCD Access"
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                set -e
                echo "=== Setting up ArgoCD Access ==="

                # Setup SSH for private repo access
                mkdir -p ~/.ssh
                echo "$(ARGOCD_GIT_PRIVATE_KEY)" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa
                ssh-keyscan github.com >> ~/.ssh/known_hosts
                eval $(ssh-agent -s)
                ssh-add ~/.ssh/id_rsa

                # Start port-forward for ArgoCD access
                kubectl port-forward -n argocd svc/argocd-server 8080:443 > /dev/null 2>&1 &
                echo $! > /tmp/port-forward.pid
                sleep 10

                # Login to ArgoCD CLI
                ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure

                # Register repositories
                echo "Registering repositories..."
                argocd repo add https://charts.jetstack.io --type helm --name jetstack
                argocd repo add https://github.com/kubernetes/ingress-nginx.git --type git
                argocd repo add https://github.com/kubernetes-sigs/external-dns.git --type git
                argocd repo add https://prometheus-community.github.io/helm-charts --type helm --name prometheus-community
                argocd repo add git@github.com:ecvanlare/aks-microservices-gitops-azp-demo.git --name gitops-private --ssh-private-key-path ~/.ssh/id_rsa --insecure-ignore-host-key

                # Cleanup port-forward
                kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
                rm -f /tmp/port-forward.pid

                echo "ArgoCD access setup completed"
            env:
              ARGOCD_GIT_PRIVATE_KEY: $(ARGOCD_GIT_PRIVATE_KEY)

          # Deploy Infrastructure First
          - template: templates/gitops-sync.yml
            parameters:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "infra-of-infra"
              appYamlPath: "cluster/root/infra-of-infra.yaml"
              syncMessage: "Deploy Infrastructure"

          # Wait for Infrastructure
          - task: AzureCLI@2
            displayName: "Wait for Infrastructure"
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                set -e
                echo "=== Waiting for Infrastructure ==="

                # Setup ArgoCD access
                kubectl port-forward -n argocd svc/argocd-server 8080:443 > /dev/null 2>&1 &
                echo $! > /tmp/port-forward.pid
                sleep 10
                ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure

                # Wait for infrastructure components
                echo "Waiting for infrastructure components..."
                for app in cert-manager ingress-nginx external-dns kube-prometheus-stack; do
                  echo "Waiting for $app..."
                  argocd app wait $app --health --timeout 300 || echo "$app not found, continuing..."
                done

                # Cleanup
                kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
                rm -f /tmp/port-forward.pid

          # Deploy Applications
          - template: templates/gitops-sync.yml
            parameters:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "apps-of-apps"
              appYamlPath: "cluster/root/apps-of-apps.yaml"
              syncMessage: "Deploy Applications"

          # Final Verification
          - task: AzureCLI@2
            displayName: "Verify Deployment"
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                set -e
                echo "=== Verifying Deployment ==="

                # Setup ArgoCD access
                kubectl port-forward -n argocd svc/argocd-server 8080:443 > /dev/null 2>&1 &
                echo $! > /tmp/port-forward.pid
                sleep 10
                ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure

                # Check all apps
                echo "=== Application Status ==="
                argocd app list

                # Check infrastructure
                echo "=== Infrastructure Status ==="
                kubectl get pods -n cert-manager 2>/dev/null || echo "cert-manager not found"
                kubectl get pods -n ingress-nginx 2>/dev/null || echo "ingress-nginx not found"
                kubectl get pods -n external-dns 2>/dev/null || echo "external-dns not found"
                kubectl get pods -n monitoring 2>/dev/null || echo "monitoring not found"

                # Check applications
                echo "=== Application Status ==="
                kubectl get pods -n online-boutique 2>/dev/null || echo "online-boutique not found"

                echo "=== GitOps Bootstrap Completed! ==="
                echo "ArgoCD UI: https://127.0.0.1:8080"
                echo "Username: admin"
                echo "Password: $ADMIN_PASSWORD"

                # Cleanup
                kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
                rm -f /tmp/port-forward.pid
