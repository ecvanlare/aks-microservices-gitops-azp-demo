trigger:
  branches:
    include:
      - argocd
  paths:
    include:
      - gitops/**

pool:
  vmImage: $(VM_IMAGE)

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.kubernetes'
  - group: 'online-boutique.gitops'
  - name: VM_IMAGE
    value: 'ubuntu-latest'

stages:
- stage: Setup
  displayName: 'Stage 1: ArgoCD Setup and Infrastructure Deployment'
  jobs:
  - job: InstallArgoCD
    displayName: 'Install ArgoCD and Deploy Infrastructure'
    steps:
    - checkout: self
      displayName: 'Checkout repository'

    - template: templates/azure-auth.yml
      parameters:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        resourceGroup: $(RESOURCE_GROUP)
        aksClusterName: $(AKS_CLUSTER_NAME)
        namespace: 'argocd'

    - script: |
        echo "Port-forwarding ArgoCD server..."
        kubectl port-forward -n argocd svc/argocd-server 8080:443 &
        PF_PID=$!
        echo $PF_PID > /tmp/port-forward.pid
        sleep 10
      displayName: 'Setup port-forward for ArgoCD'

    - script: |
        echo "Logging into ArgoCD CLI..."
        ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        argocd login localhost:8080 --username admin --password $ADMIN_PASSWORD --insecure
      displayName: 'Login to ArgoCD CLI'

    - script: |
        echo "Adding private repository using Azure Pipelines service connection..."
        argocd repo add $(GITOPS_REPO_URL) --type git
      displayName: 'Add private repository'

    - script: |
        echo "Adding external repositories for infrastructure components..."
        argocd repo add https://charts.jetstack.io --type helm --name jetstack
        argocd repo add https://github.com/kubernetes/ingress-nginx.git --type git
        argocd repo add https://github.com/kubernetes-sigs/external-dns.git --type git
      displayName: 'Add external repositories'

    - script: |
        echo "Applying root app to deploy infrastructure..."
        kubectl apply -f gitops/root/root-app.yaml
      displayName: 'Deploy root app'

    - script: |
        echo "Waiting for root app to sync..."
        sleep 30
        argocd app sync root-app
      displayName: 'Sync root app'

    - script: |
        echo "Monitoring application status..."
        echo "=== Application List ==="
        argocd app list
        echo ""
        echo "=== Root App Status ==="
        argocd app get root-app
        echo ""
        echo "=== Infrastructure Components Status ==="
        kubectl get pods -n cert-manager
        kubectl get pods -n ingress-nginx
        kubectl get pods -n external-dns
      displayName: 'Monitor application status'

    - script: |
        echo "GitOps bootstrap completed successfully!"
        echo "Repository: $(GITOPS_REPO_URL)"
        echo "Branch: $(GITOPS_BRANCH)"
        echo "Azure Subscription: $(AZURE_SUBSCRIPTION)"
        echo "Resource Group: $(RESOURCE_GROUP)"
        echo "AKS Cluster: $(AKS_CLUSTER_NAME)"
        echo ""
        echo "ArgoCD is now fully configured and infrastructure is deployed."
        echo "Access ArgoCD UI at: https://localhost:8080 (when port-forwarding)"
        echo "Username: admin"
        echo "Password: $(ADMIN_PASSWORD)"
      displayName: 'Log completion details'

    - script: |
        # Cleanup port-forward
        if [ -f /tmp/port-forward.pid ]; then
          kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
          rm -f /tmp/port-forward.pid
        fi
      displayName: 'Cleanup port-forward'
      condition: always() 