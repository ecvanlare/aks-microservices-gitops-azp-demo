trigger:
  branches:
    include:
      - argocd
  paths:
    include:
      - gitops/**

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.kubernetes'
  - group: 'online-boutique.gitops'

stages:
- stage: Deploy
  displayName: 'Deploy GitOps Infrastructure'
  jobs:
  - job: GitOpsBootstrap
    displayName: 'Bootstrap GitOps with ArgoCD'
    steps:
    - checkout: self
      displayName: 'Checkout repository'

    - task: AzureCLI@2
      displayName: '1. Azure Authentication & Setup'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "=== Step 1: Azure Authentication & Setup ==="
          echo "Repository: $(GITOPS_REPO_URL)"
          echo "Branch: $(GITOPS_BRANCH)"
          echo "Azure Subscription: $(AZURE_SUBSCRIPTION)"
          echo "Resource Group: $(RESOURCE_GROUP)"
          echo "AKS Cluster: $(AKS_CLUSTER_NAME)"
          echo ""
          
          # Azure Authentication
          echo "Logging into Azure..."
          az account show
          
          # Install kubelogin for AAD-enabled clusters
          echo "Installing kubelogin..."
          if ! command -v kubelogin &> /dev/null; then
            curl -LO "https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip"
            unzip kubelogin-linux-amd64.zip
            sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
            chmod +x /usr/local/bin/kubelogin
            rm -rf kubelogin-linux-amd64.zip bin/
          else
            echo "kubelogin already installed"
          fi
          
          # Get AKS credentials
          echo "Getting AKS credentials..."
          az aks get-credentials -n "$(AKS_CLUSTER_NAME)" -g "$(RESOURCE_GROUP)" --overwrite-existing
          
          # Configure kubelogin for Azure CLI authentication
          echo "Configuring kubelogin..."
          kubelogin convert-kubeconfig -l azurecli
          
          echo "Azure authentication and kubectl setup completed"

    - task: AzureCLI@2
      displayName: '2. Install ArgoCD'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "=== Step 2: Install ArgoCD ==="
          
          # Create namespace
          echo "Creating argocd namespace..."
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          
          # Install ArgoCD
          echo "Installing ArgoCD..."
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          
          # Wait for ArgoCD to be ready
          echo "Waiting for ArgoCD to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
          
          # Additional wait for pods to be fully ready
          echo "Waiting for ArgoCD pods to be fully ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
          
          echo "ArgoCD installation completed"

    - task: AzureCLI@2
      displayName: '3. Setup ArgoCD CLI & Authentication'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "=== Step 3: Setup ArgoCD CLI & Authentication ==="
          
          # Get ArgoCD admin password
          echo "Getting ArgoCD admin password..."
          ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "##vso[task.setvariable variable=ADMIN_PASSWORD]$ADMIN_PASSWORD"
          echo "Admin password retrieved successfully"
          
          # Install ArgoCD CLI
          echo "Installing ArgoCD CLI..."
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          
          # Start port-forward for ArgoCD access
          echo "Starting port-forward for ArgoCD access..."
          kubectl port-forward -n argocd svc/argocd-server 8080:443 &
          PF_PID=$!
          echo $PF_PID > /tmp/port-forward.pid
          sleep 10
          
          # Wait for ArgoCD server to be accessible
          echo "Waiting for ArgoCD server to be accessible..."
          for i in {1..30}; do
            if curl -s -k https://127.0.0.1:8080 > /dev/null 2>&1; then
              echo "ArgoCD server is accessible"
              break
            fi
            echo "Waiting for ArgoCD server... (attempt $i/30)"
            sleep 5
          done
          
          # Login to ArgoCD CLI using port-forward with retry
          echo "Logging into ArgoCD CLI via port-forward..."
          for i in {1..5}; do
            if argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure; then
              echo "ArgoCD CLI login successful"
              break
            else
              echo "Login attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          # Cleanup port-forward
          if [ -f /tmp/port-forward.pid ]; then
            kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
            rm -f /tmp/port-forward.pid
          fi
          
          echo "ArgoCD CLI setup and authentication completed"

    - task: AzureCLI@2
      displayName: '4. Register Repositories'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "=== Step 4: Register Repositories ==="
          
          # Start port-forward for ArgoCD access
          echo "Starting port-forward for ArgoCD access..."
          kubectl port-forward -n argocd svc/argocd-server 8080:443 &
          PF_PID=$!
          echo $PF_PID > /tmp/port-forward.pid
          sleep 10
          
          # Login to ArgoCD CLI using port-forward
          echo "Logging into ArgoCD CLI via port-forward..."
          ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure
          
          # Add private repository using HTTPS with GitHub token
          echo "Adding private repository using HTTPS..."
          # Note: For private repos, you may need to use SSH keys or GitHub tokens
          # This assumes the repo is accessible via HTTPS with proper authentication
          argocd repo add $(GITOPS_REPO_URL) --type git
          
          # Add external repositories for infrastructure components
          echo "Adding external repositories..."
          argocd repo add https://charts.jetstack.io --type helm --name jetstack
          argocd repo add https://github.com/kubernetes/ingress-nginx.git --type git
          argocd repo add https://github.com/kubernetes-sigs/external-dns.git --type git
          
          # Cleanup port-forward
          if [ -f /tmp/port-forward.pid ]; then
            kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
            rm -f /tmp/port-forward.pid
          fi
          
          echo "Repository registration completed"

    - task: AzureCLI@2
      displayName: '5. Deploy Infrastructure'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "=== Step 5: Deploy Infrastructure ==="
          
          # Start port-forward for ArgoCD access
          echo "Starting port-forward for ArgoCD access..."
          kubectl port-forward -n argocd svc/argocd-server 8080:443 &
          PF_PID=$!
          echo $PF_PID > /tmp/port-forward.pid
          sleep 10
          
          # Login to ArgoCD CLI using port-forward
          echo "Logging into ArgoCD CLI via port-forward..."
          ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure
          
          # Apply root app to deploy infrastructure
          echo "Applying root app to deploy infrastructure..."
          kubectl apply -f gitops/root/root-app.yaml
          
          # Wait for root app to sync
          echo "Waiting for root app to sync..."
          sleep 30
          argocd app sync root-app
          
          # Cleanup port-forward
          if [ -f /tmp/port-forward.pid ]; then
            kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
            rm -f /tmp/port-forward.pid
          fi
          
          echo "Infrastructure deployment completed"

    - task: AzureCLI@2
      displayName: '6. Monitor & Verify Deployment'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "=== Step 6: Monitor & Verify Deployment ==="
          
          # Start port-forward for ArgoCD access
          echo "Starting port-forward for ArgoCD access..."
          kubectl port-forward -n argocd svc/argocd-server 8080:443 &
          PF_PID=$!
          echo $PF_PID > /tmp/port-forward.pid
          sleep 10
          
          # Login to ArgoCD CLI using port-forward
          echo "Logging into ArgoCD CLI via port-forward..."
          ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure
          
          # Monitor application status
          echo "Monitoring application status..."
          echo "=== Application List ==="
          argocd app list
          echo ""
          echo "=== Root App Status ==="
          argocd app get root-app
          echo ""
          echo "=== Infrastructure Components Status ==="
          kubectl get pods -n cert-manager
          kubectl get pods -n ingress-nginx
          kubectl get pods -n external-dns
          
          # Log completion details
          echo ""
          echo "=== GitOps Bootstrap Completed Successfully! ==="
          echo "Repository: $(GITOPS_REPO_URL)"
          echo "Branch: $(GITOPS_BRANCH)"
          echo "Azure Subscription: $(AZURE_SUBSCRIPTION)"
          echo "Resource Group: $(RESOURCE_GROUP)"
          echo "AKS Cluster: $(AKS_CLUSTER_NAME)"
          echo ""
          echo "ArgoCD is now fully configured and infrastructure is deployed."
          echo "Access ArgoCD UI via port-forward: https://127.0.0.1:8080"
          echo "Username: admin"
          echo "Password: $ADMIN_PASSWORD"
          
          # Cleanup port-forward
          if [ -f /tmp/port-forward.pid ]; then
            kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
            rm -f /tmp/port-forward.pid
          fi
          
          echo "=== Pipeline completed successfully! ===" 