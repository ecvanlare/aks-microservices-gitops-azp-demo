parameters:
  - name: azureSubscription
    type: string
    default: $(AZURE_SUBSCRIPTION)
  - name: appName
    type: string
  - name: appYamlPath
    type: string
  - name: syncMessage
    type: string

steps:
  - task: AzureCLI@2
    displayName: "GitOps Sync Operation"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        set -e
        echo "=== ${{ parameters.syncMessage }} ==="

        # Setup SSH for private repo access
        mkdir -p ~/.ssh
        echo "$(ARGOCD_GIT_PRIVATE_KEY)" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_rsa

        # Start port-forward for ArgoCD access
        kubectl port-forward -n argocd svc/argocd-server 8080:443 &
        PF_PID=$!
        echo $PF_PID > /tmp/port-forward.pid
        sleep 10

        # Login to ArgoCD CLI
        ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        argocd login 127.0.0.1:8080 --username admin --password $ADMIN_PASSWORD --insecure

        # Sync the specified app
        echo "Syncing ${{ parameters.appName }} App of Apps..."
        if argocd app get ${{ parameters.appName }} > /dev/null 2>&1; then
          argocd app sync ${{ parameters.appName }}
          argocd app wait ${{ parameters.appName }} --timeout 600
        else
          echo "Creating ${{ parameters.appName }} App of Apps..."
          kubectl apply -f ${{ parameters.appYamlPath }}
          sleep 30
          argocd app sync ${{ parameters.appName }}
          argocd app wait ${{ parameters.appName }} --timeout 600
        fi

        # Cleanup
        if [ -f /tmp/port-forward.pid ]; then
          kill $(cat /tmp/port-forward.pid) 2>/dev/null || true
          rm -f /tmp/port-forward.pid
        fi

        echo "=== ${{ parameters.appName }} sync completed successfully! ==="
    env:
      ARGOCD_GIT_PRIVATE_KEY: $(ARGOCD_GIT_PRIVATE_KEY)
