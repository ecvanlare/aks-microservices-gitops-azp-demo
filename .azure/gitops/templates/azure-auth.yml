parameters:
  - name: azureSubscription
    type: string
    default: $(AZURE_SUBSCRIPTION)
  - name: resourceGroup
    type: string
    default: $(RESOURCE_GROUP)
  - name: aksClusterName
    type: string
    default: $(AKS_CLUSTER_NAME)
  - name: namespace
    type: string
    default: 'argocd'

steps:
- task: AzureCLI@2
  displayName: 'Login to Azure and Configure kubectl'
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -e
      
      echo "Logging into Azure..."
      az account show
      
      # Debug: Show parameter values
      echo "Debug: Azure Subscription = ${{ parameters.azureSubscription }}"
      echo "Debug: Resource Group = ${{ parameters.resourceGroup }}"
      echo "Debug: AKS Cluster Name = ${{ parameters.aksClusterName }}"
      echo "Debug: Namespace = ${{ parameters.namespace }}"
      
      # Install kubelogin for AAD-enabled clusters
      echo "Installing kubelogin..."
      if ! command -v kubelogin &> /dev/null; then
        curl -LO "https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip"
        unzip kubelogin-linux-amd64.zip
        sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
        chmod +x /usr/local/bin/kubelogin
        rm -rf kubelogin-linux-amd64.zip bin/
      else
        echo "kubelogin already installed"
      fi
      
      # Get AKS credentials
      echo "Getting AKS credentials..."
      echo "Cluster: ${{ parameters.aksClusterName }}"
      echo "Resource Group: ${{ parameters.resourceGroup }}"
      az aks get-credentials -n "${{ parameters.aksClusterName }}" -g "${{ parameters.resourceGroup }}" --overwrite-existing
      
      # Configure kubelogin for Azure CLI authentication
      echo "Configuring kubelogin for Azure CLI authentication..."
      kubelogin convert-kubeconfig -l azurecli
      
      # Create namespace if it doesn't exist
      echo "Creating namespace: ${{ parameters.namespace }}"
      kubectl create namespace ${{ parameters.namespace }} --dry-run=client -o yaml | kubectl apply -f -
      
      echo "Azure authentication and kubectl configuration completed" 