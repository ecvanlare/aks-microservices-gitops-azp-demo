trigger:
  branches:
    include:
      - "main"
      - "argocd"
  paths:
    include:
      - "gitops/**"
      - "helm-charts/**"

parameters:
  - name: forceSync
    displayName: 'Force Sync All Applications'
    type: boolean
    default: false

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.kubernetes'
  - name: VM_IMAGE
    value: 'ubuntu-latest'
  - name: ARGOCD_NAMESPACE
    value: 'argocd'
  - name: ROOT_APP_NAME
    value: 'root-app'

pool:
  vmImage: $(VM_IMAGE)

stages:
  - stage: SetupArgoCD
    displayName: 'Setup ArgoCD CLI'
    jobs:
    - job: Setup
      steps:
      - checkout: self
        
      - task: AzureCLI@2
        displayName: 'Azure CLI Login'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_NAME) --overwrite
            kubectl config current-context
            
      - script: |
          echo "Installing ArgoCD CLI..."
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          argocd version
        displayName: 'Install ArgoCD CLI'
        
      - script: |
          echo "Setting up ArgoCD connection..."
          
          # Method 1: Try port-forwarding first
          echo "Attempting port-forward connection..."
          kubectl port-forward svc/argocd-server -n $(ARGOCD_NAMESPACE) 8080:443 &
          PF_PID=$!
          sleep 10
          
          # Check if port-forward is working
          if curl -k https://localhost:8080 >/dev/null 2>&1; then
            echo "✓ Port-forward connection successful"
            echo "PF_PID=$PF_PID" >> $GITHUB_ENV
          else
            echo "✗ Port-forward failed, trying direct service connection..."
            kill $PF_PID 2>/dev/null || true
            
            # Method 2: Try direct service connection
            if kubectl get svc argocd-server -n $(ARGOCD_NAMESPACE) >/dev/null 2>&1; then
              echo "✓ ArgoCD service found, using direct connection"
              export ARGOCD_SERVER="argocd-server.$(ARGOCD_NAMESPACE).svc.cluster.local"
            else
              echo "✗ ArgoCD service not found"
              exit 1
            fi
          fi
        displayName: 'Setup ArgoCD Connection'

  - stage: AuthenticateArgoCD
    displayName: 'Authenticate ArgoCD'
    dependsOn: SetupArgoCD
    condition: succeeded()
    jobs:
    - job: Auth
      steps:
      - checkout: self
        
      - task: AzureCLI@2
        displayName: 'Azure CLI Login'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_NAME) --overwrite
            
      - script: |
          echo "Authenticating with ArgoCD..."
          
          # Get ArgoCD admin password
          ARGOCD_PASSWORD=$(kubectl -n $(ARGOCD_NAMESPACE) get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          
          if [ -z "$ARGOCD_PASSWORD" ]; then
            echo "✗ Could not get ArgoCD admin password"
            exit 1
          fi
          
          echo "✓ Got ArgoCD admin password"
          
          # Login to ArgoCD
          if [ ! -z "$PF_PID" ]; then
            # Use port-forward connection
            argocd login localhost:8080 --username admin --password "$ARGOCD_PASSWORD" --insecure
          else
            # Use direct service connection
            argocd login $ARGOCD_SERVER --username admin --password "$ARGOCD_PASSWORD" --insecure
          fi
          
          echo "✓ Successfully authenticated with ArgoCD"
        displayName: 'Login to ArgoCD'

  - stage: SyncGitOps
    displayName: 'Sync GitOps Applications'
    dependsOn: AuthenticateArgoCD
    condition: succeeded()
    jobs:
    - job: Sync
      steps:
      - checkout: self
        
      - task: AzureCLI@2
        displayName: 'Azure CLI Login'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_NAME) --overwrite
            
      - script: |
          echo "Setting up ArgoCD connection for sync..."
          
          # Get ArgoCD admin password
          ARGOCD_PASSWORD=$(kubectl -n $(ARGOCD_NAMESPACE) get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          
          # Setup port-forward if needed
          kubectl port-forward svc/argocd-server -n $(ARGOCD_NAMESPACE) 8080:443 &
          PF_PID=$!
          sleep 10
          
          # Login
          argocd login localhost:8080 --username admin --password "$ARGOCD_PASSWORD" --insecure
          
          echo "Checking ArgoCD applications..."
          argocd app list
          
          echo "Triggering sync for root app..."
          argocd app sync $(ROOT_APP_NAME) --prune --self-heal
          
          echo "Waiting for sync to complete..."
          argocd app wait $(ROOT_APP_NAME) --sync --timeout 300
          
          echo "✓ Root app synced successfully"
          
          # Cleanup port-forward
          kill $PF_PID 2>/dev/null || true
        displayName: 'Sync Root Application'
        
      - script: |
          echo "Setting up ArgoCD connection for status check..."
          
          # Get ArgoCD admin password
          ARGOCD_PASSWORD=$(kubectl -n $(ARGOCD_NAMESPACE) get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          
          # Setup port-forward
          kubectl port-forward svc/argocd-server -n $(ARGOCD_NAMESPACE) 8080:443 &
          PF_PID=$!
          sleep 10
          
          # Login
          argocd login localhost:8080 --username admin --password "$ARGOCD_PASSWORD" --insecure
          
          echo "Checking all applications status..."
          argocd app list
          
          echo "Checking for any failed syncs..."
          FAILED_APPS=$(argocd app list --output json | jq -r '.[] | select(.status.sync.status == "OutOfSync") | .metadata.name')
          if [ ! -z "$FAILED_APPS" ]; then
            echo "⚠️  Found applications out of sync:"
            echo "$FAILED_APPS"
            if [ "${{ parameters.forceSync }}" == "true" ]; then
              echo "Force syncing all applications..."
              argocd app list --output name | xargs -I {} argocd app sync {} --prune --self-heal
            fi
          else
            echo "✓ All applications are in sync"
          fi
          
          # Cleanup port-forward
          kill $PF_PID 2>/dev/null || true
        displayName: 'Check Sync Status'

  - stage: VerifyDeployment
    displayName: 'Verify Deployment'
    dependsOn: SyncGitOps
    condition: succeeded()
    jobs:
    - job: Verify
      steps:
      - checkout: self
        
      - task: AzureCLI@2
        displayName: 'Azure CLI Login'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_NAME) --overwrite
            
      - script: |
          echo "Verifying infrastructure components..."
          
          # Check ArgoCD
          echo "Checking ArgoCD..."
          kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server
          
          # Check cert-manager
          echo "Checking cert-manager..."
          kubectl get pods -n cert-manager -l app.kubernetes.io/name=cert-manager
          
          # Check ingress-nginx
          echo "Checking ingress-nginx..."
          kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx
          
          # Check external-dns
          echo "Checking external-dns..."
          kubectl get pods -n external-dns -l app.kubernetes.io/name=external-dns
          
          echo "✓ All infrastructure components verified"
        displayName: 'Verify Infrastructure Components' 