trigger:
  branches:
    include:
      - "main"
      - "argocd"
  paths:
    include:
      - "gitops/**"
      - "helm-charts/**"

parameters:
  - name: forceSync
    displayName: 'Force Sync All Applications'
    type: boolean
    default: false
  - name: syncOptions
    displayName: 'Sync Options'
    type: string
    default: '--prune --self-heal'
    allowedValues:
      - '--prune --self-heal'
      - '--prune'
      - '--self-heal'
      - ''

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.kubernetes'
  - name: VM_IMAGE
    value: 'ubuntu-latest'
  - name: GITOPS_REPO_URL
    value: 'https://github.com/ecvanlare/online-boutique-private.git'
  - name: GITOPS_BRANCH
    value: 'argocd'
  - name: ARGOCD_NAMESPACE
    value: 'argocd'
  - name: ROOT_APP_NAME
    value: 'root-app'

pool:
  vmImage: $(VM_IMAGE)

stages:
  - stage: ValidateGitOps
    displayName: 'Validate GitOps Configuration'
    jobs:
    - job: Validate
      steps:
      - checkout: self
        fetchDepth: 0
        
      - task: UseNode@1
        displayName: 'Use Node.js'
        inputs:
          version: '18.x'
          
      - script: |
          echo "Validating GitOps YAML files..."
          find gitops/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating $file"
            node -e "
              const yaml = require('js-yaml');
              const fs = require('fs');
              try {
                const content = fs.readFileSync('$file', 'utf8');
                yaml.loadAll(content, function(doc) {
                  if (doc && doc.kind === 'Application') {
                    console.log('✓ Valid ArgoCD Application:', doc.metadata.name);
                  }
                });
              } catch(e) {
                console.error('✗ Invalid YAML in $file:', e.message);
                process.exit(1);
              }
            "
          done
        displayName: 'Validate ArgoCD Applications'
        env:
          NODE_PATH: $(System.DefaultWorkingDirectory)/node_modules

  - stage: SyncGitOps
    displayName: 'Sync GitOps Applications'
    dependsOn: ValidateGitOps
    condition: succeeded()
    jobs:
    - job: SyncRootApp
      steps:
      - checkout: self
        fetchDepth: 0
        
      - task: AzureCLI@2
        displayName: 'Azure CLI Login'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_NAME) --overwrite
            kubectl config current-context
            
      - script: |
          echo "Checking ArgoCD status..."
          kubectl get applications -n $(ARGOCD_NAMESPACE)
          
          echo "Checking if root app exists..."
          if kubectl get application $(ROOT_APP_NAME) -n $(ARGOCD_NAMESPACE) >/dev/null 2>&1; then
            echo "✓ Root app exists, triggering sync..."
            kubectl patch application $(ROOT_APP_NAME) -n $(ARGOCD_NAMESPACE) \
              --type='merge' \
              -p='{"spec":{"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}'
            
            echo "Waiting for sync to complete..."
            kubectl wait --for=condition=Synced application/$(ROOT_APP_NAME) -n $(ARGOCD_NAMESPACE) --timeout=300s
            
            echo "✓ Root app synced successfully"
          else
            echo "✗ Root app not found. Please create it manually in ArgoCD first."
            exit 1
          fi
        displayName: 'Sync Root Application'
        
      - script: |
          echo "Checking sync status of all applications..."
          kubectl get applications -n $(ARGOCD_NAMESPACE) -o wide
          
          echo "Checking for any failed syncs..."
          FAILED_APPS=$(kubectl get applications -n $(ARGOCD_NAMESPACE) --field-selector=status.sync.status==OutOfSync -o name)
          if [ ! -z "$FAILED_APPS" ]; then
            echo "⚠️  Found applications out of sync:"
            echo "$FAILED_APPS"
            if [ "${{ parameters.forceSync }}" == "true" ]; then
              echo "Force syncing all applications..."
              kubectl get applications -n $(ARGOCD_NAMESPACE) -o name | xargs -I {} kubectl patch {} -n $(ARGOCD_NAMESPACE) \
                --type='merge' \
                -p='{"spec":{"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}'
            fi
          else
            echo "✓ All applications are in sync"
          fi
        displayName: 'Check Sync Status'
        
      - script: |
          echo "Triggering manual sync with options: ${{ parameters.syncOptions }}"
          if [ ! -z "${{ parameters.syncOptions }}" ]; then
            kubectl patch application $(ROOT_APP_NAME) -n $(ARGOCD_NAMESPACE) \
              --type='merge' \
              -p='{"spec":{"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}'
          fi
        displayName: 'Manual Sync (if requested)'
        condition: ne('${{ parameters.syncOptions }}', '')

  - stage: VerifyDeployment
    displayName: 'Verify Deployment'
    dependsOn: SyncGitOps
    condition: succeeded()
    jobs:
    - job: Verify
      steps:
      - checkout: self
        
      - task: AzureCLI@2
        displayName: 'Azure CLI Login'
        inputs:
          azureSubscription: $(AZURE_SUBSCRIPTION)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_NAME) --overwrite
            
      - script: |
          echo "Verifying infrastructure components..."
          
          # Check ArgoCD
          echo "Checking ArgoCD..."
          kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server
          
          # Check cert-manager
          echo "Checking cert-manager..."
          kubectl get pods -n cert-manager -l app.kubernetes.io/name=cert-manager
          
          # Check ingress-nginx
          echo "Checking ingress-nginx..."
          kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx
          
          # Check external-dns
          echo "Checking external-dns..."
          kubectl get pods -n external-dns -l app.kubernetes.io/name=external-dns
          
          echo "✓ All infrastructure components verified"
        displayName: 'Verify Infrastructure Components'
        
      - script: |
          echo "Checking application health..."
          
          # Wait for applications to be ready
          kubectl wait --for=condition=Available deployment --all -n argocd --timeout=300s
          kubectl wait --for=condition=Available deployment --all -n cert-manager --timeout=300s
          kubectl wait --for=condition=Available deployment --all -n ingress-nginx --timeout=300s
          
          echo "✓ All applications are healthy"
        displayName: 'Verify Application Health' 