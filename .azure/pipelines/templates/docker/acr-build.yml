parameters:
  acrName: ''  # Required: ACR name
  resourceGroup: ''  # Required: Resource group name
  services: []  # Required: List of services to build
  dockerBuildArgs: '--pull'  # Optional: Docker build arguments
  maxParallel: 4  # Optional: Maximum parallel builds
  retryCount: 2  # Optional: Number of retries on failure
  vmImage: 'ubuntu-latest'  # Optional: VM image to use
  azureSubscription: '$(AZURE_SUBSCRIPTION)'  # Optional: Azure subscription
  buildCacheFrom: ''  # Optional: Build cache configuration
  tags: |  
    $(SEMVER)
    $(Build.SourceVersion)    # Optional: For traceability
  timeoutInMinutes: 30  # Optional: Job timeout in minutes

jobs:
- job: Validate
  displayName: 'Validate Environment'
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - task: AzureCLI@2
    displayName: 'Validate ACR Access'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Check if ACR exists and is accessible
        if ! az acr show -n ${{ parameters.acrName }} -g ${{ parameters.resourceGroup }} &>/dev/null; then
          echo "##vso[task.logissue type=error]ACR ${{ parameters.acrName }} not found or not accessible"
          exit 1
        fi

        # Check if we have necessary permissions
        if ! az acr check-name -n ${{ parameters.acrName }} &>/dev/null; then
          echo "##vso[task.logissue type=error]Insufficient permissions for ACR ${{ parameters.acrName }}"
          exit 1
        fi

- job: BuildAndPush
  displayName: 'Build and Push Images'
  dependsOn: Validate
  condition: succeeded()
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  strategy:
    matrix: ${{ parameters.services }}
    maxParallel: ${{ parameters.maxParallel }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - task: AzureCLI@2
    displayName: 'Login to Azure Container Registry'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Login to ACR using managed identity or service principal
        az acr login --name ${{ parameters.acrName }}

  - task: Docker@2
    displayName: 'Build and Push $(serviceName)'
    retryCountOnTaskFailure: ${{ parameters.retryCount }}
    inputs:
      command: buildAndPush
      repository: $(serviceName)
      dockerfile: $(dockerfile)
      buildContext: '$(System.DefaultWorkingDirectory)/$(context)'
      containerRegistry: '${{ parameters.acrName }}'
      tags: ${{ parameters.tags }}
      buildOptions: ${{ parameters.dockerBuildArgs }}
      arguments: ${{ parameters.buildCacheFrom }}