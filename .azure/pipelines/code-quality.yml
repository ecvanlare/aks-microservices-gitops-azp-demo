# Code Quality Pipeline
# Runs linting and formatting checks on pull requests

trigger: none # No CI trigger
pr:
  branches:
    include:
      - main
      - dev
  paths:
    include:
      - .azure/**
      - cluster/**
      - terraform/**
      - scripts/**
      - .yamllint
      - README-linting.md

pool:
  vmImage: ubuntu-latest

variables:
  - group: azure-devops-variables

stages:
  - stage: CodeQuality
    displayName: "Code Quality Checks"
    jobs:
      - job: LintAndFormat
        displayName: "Lint & Format Check"
        steps:
          - checkout: self
            fetchDepth: 0

          # Cache npm packages for faster builds
          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: "Cache npm packages"

          # Install required tools
          - script: |
              echo "üîß Installing linting tools..."
              npm install -g prettier
              pip install yamllint
              # Install tflint
              curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
            displayName: "Install Linting Tools"

          # Lint YAML files (excluding workloads)
          - script: |
              echo "üîç Linting YAML files..."
              if [ -d "cluster/root" ] || [ -d "cluster/infrastructure" ] || [ -d ".azure" ]; then
                yamllint -c .yamllint cluster/root/ cluster/infrastructure/ .azure/
              else
                echo "‚ö†Ô∏è  No YAML directories found to lint"
              fi
            displayName: "Lint YAML Files"
            continueOnError: false

          # Lint Helm charts
          - script: |
              echo "üîç Linting Helm charts..."
              if [ -d "cluster/helm/online-boutique" ]; then
                helm lint cluster/helm/online-boutique
              else
                echo "‚ö†Ô∏è  No Helm chart found to lint"
              fi
            displayName: "Lint Helm Charts"
            continueOnError: false

          # Check YAML formatting (excluding workloads)
          - script: |
              echo "üîç Checking YAML formatting..."
              prettier --check ".azure/**/*.yml" "cluster/root/*.yaml" "cluster/infrastructure/**/*.yaml"
            displayName: "Check YAML Formatting"

          # Lint Terraform files
          - script: |
              echo "üîç Linting Terraform files..."
              if [ -d "terraform" ]; then
                cd terraform
                tflint --init
                tflint --format=compact
                cd ..
              else
                echo "‚ö†Ô∏è  No Terraform directory found to lint"
              fi
            displayName: "Lint Terraform Files"
            continueOnError: false

          # Check Terraform formatting
          - script: |
              echo "üîç Checking Terraform formatting..."
              if [ -d "terraform" ]; then
                terraform fmt -check -recursive terraform/
              else
                echo "‚ö†Ô∏è  No Terraform directory found to format check"
              fi
            displayName: "Check Terraform Format"
            continueOnError: false

          # Check for security vulnerabilities
          - script: |
              echo "üîç Checking for security vulnerabilities..."
              if command -v trivy &> /dev/null; then
                # Scan container images for vulnerabilities
                echo "Scanning container images..."
                # Add your trivy scan commands here
              else
                echo "‚ö†Ô∏è  Trivy not installed, skipping security scan"
              fi
            displayName: "Security Scan"
            continueOnError: true

          # Check for secrets in code
          - script: |
              echo "üîç Checking for secrets in code..."
              if command -v detect-secrets &> /dev/null; then
                detect-secrets scan --baseline .secrets.baseline
              else
                echo "‚ö†Ô∏è  detect-secrets not installed, skipping secret scan"
              fi
            displayName: "Secret Detection"
            continueOnError: true

          # Validate Kubernetes manifests
          - script: |
              echo "üîç Validating Kubernetes manifests..."
              if command -v kubectl &> /dev/null; then
                kubectl apply --dry-run=client -f cluster/root/
                kubectl apply --dry-run=client -f cluster/infrastructure/
              else
                echo "‚ö†Ô∏è  kubectl not available, skipping K8s validation"
              fi
            displayName: "Kubernetes Manifest Validation"
            continueOnError: false

          # Check for outdated dependencies
          - script: |
              echo "üîç Checking for outdated dependencies..."
              # Add your dependency check commands here
              echo "Dependency check completed"
            displayName: "Dependency Check"
            continueOnError: true

          # Run local linting script
          - script: |
              echo "üîç Running comprehensive linting checks..."
              if [ -f "./scripts/lint-local.sh" ]; then
                chmod +x ./scripts/lint-local.sh
                ./scripts/lint-local.sh
              else
                echo "‚ö†Ô∏è  Local linting script not found"
              fi
            displayName: "Run Local Linting Script"
            continueOnError: false

          # Publish test results
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/test-results.xml"
              mergeTestResults: true
              testRunTitle: "Code Quality"
            condition: succeededOrFailed()
            displayName: "Publish Test Results"

          # Publish code coverage
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "**/coverage.xml"
              reportDirectory: "**/coverage"
            condition: succeededOrFailed()
            displayName: "Publish Code Coverage"
