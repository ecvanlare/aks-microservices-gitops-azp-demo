# Security Scanning Pipeline
# Runs security checks on pull requests

trigger: none # No CI trigger
pr:
  branches:
    include:
      - main
      - dev
  paths:
    include:
      - src/**
      - cluster/**
      - terraform/**

pool:
  vmImage: ubuntu-latest

variables:
  - group: azure-devops-variables

stages:
  - stage: SecurityScan
    displayName: "Security Scanning"
    jobs:
      - job: SecurityChecks
        displayName: "Security & Compliance Checks"
        steps:
          - checkout: self
            fetchDepth: 0

          # Install security tools
          - script: |
              echo "üîß Installing security tools..."
              # Install Trivy for container scanning
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
              # Install detect-secrets for secret detection
              pip install detect-secrets
            displayName: "Install Security Tools"

          # Container vulnerability scanning
          - script: |
              echo "üîç Scanning container images for vulnerabilities..."
              # Scan base images and dependencies
              trivy fs --severity HIGH,CRITICAL src/
            displayName: "Container Vulnerability Scan"
            continueOnError: true

          # Secret detection
          - script: |
              echo "üîç Detecting secrets in code..."
              detect-secrets scan --baseline .secrets.baseline
            displayName: "Secret Detection"
            continueOnError: true

          # SAST (Static Application Security Testing)
          - script: |
              echo "üîç Running SAST analysis..."
              # Add your SAST tool here (e.g., SonarQube, CodeQL)
              echo "SAST analysis completed"
            displayName: "SAST Analysis"
            continueOnError: true

          # Dependency vulnerability scanning
          - script: |
              echo "üîç Scanning dependencies for vulnerabilities..."
              # Scan npm packages, Python requirements, etc.
              find src/ -name "package.json" -exec npm audit --audit-level=high {} \;
              find src/ -name "requirements.txt" -exec safety check {} \;
            displayName: "Dependency Vulnerability Scan"
            continueOnError: true

          # Publish security results
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/security-results.xml'
              mergeTestResults: true
              testRunTitle: 'Security Scan'
            condition: succeededOrFailed()
            displayName: "Publish Security Results" 