trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - "src/**"
      - "online-boutique-chart/**"

pr:
  branches:
    include:
      - "main"
  paths:
    include:
      - "src/**"
      - "online-boutique-chart/**"

parameters:
  - name: forceBuildAllServices
    displayName: 'Force Build All Services'
    type: boolean
    default: false

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.docker'
  - group: 'online-boutique.kubernetes'
  - name: APP_SOURCE_DIR
    value: '$(System.DefaultWorkingDirectory)/src'
  - name: VM_IMAGE
    value: 'ubuntu-22.04'
  - name: BUILD_ALL_SERVICES
    value: ${{ parameters.forceBuildAllServices }}

pool:
  vmImage: $(VM_IMAGE)

stages:
  - stage: DetectChanges
    displayName: 'Detect Changed Services and Calculate Version'
    jobs:
    - job: AnalyzeChanges
      steps:
      - template: ../templates/gitversion/gitversion-template.yml
        parameters:
          name: 'GitVersion'
          fetchDepth: 0
          useConfigFile: false

      - template: ../templates/detect-changes-task.yml
        parameters:
          gitDepth: 1
          sourceDir: 'src'
          chartDir: 'online-boutique-chart'
          acrName: $(ACR_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          azureSubscription: $(AZURE_SUBSCRIPTION)

  # Conditional Build Stages
  - stage: BuildCartService
    displayName: 'Build Cart Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'cartservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: cartservice
              dockerfile: '$(APP_SOURCE_DIR)/cartservice/src/Dockerfile'
              context: 'src/cartservice/src'

  - stage: BuildFrontend
    displayName: 'Build Frontend'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'frontend'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: frontend
              dockerfile: '$(APP_SOURCE_DIR)/frontend/Dockerfile'
              context: 'src/frontend'

  - stage: BuildProductCatalogService
    displayName: 'Build Product Catalog Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'productcatalogservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: productcatalogservice
              dockerfile: '$(APP_SOURCE_DIR)/productcatalogservice/Dockerfile'
              context: 'src/productcatalogservice'

  - stage: BuildCurrencyService
    displayName: 'Build Currency Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'currencyservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: currencyservice
              dockerfile: '$(APP_SOURCE_DIR)/currencyservice/Dockerfile'
              context: 'src/currencyservice'

  - stage: BuildEmailService
    displayName: 'Build Email Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'emailservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: emailservice
              dockerfile: '$(APP_SOURCE_DIR)/emailservice/Dockerfile'
              context: 'src/emailservice'

  - stage: BuildPaymentService
    displayName: 'Build Payment Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'paymentservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: paymentservice
              dockerfile: '$(APP_SOURCE_DIR)/paymentservice/Dockerfile'
              context: 'src/paymentservice'

  - stage: BuildShippingService
    displayName: 'Build Shipping Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'shippingservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: shippingservice
              dockerfile: '$(APP_SOURCE_DIR)/shippingservice/Dockerfile'
              context: 'src/shippingservice'

  - stage: BuildRecommendationService
    displayName: 'Build Recommendation Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'recommendationservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: recommendationservice
              dockerfile: '$(APP_SOURCE_DIR)/recommendationservice/Dockerfile'
              context: 'src/recommendationservice'

  - stage: BuildAdService
    displayName: 'Build Ad Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'adservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: adservice
              dockerfile: '$(APP_SOURCE_DIR)/adservice/Dockerfile'
              context: 'src/adservice'

  - stage: BuildCheckoutService
    displayName: 'Build Checkout Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'checkoutservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: checkoutservice
              dockerfile: '$(APP_SOURCE_DIR)/checkoutservice/Dockerfile'
              context: 'src/checkoutservice'

  - stage: BuildShoppingAssistantService
    displayName: 'Build Shopping Assistant Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.DetectChanges.SERVICES_TO_BUILD'], 'shoppingassistantservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: shoppingassistantservice
              dockerfile: '$(APP_SOURCE_DIR)/shoppingassistantservice/Dockerfile'
              context: 'src/shoppingassistantservice'

  - stage: DeployToDev
    displayName: 'Deploy to Dev Environment'
    dependsOn: 
      - BuildCartService
      - BuildFrontend
      - BuildProductCatalogService
      - BuildCurrencyService
      - BuildEmailService
      - BuildPaymentService
      - BuildShippingService
      - BuildRecommendationService
      - BuildAdService
      - BuildCheckoutService
      - BuildShoppingAssistantService
    condition: succeeded()
    variables:
      - group: 'online-boutique.dev'
      - name: SEMVER
        value: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - deployment: Deploy
      environment: 'online-boutique-dev'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../templates/deploy-service-tasks.yml
              parameters:
                namespace: $(NAMESPACE)
                releaseName: $(RELEASE_NAME)
                includeVerification: true

  - stage: DeployToProduction
    displayName: 'Deploy to Production Environment'
    dependsOn: DeployToDev
    condition: succeeded()
    variables:
      - name: SEMVER
        value: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.SetVersionOutputs.SEMVER'] ]
    jobs:
    - deployment: Deploy
      environment: 'online-boutique-prod'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../templates/deploy-service-tasks.yml
              parameters:
                namespace: $(NAMESPACE)
                releaseName: $(RELEASE_NAME)
                includeVerification: true 