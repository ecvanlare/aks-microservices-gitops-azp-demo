trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - "src/**"
      - "gitops/helm-charts/app-chart/**"

parameters:
  - name: forceBuildAllServices
    displayName: 'Force Build All Services'
    type: boolean
    default: false

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.docker'
  - group: 'online-boutique.kubernetes'
  - name: APP_SOURCE_DIR
    value: '$(System.DefaultWorkingDirectory)/src'
  - name: VM_IMAGE
    value: 'ubuntu-latest'
  - name: BUILD_ALL_SERVICES
    value: ${{ parameters.forceBuildAllServices }}


pool:
  vmImage: $(VM_IMAGE)

stages:
  - stage: DetectChanges
    displayName: 'Detect Changed Services and Calculate Version'
    jobs:
    - job: AnalyzeChanges
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/detect-changes.yml
        parameters:
          gitDepth: 0
          sourceDir: 'src'

      - template: templates/gitversion/gitversion.yml
        parameters:
          name: 'SetSemver'
          fetchDepth: 0
          useConfigFile: false

    # Conditional Build Stages
  - stage: BuildCartService
    displayName: 'Build Cart Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'cartservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING CARTSERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Cart Service Build'
                
      - template: templates/build.yml
        parameters:
          serviceName: 'cartservice'
          semver: $(SEMVER)

    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'cartservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildFrontend
    displayName: 'Build Frontend'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_FRONTEND: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_FRONTEND'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'frontend')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING FRONTEND"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build frontend: $(BUILD_FRONTEND)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Frontend Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'frontend'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'frontend'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildProductCatalogService
    displayName: 'Build Product Catalog Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_PRODUCTCATALOGSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_PRODUCTCATALOGSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'productcatalogservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING PRODUCT CATALOG SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build productcatalogservice: $(BUILD_PRODUCTCATALOGSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Product Catalog Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'productcatalogservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'productcatalogservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildCurrencyService
    displayName: 'Build Currency Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_CURRENCYSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_CURRENCYSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'currencyservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING CURRENCY SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build currencyservice: $(BUILD_CURRENCYSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Currency Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'currencyservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'currencyservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildEmailService
    displayName: 'Build Email Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_EMAILSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_EMAILSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'emailservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING EMAIL SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build emailservice: $(BUILD_EMAILSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Email Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'emailservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'emailservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildPaymentService
    displayName: 'Build Payment Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_PAYMENTSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_PAYMENTSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'paymentservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING PAYMENT SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build paymentservice: $(BUILD_PAYMENTSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Payment Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'paymentservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'paymentservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildShippingService
    displayName: 'Build Shipping Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_SHIPPINGSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_SHIPPINGSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'shippingservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING SHIPPING SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build shippingservice: $(BUILD_SHIPPINGSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Shipping Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'shippingservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'shippingservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildRecommendationService
    displayName: 'Build Recommendation Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_RECOMMENDATIONSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_RECOMMENDATIONSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'recommendationservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING RECOMMENDATION SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build recommendationservice: $(BUILD_RECOMMENDATIONSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Recommendation Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'recommendationservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'recommendationservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildAdService
    displayName: 'Build Ad Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_ADSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_ADSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'adservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING AD SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build adservice: $(BUILD_ADSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Ad Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'adservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'adservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildCheckoutService
    displayName: 'Build Checkout Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_CHECKOUTSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_CHECKOUTSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'checkoutservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING CHECKOUT SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build checkoutservice: $(BUILD_CHECKOUTSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Checkout Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'checkoutservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'checkoutservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: BuildShoppingAssistantService
    displayName: 'Build Shopping Assistant Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_SHOPPINGASSISTANTSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_SHOPPINGASSISTANTSERVICE'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      condition: contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'shoppingassistantservice')
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "🚀 BUILDING SHOPPING ASSISTANT SERVICE"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build shoppingassistantservice: $(BUILD_SHOPPINGASSISTANTSERVICE)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Shopping Assistant Service Build'
        
      - template: templates/build.yml
        parameters:
          serviceName: 'shoppingassistantservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/trivy/trivy-cd.yml
        parameters:
          imageName: 'shoppingassistantservice'
          imageTag: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: true

  - stage: UpdateGitOps
    displayName: 'Update GitOps values.yaml with new image tags'
    dependsOn:
      - BuildFrontend
      - BuildCartService
      - BuildProductCatalogService
      - BuildCurrencyService
      - BuildEmailService
      - BuildPaymentService
      - BuildShippingService
      - BuildRecommendationService
      - BuildAdService
      - BuildCheckoutService
      - BuildShoppingAssistantService
    condition: succeeded()
    variables:
      - group: 'online-boutique.gitops'
      - name: SEMVER
        value: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      # SSH key is available via AZURE_DEVOPS_SSH_KEY from the gitops variable group
    jobs:
    - job: UpdateGitOpsValues
      displayName: 'Update GitOps Repository with New Image Tags'
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "📋 SUMMARY OF BUILT SERVICES"
          echo "=================================="
          echo "Semver: $(SEMVER)"
          echo ""
          echo "The following services were built and will be updated in GitOps:"
          if [ -n "$(SERVICES_TO_BUILD_FIXED)" ]; then
            echo "$(SERVICES_TO_BUILD_FIXED)" | tr ' ' '\n' | while read service_with_tag; do
              echo "  ✅ $service_with_tag"
            done
          else
            echo "  ⚠️  No services were built (no changes detected)"
          fi
          echo "=================================="
        displayName: 'Summary - Built Services'
        
      - template: templates/get-services-and-tags.yml
        parameters:
          detectChangesStage: 'DetectChanges'
          detectChangesJob: 'AnalyzeChanges'
          detectChangesTask: 'DetectChanges'
          servicesOutputVariable: 'SERVICES_TO_BUILD_STAGE'
          outputVariableName: 'SERVICES_TO_BUILD_FIXED'
        
      - template: templates/update-gitops-values-helm.yml
        parameters:
          semver: $(SEMVER)
          builtServices: $(SERVICES_TO_BUILD_FIXED)
          gitopsRepoUrl: $(GITOPS_REPO_URL)
          gitopsBranch: $(GITOPS_BRANCH)
          prTitle: 'Update Image Tags for Built Services'
          prDescription: 'Automatically created PR to update image tags for built services'

  - stage: DeployToDev
    displayName: 'Monitor Dev Environment - ArgoCD Sync'
    dependsOn: 
      - DetectChanges
      - UpdateGitOps
    condition: succeeded()
    variables:
      - group: 'online-boutique.dev'
      - group: 'online-boutique.common'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - deployment: MonitorDev
      environment: 'development'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - template: templates/deploy.yml
              parameters:
                includeVerification: true
                semver: $(SEMVER)
                useArgoCD: true
                argocdNamespace: 'argocd'
                gitopsRepoUrl: $(GITOPS_REPO_URL)
                gitopsBranch: $(GITOPS_BRANCH)

  - stage: DeployToProduction
    displayName: 'Production Approval Gate - ArgoCD Sync'
    dependsOn: DeployToDev
    condition: succeeded()
    variables:
      - group: 'online-boutique.prod'
      - group: 'online-boutique.common'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - deployment: ApproveAndSyncProd
      environment: 'production'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - template: templates/deploy.yml
              parameters:
                includeVerification: true
                semver: $(SEMVER)
                useArgoCD: true
                argocdNamespace: 'argocd'
                gitopsRepoUrl: $(GITOPS_REPO_URL)
                gitopsBranch: $(GITOPS_BRANCH) 