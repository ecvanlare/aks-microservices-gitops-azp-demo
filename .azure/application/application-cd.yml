trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - "src/**"
      - "online-boutique-chart/**"

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.docker'
  - group: 'online-boutique.kubernetes'
  - name: APP_SOURCE_DIR
    value: '$(System.DefaultWorkingDirectory)/src'
  - name: VM_IMAGE
    value: 'ubuntu-22.04'

pool:
  vmImage: $(VM_IMAGE)

stages:
  - stage: DetectChanges
    displayName: 'Detect Changed Services and Calculate Version'
    jobs:
    - job: AnalyzeChanges
      steps:
      - template: ../templates/gitversion/gitversion-template.yml
        parameters:
          name: 'GitVersion'
          fetchDepth: 0
          useConfigFile: false

      - template: ../templates/detect-changes-task.yml
        parameters:
          gitDepth: 1
          sourceDir: 'src'
          chartDir: 'online-boutique-chart'

  # Conditional Build Stages
  - stage: BuildCartService
    displayName: 'Build Cart Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'cartservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: cartservice

  - stage: BuildFrontend
    displayName: 'Build Frontend'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'frontend'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: frontend

  - stage: BuildProductCatalogService
    displayName: 'Build Product Catalog Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'productcatalogservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: productcatalogservice

  - stage: BuildCurrencyService
    displayName: 'Build Currency Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'currencyservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: currencyservice

  - stage: BuildEmailService
    displayName: 'Build Email Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'emailservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: emailservice

  - stage: BuildPaymentService
    displayName: 'Build Payment Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'paymentservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: paymentservice

  - stage: BuildShippingService
    displayName: 'Build Shipping Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'shippingservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: shippingservice

  - stage: BuildRecommendationService
    displayName: 'Build Recommendation Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'recommendationservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: recommendationservice

  - stage: BuildAdService
    displayName: 'Build Ad Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'adservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: adservice

  - stage: BuildCheckoutService
    displayName: 'Build Checkout Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'checkoutservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: checkoutservice

  - stage: BuildShoppingAssistantService
    displayName: 'Build Shopping Assistant Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'shoppingassistantservice'), contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'all')))
    variables:
      SEMVER: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - template: ../templates/build-service-tasks.yml
        parameters:
          services:
            - name: shoppingassistantservice

  - stage: DeployToDev
    displayName: 'Deploy to Dev Environment'
    dependsOn: 
      - BuildCartService
      - BuildFrontend
      - BuildProductCatalogService
      - BuildCurrencyService
      - BuildEmailService
      - BuildPaymentService
      - BuildShippingService
      - BuildRecommendationService
      - BuildAdService
      - BuildCheckoutService
      - BuildShoppingAssistantService
    condition: succeeded()
    variables:
      - group: 'online-boutique.dev'
      - name: SEMVER
        value: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - deployment: Deploy
      environment: 'online-boutique-dev'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../templates/deploy-service-tasks.yml
              parameters:
                namespace: $(NAMESPACE)
                releaseName: $(RELEASE_NAME)
                includeVerification: true

  - stage: DeployToProduction
    displayName: 'Deploy to Production Environment'
    dependsOn: DeployToDev
    condition: succeeded()
    variables:
      - name: SEMVER
        value: $[ dependencies.DetectChanges.outputs['AnalyzeChanges.GitVersion.SEMVER'] ]
    jobs:
    - deployment: Deploy
      environment: 'online-boutique-prod'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../templates/deploy-service-tasks.yml
              parameters:
                namespace: $(NAMESPACE)
                releaseName: $(RELEASE_NAME)
                includeVerification: true 