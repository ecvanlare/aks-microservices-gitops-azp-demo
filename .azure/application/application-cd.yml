trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - "src/**"
      - "helm-chart/**"

pr:
  branches:
    include:
      - "main"
  paths:
    include:
      - "src/**"
      - "helm-chart/**"

parameters:
  - name: forceBuildAllServices
    displayName: 'Force Build All Services'
    type: boolean
    default: false

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.docker'
  - group: 'online-boutique.kubernetes'
  - name: APP_SOURCE_DIR
    value: '$(System.DefaultWorkingDirectory)/src'
  - name: VM_IMAGE
    value: 'ubuntu-latest'
  - name: BUILD_ALL_SERVICES
    value: ${{ parameters.forceBuildAllServices }}

pool:
  vmImage: $(VM_IMAGE)

stages:
  - stage: DetectChanges
    displayName: 'Detect Changed Services and Calculate Version'
    jobs:
    - job: AnalyzeChanges
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/detect-changes.yml
        parameters:
          gitDepth: 0
          sourceDir: 'src'
          chartDir: 'helm-chart'
          acrName: $(ACR_NAME)
          resourceGroup: $(RESOURCE_GROUP)
          azureSubscription: $(AZURE_SUBSCRIPTION)

      - template: templates/gitversion/gitversion.yml
        parameters:
          name: 'SetSemver'
          fetchDepth: 0
          useConfigFile: false

    # Conditional Build Stages
  - stage: BuildCartService
    displayName: 'Build Cart Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'cartservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
                
      - template: templates/build.yml
        parameters:
          serviceName: 'cartservice'
          semver: $(SEMVER)

  - stage: BuildFrontend
    displayName: 'Build Frontend'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'frontend'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'frontend'
          semver: $(SEMVER)

  - stage: BuildProductCatalogService
    displayName: 'Build Product Catalog Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'productcatalogservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'productcatalogservice'
          semver: $(SEMVER)

  - stage: BuildCurrencyService
    displayName: 'Build Currency Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'currencyservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'currencyservice'
          semver: $(SEMVER)

  - stage: BuildEmailService
    displayName: 'Build Email Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'emailservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'emailservice'
          semver: $(SEMVER)

  - stage: BuildPaymentService
    displayName: 'Build Payment Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'paymentservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'paymentservice'
          semver: $(SEMVER)

  - stage: BuildShippingService
    displayName: 'Build Shipping Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'shippingservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'shippingservice'
          semver: $(SEMVER)

  - stage: BuildRecommendationService
    displayName: 'Build Recommendation Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'recommendationservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'recommendationservice'
          semver: $(SEMVER)

  - stage: BuildAdService
    displayName: 'Build Ad Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'adservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'adservice'
          semver: $(SEMVER)

  - stage: BuildCheckoutService
    displayName: 'Build Checkout Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'checkoutservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'checkoutservice'
          semver: $(SEMVER)

  - stage: BuildShoppingAssistantService
    displayName: 'Build Shopping Assistant Service'
    dependsOn: DetectChanges
    condition: and(succeeded(), or(contains(dependencies.DetectChanges.outputs['AnalyzeChanges.SERVICES_TO_BUILD'], 'shoppingassistantservice'), eq(variables['BUILD_ALL_SERVICES'], 'true')))
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: BuildAndPush
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build.yml
        parameters:
          serviceName: 'shoppingassistantservice'
          semver: $(SEMVER)

  - stage: DeployToDev
    displayName: 'Deploy to Dev Environment'
    dependsOn: 
      - DetectChanges
      - BuildCartService
      - BuildFrontend
      - BuildProductCatalogService
      - BuildCurrencyService
      - BuildEmailService
      - BuildPaymentService
      - BuildShippingService
      - BuildRecommendationService
      - BuildAdService
      - BuildCheckoutService
      - BuildShoppingAssistantService
    condition: succeeded()
    variables:
      - group: 'online-boutique.dev'
      - group: 'online-boutique.common'
      - group: 'online-boutique.docker'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - deployment: Deploy
      environment: 'development'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - template: templates/deploy.yml
              parameters:
                includeVerification: true
                semver: $(SEMVER)

  - stage: DeployToProduction
    displayName: 'Deploy to Production Environment'
    dependsOn: DeployToDev
    condition: succeeded()
    variables:
      - group: 'online-boutique.prod'
      - name: SEMVER
        value: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
    jobs:
    - deployment: Deploy
      environment: 'production'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - template: templates/deploy.yml
              parameters:
                includeVerification: true
                semver: $(SEMVER) 