# Application CI Pipeline - Build, Test, and Security Scan
trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - "src/**"
      - "gitops/helm-charts/app-chart/**"

pr:
  branches:
    include:
      - "main"
  paths:
    include:
      - "src/**"
      - "gitops/helm-charts/app-chart/**"

parameters:
  - name: forceBuildAllServices
    displayName: 'Force Build All Services'
    type: boolean
    default: false

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.docker'
  - name: APP_SOURCE_DIR
    value: '$(System.DefaultWorkingDirectory)/src'
  - name: VM_IMAGE
    value: 'ubuntu-latest'
  - name: BUILD_ALL_SERVICES
    value: ${{ parameters.forceBuildAllServices }}

pool:
  vmImage: $(VM_IMAGE)

stages:
  - stage: DetectChanges
    displayName: 'Detect Changed Services and Calculate Version'
    jobs:
    - job: AnalyzeChanges
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/build/detect-changes.yml
        parameters:
          gitDepth: 0
          sourceDir: 'src'

      - template: templates/versioning/gitversion.yml
        parameters:
          name: 'SetSemver'
          fetchDepth: 0
          useConfigFile: false

  # Build and Security Scan Stages
  - stage: BuildCartService
    displayName: 'Build Cart Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'cartservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

                
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'cartservice'
          semver: $(SEMVER)

    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'cartservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'cartservice'
          semver: $(SEMVER)

  - stage: BuildFrontend
    displayName: 'Build Frontend'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_FRONTEND: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_FRONTEND'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'frontend'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "ðŸš€ BUILDING FRONTEND"
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build frontend: $(BUILD_FRONTEND)"
          echo "Semver: $(SEMVER)"
        displayName: 'Debug - Frontend Build'
        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'frontend'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'frontend'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'frontend'
          semver: $(SEMVER)

  - stage: BuildProductCatalogService
    displayName: 'Build Product Catalog Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_PRODUCTCATALOGSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_PRODUCTCATALOGSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'productcatalogservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'productcatalogservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'productcatalogservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'productcatalogservice'
          semver: $(SEMVER)

  - stage: BuildCurrencyService
    displayName: 'Build Currency Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_CURRENCYSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_CURRENCYSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'currencyservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'currencyservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'currencyservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'currencyservice'
          semver: $(SEMVER)

  - stage: BuildCheckoutService
    displayName: 'Build Checkout Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_CHECKOUTSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_CHECKOUTSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'checkoutservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'checkoutservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'checkoutservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'checkoutservice'
          semver: $(SEMVER)

  - stage: BuildShoppingAssistantService
    displayName: 'Build Shopping Assistant Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_SHOPPINGASSISTANTSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_SHOPPINGASSISTANTSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'shoppingassistantservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'shoppingassistantservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'shoppingassistantservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'shoppingassistantservice'
          semver: $(SEMVER)

  - stage: BuildAdService
    displayName: 'Build Ad Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_ADSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_ADSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'adservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'adservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'adservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'adservice'
          semver: $(SEMVER)

  - stage: BuildEmailService
    displayName: 'Build Email Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_EMAILSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_EMAILSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'emailservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'emailservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'emailservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'emailservice'
          semver: $(SEMVER)

  - stage: BuildPaymentService
    displayName: 'Build Payment Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_PAYMENTSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_PAYMENTSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'paymentservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'paymentservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'paymentservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'paymentservice'
          semver: $(SEMVER)

  - stage: BuildShippingService
    displayName: 'Build Shipping Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_SHIPPINGSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_SHIPPINGSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'shippingservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'shippingservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'shippingservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'shippingservice'
          semver: $(SEMVER)

  - stage: BuildRecommendationService
    displayName: 'Build Recommendation Service'
    dependsOn: DetectChanges
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
      BUILD_RECOMMENDATIONSERVICE: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.BUILD_RECOMMENDATIONSERVICE'] ]
    jobs:
    - job: Build
      pool:
        vmImage: $(VM_IMAGE)
      condition: or(contains(stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'], 'recommendationservice'), eq(variables['BUILD_ALL_SERVICES'], 'true'))
      steps:
      - checkout: self
        fetchDepth: 0
      

        
      - template: templates/build/docker/service-build.yml
        parameters:
          serviceName: 'recommendationservice'
          semver: $(SEMVER)
    
    - job: TrivyScan
      displayName: 'Trivy Security Scan'
      dependsOn: Build
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - template: templates/security/trivy-image-scan.yml
        parameters:
          imageName: 'recommendationservice'
          semver: '$(SEMVER)'
          registryUrl: '$(ACR_NAME).azurecr.io'
          failOnHigh: false
          severityThreshold: 'UNKNOWN'

    - job: Push
      displayName: 'Push to ACR'
      dependsOn: TrivyScan
      pool:
        vmImage: $(VM_IMAGE)
      condition: succeeded()
      steps:
      - checkout: self
        fetchDepth: 0
      
      - template: templates/build/docker/docker-push.yml
        parameters:
          serviceName: 'recommendationservice'
          semver: $(SEMVER)

  - stage: PublishSemver
    displayName: 'Publish Semver Artifact'
    dependsOn: 
      - DetectChanges
      - BuildCartService
      - BuildFrontend
      - BuildProductCatalogService
      - BuildCurrencyService
      - BuildCheckoutService
      - BuildShoppingAssistantService
      - BuildAdService
      - BuildEmailService
      - BuildPaymentService
      - BuildRecommendationService
      - BuildShippingService
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['SetSemver.SEMVER'] ]
      SERVICES_TO_BUILD: $[ stageDependencies.DetectChanges.AnalyzeChanges.outputs['DetectChanges.SERVICES_TO_BUILD_STAGE'] ]
    jobs:
    - job: Publish
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - script: |
          mkdir -p $(Build.ArtifactStagingDirectory)
          echo "$(SEMVER)" > $(Build.ArtifactStagingDirectory)/semver.txt
          
          # Generate list of services that were actually built
          echo "Generating built services list..."
          SERVICES_TO_DEPLOY="$(Build.ArtifactStagingDirectory)/services-to-deploy.txt"
          
          # Debug variables
          echo "=== DEBUG INFO ==="
          echo "SEMVER: '$(SEMVER)'"
          echo "SERVICES_TO_BUILD: '$(SERVICES_TO_BUILD)'"
          echo "BUILD_ALL_SERVICES: '$(BUILD_ALL_SERVICES)'"
          echo "=================="
          
          # Use the same logic as the build stages to determine which services were built
          echo "Services to build: $(SERVICES_TO_BUILD)"
          echo "Build all services: $(BUILD_ALL_SERVICES)"
          
          # Check each service using the same conditions as the build stages
          if [[ "$(SERVICES_TO_BUILD)" == *"cartservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "cartservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"frontend"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "frontend:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"productcatalogservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "productcatalogservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"currencyservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "currencyservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"checkoutservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "checkoutservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"shoppingassistantservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "shoppingassistantservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"adservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "adservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"emailservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "emailservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"paymentservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "paymentservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"recommendationservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "recommendationservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          if [[ "$(SERVICES_TO_BUILD)" == *"shippingservice"* ]] || [[ "$(BUILD_ALL_SERVICES)" == "true" ]]; then
            echo "shippingservice:$(SEMVER)" >> "$SERVICES_TO_DEPLOY"
          fi
          
          echo "âœ… Published semver: $(SEMVER)"
          echo "ðŸ“¦ Built services list:"
          cat "$SERVICES_TO_DEPLOY"
        displayName: 'Publish Semver and Built Services'
        
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'build-artifacts'
          publishLocation: 'pipeline'