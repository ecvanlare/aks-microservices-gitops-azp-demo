# Docker Build Template
# Builds Docker images with caching and creates artifacts

parameters:
  serviceName: ''  # Service name to build
  dockerfile: ''  # Dockerfile path
  context: ''  # Build context
  semver: ''  # Semantic version for image tag
  retryCount: 2  # Number of retries on failure
  vmImage: 'ubuntu-latest'  # VM image for the agent
  workingDirectory: '$(System.DefaultWorkingDirectory)'  # Working directory
  
  # Azure Configuration
  acrName: '$(ACR_NAME)'  # Azure Container Registry name
  resourceGroup: '$(RESOURCE_GROUP)'  # Resource group
  azureSubscription: '$(AZURE_SUBSCRIPTION)'  # Azure subscription

steps:
  # Setup build environment and login to ACR
  - task: AzureCLI@2
    displayName: 'Setup Build Environment'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Validate essential files
        if [ ! -f "${{ parameters.dockerfile }}" ]; then
          echo "❌ Dockerfile not found: ${{ parameters.dockerfile }}"
          exit 1
        fi
        
        if [ ! -d "${{ parameters.workingDirectory }}/${{ parameters.context }}" ]; then
          echo "❌ Build context not found: ${{ parameters.workingDirectory }}/${{ parameters.context }}"
          exit 1
        fi
        
        # Login to ACR for cache
        az acr login --name "${{ parameters.acrName }}"
        
        # Pull cache image (ignore errors for first build)
        docker pull "${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.semver }}" || echo "No cache image found (normal for first build)"

  # Build Docker image with caching
  - task: Docker@2
    displayName: 'Build ${{ parameters.serviceName }}'
    retryCountOnTaskFailure: ${{ parameters.retryCount }}
    inputs:
      command: build
      repository: ${{ parameters.serviceName }}
      dockerfile: ${{ parameters.dockerfile }}
      buildContext: '${{ parameters.workingDirectory }}/${{ parameters.context }}'
      tags: ${{ parameters.semver }}
      buildOptions: --cache-from=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.semver }}

  # Create artifact with Docker image and metadata
  - task: AzureCLI@2
    displayName: 'Create Artifact'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Create artifact directory
        mkdir -p $(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}
        
        # Save Docker image
        docker save "${{ parameters.serviceName }}:${{ parameters.semver }}" -o "$(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}/image.tar"
        
        # Create build metadata
        cat > $(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}/build-info.json << EOF
        {
          "serviceName": "${{ parameters.serviceName }}",
          "imageTag": "${{ parameters.semver }}",
          "acrName": "${{ parameters.acrName }}",
          "fullImageName": "${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.semver }}",
          "buildId": "$(Build.BuildId)",
          "buildNumber": "$(Build.BuildNumber)"
        }
        EOF

  # Publish artifact
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}'
      ArtifactName: '${{ parameters.serviceName }}-docker-image'
      publishLocation: 'Container'