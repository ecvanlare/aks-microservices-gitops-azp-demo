# Docker Build Template
# Builds Docker images with caching and creates artifacts

parameters:
  serviceName: ''  # Service name to build
  dockerfile: ''  # Dockerfile path
  context: ''  # Build context
  semver: ''  # Semantic version for image tag
  acrName: '$(ACR_NAME)'  # Azure Container Registry name

steps:
  # Login to ACR and pull cache images
  - task: AzureCLI@2
    displayName: 'Setup Build Environment'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Login to ACR for cache
        az acr login --name "${{ parameters.acrName }}"
        
        # Pull cache images
        echo "Pulling cache images for ${{ parameters.serviceName }}..."
        docker pull "${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.semver }}" || echo "No semver cache found"
        docker pull "${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:stable" || echo "No stable cache found"

  # Build Docker image with caching
  - task: Docker@2
    displayName: 'Build ${{ parameters.serviceName }}'
    inputs:
      command: build
      repository: ${{ parameters.serviceName }}
      dockerfile: ${{ parameters.dockerfile }}
      buildContext: ${{ parameters.context }}
      tags: ${{ parameters.semver }}
      buildOptions: --cache-from=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.semver }} --cache-from=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:stable

  # Create and publish artifact
  - task: AzureCLI@2
    displayName: 'Create Artifact'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        mkdir -p $(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}
        docker save "${{ parameters.serviceName }}:${{ parameters.semver }}" -o "$(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}/image.tar"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}'
      ArtifactName: '${{ parameters.serviceName }}-docker-image'
      publishLocation: 'Container'