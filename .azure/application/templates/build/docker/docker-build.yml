parameters:
  serviceName: ''  # Required: Service name to build
  dockerfile: ''  # Required: Dockerfile path
  context: ''  # Required: Build context
  semver: ''  # Required: Semantic version for image tag
  retryCount: 2  # Optional: Number of retries on failure
  vmImage: 'ubuntu-latest'  # Optional: VM image for the agent
  workingDirectory: '$(System.DefaultWorkingDirectory)'  # Optional: Working directory
  
  # Azure Configuration (with defaults from variable groups)
  acrName: '$(ACR_NAME)'  # Default from variable group
  resourceGroup: '$(RESOURCE_GROUP)'  # Default from variable group
  azureSubscription: '$(AZURE_SUBSCRIPTION)'  # Default from variable group

steps:
- task: AzureCLI@2
  displayName: 'Setup Build Environment'
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "=== Build Setup ==="
      echo "Service: ${{ parameters.serviceName }}"
      echo "ACR: ${{ parameters.acrName }}"
      echo "Semver: ${{ parameters.semver }}"
      echo "Working Directory: ${{ parameters.workingDirectory }}"
      
      # Validate essential files
      if [ ! -f "${{ parameters.dockerfile }}" ]; then
        echo "❌ Dockerfile not found: ${{ parameters.dockerfile }}"
        exit 1
      fi
      
      if [ ! -d "${{ parameters.workingDirectory }}/${{ parameters.context }}" ]; then
        echo "❌ Build context not found: ${{ parameters.workingDirectory }}/${{ parameters.context }}"
        exit 1
      fi
      
      # Login to ACR for cache
      az acr login --name "${{ parameters.acrName }}"
      
      # Pull cache image (ignore errors for first build)
      docker pull "${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.semver }}" || echo "No cache image found (normal for first build)"

- task: Docker@2
  displayName: 'Build ${{ parameters.serviceName }}'
  retryCountOnTaskFailure: ${{ parameters.retryCount }}
  inputs:
    command: build
    repository: ${{ parameters.serviceName }}
    dockerfile: ${{ parameters.dockerfile }}
    buildContext: '${{ parameters.workingDirectory }}/${{ parameters.context }}'
    tags: ${{ parameters.semver }}
    buildOptions: --cache-from=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.semver }}

- task: AzureCLI@2
  displayName: 'Create Artifact'
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "=== Create Artifact ==="
      
      # Create artifact directory
      mkdir -p $(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}
      
      # Save Docker image
      docker save "${{ parameters.serviceName }}:${{ parameters.semver }}" -o "$(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}/image.tar"
      
      # Create build metadata
      cat > $(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}/build-info.json << EOF
      {
        "serviceName": "${{ parameters.serviceName }}",
        "imageTag": "${{ parameters.semver }}",
        "acrName": "${{ parameters.acrName }}",
        "fullImageName": "${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.semver }}",
        "buildId": "$(Build.BuildId)",
        "buildNumber": "$(Build.BuildNumber)"
      }
      EOF
      
      echo "✅ Artifact created for ${{ parameters.serviceName }}"

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}'
    ArtifactName: '${{ parameters.serviceName }}-docker-image'
    publishLocation: 'Container'