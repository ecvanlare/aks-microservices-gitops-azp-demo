# Service Build Template
# Builds Docker images for microservices with configuration management

parameters:
  # Build configuration
  vmImage: 'ubuntu-latest'
  packageMaxParallel: 4
  packageRetryCount: 2
  packageTimeoutMinutes: 30
  
  # Service configuration
  services: []  # List of service names or full service configurations
  serviceName: ''  # Single service name (alternative to services array)
  semver: ''  # Semantic version for tagging
  
  # Azure configuration
  acrName: $(ACR_NAME)  # Azure Container Registry name
  resourceGroup: $(RESOURCE_GROUP)  # Resource group name
  azureSubscription: $(AZURE_SUBSCRIPTION)  # Azure subscription service connection

steps:
  # Validate ACR access and permissions
  - task: AzureCLI@2
    displayName: 'Validate ACR Access'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Validate resource group and ACR existence
        if ! az group show -n "${{ parameters.resourceGroup }}" &>/dev/null; then
          echo "##vso[task.logissue type=error]Resource group ${{ parameters.resourceGroup }} not found"
          exit 1
        fi
        
        if ! az acr show -n "${{ parameters.acrName }}" -g "${{ parameters.resourceGroup }}" &>/dev/null; then
          echo "##vso[task.logissue type=error]ACR ${{ parameters.acrName }} not found in resource group ${{ parameters.resourceGroup }}"
          exit 1
        fi
        
        # Test ACR login
        if ! az acr login --name "${{ parameters.acrName }}" &>/dev/null; then
          echo "##vso[task.logissue type=error]Failed to login to ACR ${{ parameters.acrName }}"
          exit 1
        fi

  # Set service list for iteration
  - script: |
      echo "##vso[task.setvariable variable=ALL_SERVICES]cartservice,frontend,productcatalogservice,currencyservice,emailservice,paymentservice,shippingservice,recommendationservice,adservice,checkoutservice,shoppingassistantservice"
    displayName: 'Set Service List'
    name: SetServiceList

  # Set service configurations as variables
  - script: |
      # Set individual service configurations as JSON strings
      echo "##vso[task.setvariable variable=CARTSERVICE_CONFIG]{\"name\":\"cartservice\",\"path\":\"src/cartservice/\",\"dockerfile\":\"src/cartservice/src/Dockerfile\",\"context\":\"src/cartservice/src\",\"dependencies\":[],\"description\":\"Shopping cart service\"}"
      echo "##vso[task.setvariable variable=FRONTEND_CONFIG]{\"name\":\"frontend\",\"path\":\"src/frontend/\",\"dockerfile\":\"src/frontend/Dockerfile\",\"context\":\"src/frontend\",\"dependencies\":[],\"description\":\"Web frontend application\"}"
      echo "##vso[task.setvariable variable=PRODUCTCATALOGSERVICE_CONFIG]{\"name\":\"productcatalogservice\",\"path\":\"src/productcatalogservice/\",\"dockerfile\":\"src/productcatalogservice/Dockerfile\",\"context\":\"src/productcatalogservice\",\"dependencies\":[],\"description\":\"Product catalog service\"}"
      echo "##vso[task.setvariable variable=CURRENCYSERVICE_CONFIG]{\"name\":\"currencyservice\",\"path\":\"src/currencyservice/\",\"dockerfile\":\"src/currencyservice/Dockerfile\",\"context\":\"src/currencyservice\",\"dependencies\":[],\"description\":\"Currency conversion service\"}"
      echo "##vso[task.setvariable variable=EMAILSERVICE_CONFIG]{\"name\":\"emailservice\",\"path\":\"src/emailservice/\",\"dockerfile\":\"src/emailservice/Dockerfile\",\"context\":\"src/emailservice\",\"dependencies\":[],\"description\":\"Email notification service\"}"
      echo "##vso[task.setvariable variable=PAYMENTSERVICE_CONFIG]{\"name\":\"paymentservice\",\"path\":\"src/paymentservice/\",\"dockerfile\":\"src/paymentservice/Dockerfile\",\"context\":\"src/paymentservice\",\"dependencies\":[],\"description\":\"Payment processing service\"}"
      echo "##vso[task.setvariable variable=SHIPPINGSERVICE_CONFIG]{\"name\":\"shippingservice\",\"path\":\"src/shippingservice/\",\"dockerfile\":\"src/shippingservice/Dockerfile\",\"context\":\"src/shippingservice\",\"dependencies\":[],\"description\":\"Shipping calculation service\"}"
      echo "##vso[task.setvariable variable=RECOMMENDATIONSERVICE_CONFIG]{\"name\":\"recommendationservice\",\"path\":\"src/recommendationservice/\",\"dockerfile\":\"src/recommendationservice/Dockerfile\",\"context\":\"src/recommendationservice\",\"dependencies\":[\"productcatalogservice\"],\"description\":\"Product recommendation service\"}"
      echo "##vso[task.setvariable variable=ADSERVICE_CONFIG]{\"name\":\"adservice\",\"path\":\"src/adservice/\",\"dockerfile\":\"src/adservice/Dockerfile\",\"context\":\"src/adservice\",\"dependencies\":[],\"description\":\"Advertisement service\"}"
      echo "##vso[task.setvariable variable=CHECKOUTSERVICE_CONFIG]{\"name\":\"checkoutservice\",\"path\":\"src/checkoutservice/\",\"dockerfile\":\"src/checkoutservice/Dockerfile\",\"context\":\"src/checkoutservice\",\"dependencies\":[\"cartservice\",\"paymentservice\"],\"description\":\"Checkout processing service\"}"
      echo "##vso[task.setvariable variable=SHOPPINGASSISTANTSERVICE_CONFIG]{\"name\":\"shoppingassistantservice\",\"path\":\"src/shoppingassistantservice/\",\"dockerfile\":\"src/shoppingassistantservice/Dockerfile\",\"context\":\"src/shoppingassistantservice\",\"dependencies\":[],\"description\":\"Shopping assistant service\"}"
    displayName: 'Set Service Definitions'
    name: SetServiceDefinitions

  # Build single service
  - ${{ if ne(parameters.serviceName, '') }}:
    - script: |
        # Get service config from variables set by service-definitions template
        SERVICE_UPPER=$(echo "${{ parameters.serviceName }}" | tr '[:lower:]' '[:upper:]')
        CONFIG_VAR="${SERVICE_UPPER}_CONFIG"
        CONFIG_VALUE="${!CONFIG_VAR}"
        
        # Extract dockerfile and context from JSON config
        DOCKERFILE=$(echo "$CONFIG_VALUE" | grep -o '"dockerfile":"[^"]*"' | cut -d'"' -f4)
        CONTEXT=$(echo "$CONFIG_VALUE" | grep -o '"context":"[^"]*"' | cut -d'"' -f4)
        
        # Set job-level variables for the template
        echo "##vso[task.setvariable variable=DOCKERFILE_PATH;isOutput=true]$DOCKERFILE"
        echo "##vso[task.setvariable variable=CONTEXT_PATH;isOutput=true]$CONTEXT"
      displayName: 'Extract Service Config for ${{ parameters.serviceName }}'
      name: ExtractConfig

    - template: docker-build.yml
      parameters:
        serviceName: ${{ parameters.serviceName }}
        dockerfile: $(ExtractConfig.DOCKERFILE_PATH)
        context: $(ExtractConfig.CONTEXT_PATH)
        retryCount: ${{ parameters.packageRetryCount }}
        semver: ${{ parameters.semver }}

  # Build multiple services
  - ${{ if ne(parameters.services, '') }}:
    - ${{ each service in parameters.services }}:
      - script: |
          # Get service config from variables set by service-definitions template
          SERVICE_UPPER=$(echo "${{ service.name }}" | tr '[:lower:]' '[:upper:]')
          CONFIG_VAR="${SERVICE_UPPER}_CONFIG"
          CONFIG_VALUE="${!CONFIG_VAR}"
          
          # Extract dockerfile and context from JSON config
          DOCKERFILE=$(echo "$CONFIG_VALUE" | grep -o '"dockerfile":"[^"]*"' | cut -d'"' -f4)
          CONTEXT=$(echo "$CONFIG_VALUE" | grep -o '"context":"[^"]*"' | cut -d'"' -f4)
          
          # Set job-level variables for the template
          echo "##vso[task.setvariable variable=DOCKERFILE_PATH;isOutput=true]$DOCKERFILE"
          echo "##vso[task.setvariable variable=CONTEXT_PATH;isOutput=true]$CONTEXT"
        displayName: 'Extract Config for ${{ service.name }}'
        name: ExtractConfig${{ service.name }}

      - template: docker-build.yml
        parameters:
          serviceName: ${{ service.name }}
          dockerfile: $(ExtractConfig${{ service.name }}.DOCKERFILE_PATH)
          context: $(ExtractConfig${{ service.name }}.CONTEXT_PATH)
          retryCount: ${{ parameters.packageRetryCount }}
          semver: ${{ parameters.semver }} 