parameters:
  - name: semver
    type: string
    default: ''
  - name: gitopsRepoUrl
    type: string
    default: $(GITOPS_REPO_URL)
  - name: gitopsBranch
    type: string
    default: $(GITOPS_BRANCH)
  - name: prTitle
    type: string
    default: 'Update Image Tags for All Services'
  - name: prDescription
    type: string
    default: 'Automatically created PR to update image tags for all built services'

steps:
- task: PowerShell@2
  displayName: 'Update GitOps values.yaml with new image tags'
  inputs:
    targetType: 'inline'
    script: |
      param(
        [string]$Semver,
        [string]$GitOpsRepoUrl,
        [string]$GitOpsBranch,
        [string]$PrTitle,
        [string]$PrDescription
      )
      
      Write-Host "Updating GitOps values.yaml with new image tags: $Semver"
      
      try {
        # Clone the GitOps repository
        $repoName = ($GitOpsRepoUrl -split '/')[-1] -replace '\.git$', ''
        Write-Host "Cloning repository: $repoName"
        git clone $GitOpsRepoUrl
        cd $repoName
        
        # Create a new branch for the PR
        $branchName = "update-image-tags-$Semver"
        Write-Host "Creating branch: $branchName"
        git checkout -b $branchName
        
        # Read the current values.yaml
        $valuesPath = "gitops/helm-charts/app-chart/values.yaml"
        Write-Host "Reading values file: $valuesPath"
        $values = Get-Content $valuesPath -Raw
        
        # Define all possible services
        $allServices = @(
          'frontend',
          'cartservice', 
          'productcatalogservice',
          'currencyservice',
          'emailservice',
          'paymentservice',
          'shippingservice',
          'recommendationservice',
          'adservice',
          'checkoutservice',
          'shoppingassistantservice'
        )
        
        $updatedServices = @()
        
        # Update image tags for all services
        foreach ($service in $allServices) {
          # Look for the pattern: serviceName:\n  enabled: true\n  ...\n  image:\n    repository: serviceName\n    tag: oldTag
          $pattern = "(?s)($service:\s*\n\s+enabled:\s+true\s*\n\s+.*?\n\s+image:\s*\n\s+repository:\s+$service\s*\n\s+tag:\s+)([^\s\n]+)"
          $replacement = "`$1$Semver"
          $newValues = $values -replace $pattern, $replacement
          
          if ($newValues -ne $values) {
            $updatedServices += $service
            $values = $newValues
            Write-Host "Updated $service image tag to $Semver"
          } else {
            Write-Host "No changes for $service (might be disabled or pattern didn't match)"
          }
        }
        
        if ($updatedServices.Count -eq 0) {
          Write-Host "Warning: No services were updated. Check the values.yaml structure."
          exit 1
        }
        
        # Write the updated values.yaml
        Set-Content $valuesPath $values
        Write-Host "Updated values.yaml with new image tags for: $($updatedServices -join ', ')"
        
        # Show the diff
        git diff $valuesPath
        
        # Commit and push the changes
        git add $valuesPath
        git config user.email "azure-pipelines@ecvlsolutions.com"
        git config user.name "Azure Pipelines"
        git commit -m "Update image tags to $Semver for: $($updatedServices -join ', ')"
        git push origin $branchName
        
        # Create the PR using GitHub REST API
        $headers = @{
          "Authorization" = "token $env:GITHUB_TOKEN"
          "Accept" = "application/vnd.github.v3+json"
        }
        
        $body = @{
          title = "$PrTitle - $Semver"
          body = "$PrDescription`n`n- New Image Tag: $Semver`n- Updated Services: $($updatedServices -join ', ')`n- Branch: $branchName`n- Build: $(Build.BuildNumber)"
          head = $branchName
          base = $GitOpsBranch
        } | ConvertTo-Json
        
        $apiUrl = "https://api.github.com/repos/ecvanlare/$repoName/pulls"
        Write-Host "Creating PR via GitHub API..."
        $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $body
        
        Write-Host "Created PR: $($response.html_url)"
        Write-Host "##vso[task.setvariable variable=PR_URL]$($response.html_url)"
        Write-Host "##vso[task.setvariable variable=PR_NUMBER]$($response.number)"
        Write-Host "##vso[task.setvariable variable=UPDATED_SERVICES]$($updatedServices -join ',')"
        
      } catch {
        Write-Host "Error creating PR: $($_.Exception.Message)"
        Write-Host "Stack trace: $($_.ScriptStackTrace)"
        exit 1
      }
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN) 