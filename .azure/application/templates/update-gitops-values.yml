# Update GitOps Values Template
# Updates Helm chart values.yaml with new image tags for built services

parameters:
  semver: ''  # Required: Semantic version for image tags
  builtServices: ''  # Required: Space-separated list of services that were built
  gitopsRepoUrl: ''  # Required: GitOps repository URL
  gitopsBranch: ''  # Required: GitOps repository branch
  prTitle: ''  # Required: PR title
  prDescription: ''  # Required: PR description

steps:
  - checkout: self
    fetchDepth: 0

  - script: |
      echo "=== Update GitOps Values ==="
      echo "Semver: ${{ parameters.semver }}"
      echo "Built services: ${{ parameters.builtServices }}"
      echo "GitOps repo: ${{ parameters.gitopsRepoUrl }}"
      echo "GitOps branch: ${{ parameters.gitopsBranch }}"
      echo "SSH key available: $([ -n "$AZURE_DEVOPS_SSH_KEY" ] && echo "YES" || echo "NO")"

      # Setup SSH key for repository access
      echo "Setting up SSH authentication..."
      mkdir -p ~/.ssh
      
      # Write SSH key with proper formatting
      echo "$AZURE_DEVOPS_SSH_KEY" > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      
      # Add GitHub to known_hosts
      echo "Adding GitHub to known_hosts..."
      ssh-keyscan github.com >> ~/.ssh/known_hosts
      
      # Start SSH agent and add key
      echo "Starting SSH agent..."
      eval $(ssh-agent -s)
      ssh-add ~/.ssh/id_rsa
      
      # Test SSH connection
      echo "Testing SSH connection to GitHub..."
      ssh -T git@github.com || true

      # Install GitHub CLI if not available
      if ! command -v gh &> /dev/null; then
        echo "Installing GitHub CLI..."
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        apt update && apt install -y gh
      fi

      # Clone GitOps repository using SSH
      echo "Cloning GitOps repository using SSH..."
      git clone --branch "${{ parameters.gitopsBranch }}" "${{ parameters.gitopsRepoUrl }}" gitops-repo
      cd gitops-repo

      # Update values.yaml for each built service
      VALUES_FILE="helm-charts/app-chart/values.yaml"
      
      if [ ! -f "$VALUES_FILE" ]; then
        echo "‚ùå Error: $VALUES_FILE not found"
        echo "Available files in gitops-repo:"
        find . -name "*.yaml" -o -name "*.yml" | head -10
        exit 1
      fi

      echo "Updating $VALUES_FILE..."
      
      # Convert space-separated services to array
      IFS=' ' read -ra SERVICES <<< "${{ parameters.builtServices }}"
      
      for service in "${SERVICES[@]}"; do
        if [ -n "$service" ]; then
          echo "Updating image tag for $service to ${{ parameters.semver }}"
          
          # Update the image tag for the specific service
          # Pattern: service_name: -> find the image.tag line within that service block
          sed -i "/^${service}:/,/^[a-zA-Z]/ s/^\([[:space:]]*tag:[[:space:]]*\).*/\1\"${{ parameters.semver }}\"/" "$VALUES_FILE"
        fi
      done

      # Show the updated values
      echo "Updated values.yaml:"
      cat "$VALUES_FILE"

      # Commit and push changes
      git config user.email "azure-pipeline@example.com"
      git config user.name "Azure Pipeline"
      
      git add "$VALUES_FILE"
      git commit -m "Update image tags to ${{ parameters.semver }} for services: ${{ parameters.builtServices }}"
      
      # Push changes using SSH
      echo "Pushing changes using SSH..."
      git push origin "${{ parameters.gitopsBranch }}"
      
      # Note: PR creation requires GitHub token, not SSH key
      # For now, we'll skip automatic PR creation and provide manual link
      echo "üìù Changes pushed successfully!"
      echo "To create a PR, visit: https://github.com/$(echo "${{ parameters.gitopsRepoUrl }}" | sed 's|git@github.com:||' | sed 's|.git||')/compare/main...${{ parameters.gitopsBranch }}"
      echo ""
      echo "Or add GITHUB_PAT to your variable group for automatic PR creation"

      echo "‚úÖ GitOps values updated successfully"
    displayName: 'Update GitOps Values and Create PR'
    env:
      AZURE_DEVOPS_SSH_KEY: $(AZURE_DEVOPS_SSH_KEY)