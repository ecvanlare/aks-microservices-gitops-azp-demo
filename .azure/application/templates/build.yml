# Build Tasks Template
# Contains all build-related functionality in one organized file

parameters:
  # Build configuration
  vmImage: 'ubuntu-latest'
  packageMaxParallel: 4
  packageRetryCount: 2
  packageTimeoutMinutes: 30
  
  # Service configuration
  services: []  # List of service names or full service configurations
  serviceName: ''  # Single service name (alternative to services array)
  semver: ''  # Semantic version for tagging
  
  # Azure configuration
  acrName: ''  # Required: ACR name
  resourceGroup: ''  # Required: Resource group name
  azureSubscription: ''  # Required: Azure subscription service connection

steps:
  # ========================================
  # SECTION 1: ACR VALIDATION
  # ========================================
  - task: AzureCLI@2
    displayName: 'Validate ACR Access'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "=== Validating ACR: ${{ parameters.acrName }} in Resource Group: ${{ parameters.resourceGroup }} ==="
        
        # Validate resource group and ACR existence
        if ! az group show -n "${{ parameters.resourceGroup }}" &>/dev/null; then
          echo "##vso[task.logissue type=error]Resource group ${{ parameters.resourceGroup }} not found"
          az group list --query "[].name" -o tsv
          exit 1
        fi
        
        if ! az acr show -n "${{ parameters.acrName }}" -g "${{ parameters.resourceGroup }}" &>/dev/null; then
          echo "##vso[task.logissue type=error]ACR ${{ parameters.acrName }} not found in resource group ${{ parameters.resourceGroup }}"
          exit 1
        fi
        
        # Test ACR login
        if ! az acr login --name "${{ parameters.acrName }}" &>/dev/null; then
          echo "##vso[task.logissue type=error]Failed to login to ACR ${{ parameters.acrName }}"
          exit 1
        fi
        
        echo "âœ… ACR ${{ parameters.acrName }} is accessible and ready for builds"

  # ========================================
  # SECTION 2: SERVICE CONFIGURATION
  # ========================================
  # Include centralized service definitions
  - template: service-definitions.yml

  # ========================================
  # SECTION 3: SINGLE SERVICE BUILD
  # ========================================
  - ${{ if ne(parameters.serviceName, '') }}:
    - script: |
        # Get service config from variables set by service-definitions template
        SERVICE_UPPER=$(echo "${{ parameters.serviceName }}" | tr '[:lower:]' '[:upper:]')
        CONFIG_VAR="${SERVICE_UPPER}_CONFIG"
        CONFIG_VALUE="${!CONFIG_VAR}"
        
        # Extract dockerfile and context from JSON config
        DOCKERFILE=$(echo "$CONFIG_VALUE" | grep -o '"dockerfile":"[^"]*"' | cut -d'"' -f4)
        CONTEXT=$(echo "$CONFIG_VALUE" | grep -o '"context":"[^"]*"' | cut -d'"' -f4)
        
        # Set job-level variables for the template
        echo "##vso[task.setvariable variable=DOCKERFILE_PATH;isOutput=true]$DOCKERFILE"
        echo "##vso[task.setvariable variable=CONTEXT_PATH;isOutput=true]$CONTEXT"
        
        echo "Building service: ${{ parameters.serviceName }}"
        echo "  Dockerfile: $DOCKERFILE"
        echo "  Context: $CONTEXT"
      displayName: 'Extract Service Config for ${{ parameters.serviceName }}'
      name: ExtractConfig

    - template: docker/docker-build.yml
      parameters:
        acrName: ${{ parameters.acrName }}
        resourceGroup: ${{ parameters.resourceGroup }}
        serviceName: ${{ parameters.serviceName }}
        dockerfile: $(ExtractConfig.DOCKERFILE_PATH)
        context: $(ExtractConfig.CONTEXT_PATH)
        retryCount: ${{ parameters.packageRetryCount }}
        azureSubscription: ${{ parameters.azureSubscription }}
        tags: ${{ parameters.semver }}

  # ========================================
  # SECTION 4: MULTIPLE SERVICES BUILD
  # ========================================
  - ${{ if ne(parameters.services, '') }}:
    - ${{ each service in parameters.services }}:
      - script: |
          # Get service config from variables set by service-definitions template
          SERVICE_UPPER=$(echo "${{ service.name }}" | tr '[:lower:]' '[:upper:]')
          CONFIG_VAR="${SERVICE_UPPER}_CONFIG"
          CONFIG_VALUE="${!CONFIG_VAR}"
          
          # Extract dockerfile and context from JSON config
          DOCKERFILE=$(echo "$CONFIG_VALUE" | grep -o '"dockerfile":"[^"]*"' | cut -d'"' -f4)
          CONTEXT=$(echo "$CONFIG_VALUE" | grep -o '"context":"[^"]*"' | cut -d'"' -f4)
          
          # Set job-level variables for the template
          echo "##vso[task.setvariable variable=DOCKERFILE_PATH;isOutput=true]$DOCKERFILE"
          echo "##vso[task.setvariable variable=CONTEXT_PATH;isOutput=true]$CONTEXT"
          
          echo "Building service: ${{ service.name }}"
          echo "  Dockerfile: $DOCKERFILE"
          echo "  Context: $CONTEXT"
        displayName: 'Extract Config for ${{ service.name }}'
        name: ExtractConfig${{ service.name }}

      - template: docker/docker-build.yml
        parameters:
          acrName: ${{ parameters.acrName }}
          resourceGroup: ${{ parameters.resourceGroup }}
          serviceName: ${{ service.name }}
          dockerfile: $(ExtractConfig${{ service.name }}.DOCKERFILE_PATH)
          context: $(ExtractConfig${{ service.name }}.CONTEXT_PATH)
          retryCount: ${{ parameters.packageRetryCount }}
          azureSubscription: ${{ parameters.azureSubscription }}
          tags: ${{ parameters.semver }} 