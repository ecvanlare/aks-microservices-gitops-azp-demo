# Update Application Values Template
# Updates Helm chart values with new image tags and triggers Argo CD sync

parameters:
  # Application configuration
  appNamespace: 'online-boutique'
  appReleaseName: 'online-boutique'
  chartPath: 'gitops/helm-charts/app-chart'
  valuesFile: 'values.yaml'
  
  # Image configuration
  acrName: $(ACR_NAME)
  semver: ''
  
  # Argo CD configuration
  argocdNamespace: 'argocd'
  gitopsRepoUrl: $(GITOPS_REPO_URL)
  gitopsBranch: $(GITOPS_BRANCH)
  
  # Azure configuration
  resourceGroup: $(RESOURCE_GROUP)
  azureSubscription: $(AZURE_SUBSCRIPTION)

steps:
  # ========================================
  # SECTION 1: SETUP AND AUTHENTICATION
  # ========================================
  - checkout: self
    fetchDepth: 0

  - task: AzureCLI@2
    displayName: 'Get AKS Credentials'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks get-credentials -n $(AKS_CLUSTER_NAME) -g $(RESOURCE_GROUP) --overwrite-existing
        kubelogin convert-kubeconfig -l azurecli

  # ========================================
  # SECTION 2: PREPARE IMAGE TAGS
  # ========================================
  - task: AzureCLI@2
    displayName: 'Prepare Image Tags'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        
        # Function to get best available tag
        get_best_tag() {
          local service_name=$1
          local tag=$(az acr repository show-tags -n $(ACR_NAME) --repository $service_name --orderby time_desc --top 1 --query '[0]' -o tsv 2>/dev/null)
          echo "${tag:-latest}"
        }
        
        # Check if specific SEMVER exists, otherwise get best tag
        check_tag() {
          local service_name=$1
          local semver=$2
          local exists=$(az acr repository show-tags -n $(ACR_NAME) --repository $service_name --query "[?contains(@, '$semver')]" --output tsv 2>/dev/null)
          if [ -n "$exists" ]; then
            echo "$semver"
          else
            get_best_tag "$service_name"
          fi
        }
        
        # Get tags for all services
        if [ -n "${{ parameters.semver }}" ]; then
          AD_TAG=$(check_tag "adservice" "${{ parameters.semver }}")
          CART_TAG=$(check_tag "cartservice" "${{ parameters.semver }}")
          CHECKOUT_TAG=$(check_tag "checkoutservice" "${{ parameters.semver }}")
          CURRENCY_TAG=$(check_tag "currencyservice" "${{ parameters.semver }}")
          EMAIL_TAG=$(check_tag "emailservice" "${{ parameters.semver }}")
          FRONTEND_TAG=$(check_tag "frontend" "${{ parameters.semver }}")
          PAYMENT_TAG=$(check_tag "paymentservice" "${{ parameters.semver }}")
          PRODUCT_TAG=$(check_tag "productcatalogservice" "${{ parameters.semver }}")
          RECOMMENDATION_TAG=$(check_tag "recommendationservice" "${{ parameters.semver }}")
          SHIPPING_TAG=$(check_tag "shippingservice" "${{ parameters.semver }}")
          SHOPPING_ASSISTANT_TAG=$(check_tag "shoppingassistantservice" "${{ parameters.semver }}")
        else
          AD_TAG=$(get_best_tag "adservice")
          CART_TAG=$(get_best_tag "cartservice")
          CHECKOUT_TAG=$(get_best_tag "checkoutservice")
          CURRENCY_TAG=$(get_best_tag "currencyservice")
          EMAIL_TAG=$(get_best_tag "emailservice")
          FRONTEND_TAG=$(get_best_tag "frontend")
          PAYMENT_TAG=$(get_best_tag "paymentservice")
          PRODUCT_TAG=$(get_best_tag "productcatalogservice")
          RECOMMENDATION_TAG=$(get_best_tag "recommendationservice")
          SHIPPING_TAG=$(get_best_tag "shippingservice")
          SHOPPING_ASSISTANT_TAG=$(get_best_tag "shoppingassistantservice")
        fi
        
        # Show tags being used
        echo "Using image tags:"
        echo "  adservice: $AD_TAG"
        echo "  cartservice: $CART_TAG"
        echo "  checkoutservice: $CHECKOUT_TAG"
        echo "  currencyservice: $CURRENCY_TAG"
        echo "  emailservice: $EMAIL_TAG"
        echo "  frontend: $FRONTEND_TAG"
        echo "  paymentservice: $PAYMENT_TAG"
        echo "  productcatalogservice: $PRODUCT_TAG"
        echo "  recommendationservice: $RECOMMENDATION_TAG"
        echo "  shippingservice: $SHIPPING_TAG"
        echo "  shoppingassistantservice: $SHOPPING_ASSISTANT_TAG"
        
        # Create values override
        cat > values-override.yaml << EOF
        global:
          image:
            registry: $(ACR_NAME).azurecr.io
          imagePullPolicy: Always
        
        ingress:
          host: "$(DOMAIN)"
          email: "$(EMAIL)"
        adservice:
          image:
            tag: $AD_TAG
        cartservice:
          image:
            tag: $CART_TAG
        checkoutservice:
          image:
            tag: $CHECKOUT_TAG
        currencyservice:
          image:
            tag: $CURRENCY_TAG
        emailservice:
          image:
            tag: $EMAIL_TAG
        frontend:
          image:
            tag: $FRONTEND_TAG
        paymentservice:
          image:
            tag: $PAYMENT_TAG
        productcatalogservice:
          image:
            tag: $PRODUCT_TAG
        recommendationservice:
          image:
            tag: $RECOMMENDATION_TAG
        shippingservice:
          image:
            tag: $SHIPPING_TAG
        shoppingassistantservice:
          image:
            tag: $SHOPPING_ASSISTANT_TAG
        EOF

  # ========================================
  # SECTION 3: UPDATE GITOPS VALUES
  # ========================================
  - task: AzureCLI@2
    displayName: 'Update GitOps Values'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        
        echo "Updating GitOps values with new image tags..."
        
        # Update the values.yaml in the GitOps repository
        # This would typically involve:
        # 1. Cloning the GitOps repo
        # 2. Updating the values file
        # 3. Committing and pushing changes
        # 4. Triggering Argo CD sync
        
        # For now, we'll create a patch to apply to the Argo CD application
        cat > app-patch.yaml << EOF
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: online-boutique
          namespace: argocd
        spec:
          source:
            helm:
              values: |
                global:
                  image:
                    registry: $(ACR_NAME).azurecr.io
                  imagePullPolicy: Always
                
                ingress:
                  host: "$(DOMAIN)"
                  email: "$(EMAIL)"
                adservice:
                  image:
                    tag: $AD_TAG
                cartservice:
                  image:
                    tag: $CART_TAG
                checkoutservice:
                  image:
                    tag: $CHECKOUT_TAG
                currencyservice:
                  image:
                    tag: $CURRENCY_TAG
                emailservice:
                  image:
                    tag: $EMAIL_TAG
                frontend:
                  image:
                    tag: $FRONTEND_TAG
                paymentservice:
                  image:
                    tag: $PAYMENT_TAG
                productcatalogservice:
                  image:
                    tag: $PRODUCT_TAG
                recommendationservice:
                  image:
                    tag: $RECOMMENDATION_TAG
                shippingservice:
                  image:
                    tag: $SHIPPING_TAG
                shoppingassistantservice:
                  image:
                    tag: $SHOPPING_ASSISTANT_TAG
        EOF
        
        echo "Application patch created"

  # ========================================
  # SECTION 4: APPLY ARGO CD UPDATE
  # ========================================
  - task: AzureCLI@2
    displayName: 'Apply Argo CD Update'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        
        echo "Applying Argo CD application update..."
        
        # Apply the patch to update the application
        kubectl patch application online-boutique -n argocd --patch-file app-patch.yaml --type=merge
        
        # Trigger sync
        kubectl patch application online-boutique -n argocd --type='merge' -p='{"spec":{"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}'
        
        echo "Argo CD application updated and sync triggered"

  # ========================================
  # SECTION 5: VERIFY DEPLOYMENT
  # ========================================
  - task: AzureCLI@2
    displayName: 'Verify Argo CD Deployment'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        
        echo "=== VERIFYING ARGO CD DEPLOYMENT ==="
        
        # Wait for application to be synced
        kubectl wait --for=condition=ready application online-boutique -n argocd --timeout=300s
        
        # Check application status
        echo "Application status:"
        kubectl get application online-boutique -n argocd -o yaml
        
        # Wait for pods to be ready
        echo "Waiting for pods to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=online-boutique -n ${{ parameters.appNamespace }} --timeout=300s
        
        echo "Pod status:"
        kubectl get pods -n ${{ parameters.appNamespace }} -l app.kubernetes.io/instance=online-boutique
        
        echo "âœ… Argo CD deployment verification completed"

  # ========================================
  # SECTION 6: OUTPUT DEPLOYMENT INFO
  # ========================================
  - script: |
      echo "##vso[task.logissue type=warning]Argo CD Deployment Summary:"
      echo "##vso[task.logissue type=warning]Application: online-boutique"
      echo "##vso[task.logissue type=warning]Namespace: ${{ parameters.appNamespace }}"
      echo "##vso[task.logissue type=warning]Using images from ACR: ${{ parameters.acrName }}.azurecr.io"
      if [ -n "${{ parameters.semver }}" ]; then
        echo "##vso[task.logissue type=warning]Deployed SEMVER: ${{ parameters.semver }}"
      else
        echo "##vso[task.logissue type=warning]Deployed latest tags"
      fi
      echo "##vso[task.logissue type=warning]To access Argo CD: kubectl port-forward svc/argocd-server 8080:80 -n ${{ parameters.argocdNamespace }}"
    displayName: 'Deployment Summary' 