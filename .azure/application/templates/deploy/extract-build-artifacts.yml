# Extract Build Artifacts Template
# Extracts semver and built services from build pipeline artifacts

parameters:
  - name: artifactPath
    displayName: 'Artifact Path'
    type: string
    default: '$(Pipeline.Workspace)/build-pipeline/build-artifacts'
  - name: semverOutputName
    displayName: 'Semver Output Variable Name'
    type: string
    default: 'BUILD_SEMVER'
  - name: servicesOutputName
    displayName: 'Services Output Variable Name'
    type: string
    default: 'BUILT_SERVICES'

steps:
  # Extract semver from build artifacts
  - script: |
      SEMVER_FILE="${{ parameters.artifactPath }}/semver.txt"
      if [ -f "$SEMVER_FILE" ]; then
        SEMVER=$(cat "$SEMVER_FILE")
        echo "‚úÖ Using semver from build artifacts: $SEMVER"
        echo "##vso[task.setvariable variable=${{ parameters.semverOutputName }};isOutput=true]$SEMVER"
      else
        echo "‚ùå No semver artifact found from build pipeline"
        echo "##vso[task.logissue type=error]Build artifacts not found - deployment cannot proceed"
        exit 1
      fi
    displayName: 'Extract Build Semver'
    name: ExtractBuildSemver
    
  # Read built services list
  - script: |
      SERVICES_FILE="${{ parameters.artifactPath }}/services-to-deploy.txt"
      if [ -f "$SERVICES_FILE" ]; then
        echo "üì¶ Built services from CI pipeline:"
        cat "$SERVICES_FILE"
        echo "##vso[task.setvariable variable=${{ parameters.servicesOutputName }};isOutput=true]$(cat $SERVICES_FILE)"
      else
        echo "‚ùå No built services list found from build pipeline"
        echo "##vso[task.logissue type=error]Build artifacts not found - deployment cannot proceed"
        exit 1
      fi
    displayName: 'Read Built Services'
    name: ReadBuiltServices 