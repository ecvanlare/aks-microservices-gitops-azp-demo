# Deploy Tasks Template
# Contains all deployment-related functionality in one organized file

parameters:
  # User-configurable deployment settings
  namespace: $(NAMESPACE)
  releaseName: $(RELEASE_NAME)
  includeVerification: true
  semver: ''  # Semantic version for deployment (passed from pipeline)


  # Deployment configuration
  vmImage: 'ubuntu-22.04'
  podReadyTimeout: 300
  clusterName: $(AKS_CLUSTER_NAME)

  # Azure configuration
  acrName: $(ACR_NAME)  # Required: ACR name
  resourceGroup: $(RESOURCE_GROUP)  # Required: Resource group name
  azureSubscription: $(AZURE_SUBSCRIPTION)  # Required: Azure subscription service connection
  
  # Argo CD configuration
  useArgoCD: true
  argocdNamespace: 'argocd'
  gitopsRepoUrl: $(GITOPS_REPO_URL)
  gitopsBranch: $(GITOPS_BRANCH)

steps:
  # ========================================
  # SECTION 1: DEPLOYMENT METHOD SELECTION
  # ========================================
  - checkout: self
    fetchDepth: 0

  # ========================================
  # SECTION 2: ARGO CD DEPLOYMENT
  # ========================================
  - ${{ if eq(parameters.useArgoCD, 'true') }}:
    - template: templates/argocd/argocd-deploy.yml
      parameters:
        deployArgoCD: true
        deployInfrastructure: true
        createGitOpsApps: true
        updateApplication: true
        argocdNamespace: ${{ parameters.argocdNamespace }}
                      gitopsRepoUrl: ${{ parameters.gitopsRepoUrl }}
        gitopsBranch: ${{ parameters.gitopsBranch }}
        semver: ${{ parameters.semver }}
        acrName: ${{ parameters.acrName }}
        resourceGroup: ${{ parameters.resourceGroup }}
        azureSubscription: ${{ parameters.azureSubscription }}



  # ========================================
  # SECTION 3: DEPLOYMENT VERIFICATION
  # ========================================
  - ${{ if eq(parameters.includeVerification, 'true') }}:
    - task: AzureCLI@2
      displayName: 'Verify Deployment Status'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          
          # Get AKS credentials and configure kubelogin
          az aks get-credentials -n $(AKS_CLUSTER_NAME) -g $(RESOURCE_GROUP) --overwrite-existing
          kubelogin convert-kubeconfig -l azurecli
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=${{ parameters.releaseName }} -n ${{ parameters.namespace }} --timeout=${{ parameters.podReadyTimeout }}s
          
          # Display deployment status
          kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          kubectl get services -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          kubectl get deployments -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
          
          # Show image tags
          kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }} -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].image}{"\n"}{end}' 