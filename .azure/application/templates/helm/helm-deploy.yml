parameters:
  # External dependencies
  clusterName: ''
  resourceGroup: ''
  azureSubscription: ''
  # Optional parameters with defaults
  namespace: 'online-boutique'
  chartPath: 'online-boutique-chart'
  releaseName: 'online-boutique'
  valuesFile: 'values.yaml'
  helmVersion: '3.12.0'
  helmTimeout: '10m'
  semver: ''  # Semantic version for deployment (passed from deploy template)

steps:
- task: AzureCLI@2
  displayName: 'Setup AKS Access'
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -e
      az aks get-credentials -n ${{ parameters.clusterName }} -g ${{ parameters.resourceGroup }} --overwrite-existing
      kubectl create namespace ${{ parameters.namespace }} --dry-run=client -o yaml | kubectl apply -f -

- task: HelmInstaller@1
  displayName: 'Install Helm'
  inputs:
    helmVersion: ${{ parameters.helmVersion }}

- script: |
    set -e
    helm lint ${{ parameters.chartPath }}
    helm dependency build ${{ parameters.chartPath }}
  displayName: 'Validate Chart'

- task: AzureCLI@2
  displayName: 'Prepare Image Tags'
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -e
      
      # Function to get best available tag
      get_best_tag() {
        local service_name=$1
        local tag=$(az acr repository show-tags -n $(ACR_NAME) --repository $service_name --orderby time_desc --top 1 --query '[0]' -o tsv 2>/dev/null)
        echo "${tag:-latest}"
      }
      
      # Check if specific SEMVER exists, otherwise get best tag
      check_tag() {
        local service_name=$1
        local semver=$2
        local exists=$(az acr repository show-tags -n $(ACR_NAME) --repository $service_name --query "[?contains(@, '$semver')]" --output tsv 2>/dev/null)
        if [ -n "$exists" ]; then
          echo "$semver"
        else
          get_best_tag "$service_name"
        fi
      }
      
      # Get tags for all services
      if [ -n "${{ parameters.semver }}" ]; then
        AD_TAG=$(check_tag "adservice" "${{ parameters.semver }}")
        CART_TAG=$(check_tag "cartservice" "${{ parameters.semver }}")
        CHECKOUT_TAG=$(check_tag "checkoutservice" "${{ parameters.semver }}")
        CURRENCY_TAG=$(check_tag "currencyservice" "${{ parameters.semver }}")
        EMAIL_TAG=$(check_tag "emailservice" "${{ parameters.semver }}")
        FRONTEND_TAG=$(check_tag "frontend" "${{ parameters.semver }}")
        PAYMENT_TAG=$(check_tag "paymentservice" "${{ parameters.semver }}")
        PRODUCT_TAG=$(check_tag "productcatalogservice" "${{ parameters.semver }}")
        RECOMMENDATION_TAG=$(check_tag "recommendationservice" "${{ parameters.semver }}")
        SHIPPING_TAG=$(check_tag "shippingservice" "${{ parameters.semver }}")
        SHOPPING_ASSISTANT_TAG=$(check_tag "shoppingassistantservice" "${{ parameters.semver }}")
      else
        AD_TAG=$(get_best_tag "adservice")
        CART_TAG=$(get_best_tag "cartservice")
        CHECKOUT_TAG=$(get_best_tag "checkoutservice")
        CURRENCY_TAG=$(get_best_tag "currencyservice")
        EMAIL_TAG=$(get_best_tag "emailservice")
        FRONTEND_TAG=$(get_best_tag "frontend")
        PAYMENT_TAG=$(get_best_tag "paymentservice")
        PRODUCT_TAG=$(get_best_tag "productcatalogservice")
        RECOMMENDATION_TAG=$(get_best_tag "recommendationservice")
        SHIPPING_TAG=$(get_best_tag "shippingservice")
        SHOPPING_ASSISTANT_TAG=$(get_best_tag "shoppingassistantservice")
      fi
      
      # Show tags being used
      echo "Using image tags:"
      echo "  adservice: $AD_TAG"
      echo "  cartservice: $CART_TAG"
      echo "  checkoutservice: $CHECKOUT_TAG"
      echo "  currencyservice: $CURRENCY_TAG"
      echo "  emailservice: $EMAIL_TAG"
      echo "  frontend: $FRONTEND_TAG"
      echo "  paymentservice: $PAYMENT_TAG"
      echo "  productcatalogservice: $PRODUCT_TAG"
      echo "  recommendationservice: $RECOMMENDATION_TAG"
      echo "  shippingservice: $SHIPPING_TAG"
      echo "  shoppingassistantservice: $SHOPPING_ASSISTANT_TAG"
      
      # Create values override
      cat > values-override.yaml << EOF
      global:
        image:
          registry: $(ACR_NAME).azurecr.io
        imagePullPolicy: Always
      adservice:
        image:
          tag: $AD_TAG
      cartservice:
        image:
          tag: $CART_TAG
      checkoutservice:
        image:
          tag: $CHECKOUT_TAG
      currencyservice:
        image:
          tag: $CURRENCY_TAG
      emailservice:
        image:
          tag: $EMAIL_TAG
      frontend:
        image:
          tag: $FRONTEND_TAG
      paymentservice:
        image:
          tag: $PAYMENT_TAG
      productcatalogservice:
        image:
          tag: $PRODUCT_TAG
      recommendationservice:
        image:
          tag: $RECOMMENDATION_TAG
      shippingservice:
        image:
          tag: $SHIPPING_TAG
      shoppingassistantservice:
        image:
          tag: $SHOPPING_ASSISTANT_TAG
      EOF

- script: |
    set -e
    helm upgrade --install ${{ parameters.releaseName }} ${{ parameters.chartPath }} \
      --namespace ${{ parameters.namespace }} \
      --values ${{ parameters.chartPath }}/${{ parameters.valuesFile }} \
      --values values-override.yaml \
      --timeout ${{ parameters.helmTimeout }} \
      --wait \
      --atomic \
      --cleanup-on-fail
  displayName: 'Deploy with Helm'
  env:
    HELM_EXPERIMENTAL_OCI: 1

- script: |
    set -e
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=${{ parameters.releaseName }} -n ${{ parameters.namespace }} --timeout=300s
    kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }}
  displayName: 'Verify Deployment'

- script: |
    echo "Deployment completed successfully"
    echo "Release: ${{ parameters.releaseName }}"
    echo "Namespace: ${{ parameters.namespace }}"
    echo "Using images from ACR: ${{ parameters.acrName }}.azurecr.io"
    if [ -n "${{ parameters.semver }}" ]; then
      echo "Deployed SEMVER: ${{ parameters.semver }}"
    else
      echo "Deployed latest tags"
    fi
  displayName: 'Deployment Summary'