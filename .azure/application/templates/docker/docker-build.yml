parameters:
  acrName: ''  # Required: ACR name
  resourceGroup: ''  # Required: Resource group name
  serviceName: ''  # Required: Service name to build
  dockerfile: ''  # Required: Dockerfile path
  context: ''  # Required: Build context
  retryCount: 2  # Optional: Number of retries on failure
  azureSubscription: ''  # Required: Azure subscription service connection name
  tags: ''  # Optional: Image tags

steps:
- script: |
    echo "=== ACR Build Debug Information ==="
    echo "Service: ${{ parameters.serviceName }}"
    echo "ACR Name: ${{ parameters.acrName }}"
    echo "Resource Group: ${{ parameters.resourceGroup }}"
    echo "Dockerfile: ${{ parameters.dockerfile }}"
    echo "Context: ${{ parameters.context }}"
    echo "Tags: ${{ parameters.tags }}"
    echo "Azure Subscription: ${{ parameters.azureSubscription }}"
    echo "Retry Count: ${{ parameters.retryCount }}"
    echo "====================================="
    
    # Check if files exist
    echo "=== File Existence Check ==="
    if [ -f "${{ parameters.dockerfile }}" ]; then
      echo "✅ Dockerfile exists: ${{ parameters.dockerfile }}"
    else
      echo "❌ Dockerfile not found: ${{ parameters.dockerfile }}"
      exit 1
    fi
    
    if [ -d "$(System.DefaultWorkingDirectory)/${{ parameters.context }}" ]; then
      echo "✅ Build context exists: $(System.DefaultWorkingDirectory)/${{ parameters.context }}"
    else
      echo "❌ Build context not found: $(System.DefaultWorkingDirectory)/${{ parameters.context }}"
      exit 1
    fi
    
    # List context contents
    echo "=== Build Context Contents ==="
    ls -la "$(System.DefaultWorkingDirectory)/${{ parameters.context }}"
    
    # Check Docker version
    echo "=== Docker Version ==="
    docker --version
    
    # Check available disk space
    echo "=== Disk Space ==="
    df -h
  displayName: 'Debug Build Information'

- script: |
    echo "=== Docker Build Debug ==="
    echo "Building image locally: ${{ parameters.serviceName }}:${{ parameters.tags }}"
    
    # Check Docker daemon
    echo "Docker daemon status:"
    docker info --format "table {{.ServerVersion}}\t{{.OperatingSystem}}\t{{.KernelVersion}}"
    
    # Check available Docker images
    echo "Current Docker images:"
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
  displayName: 'Debug Docker Environment'

- task: Docker@2
  displayName: 'Build ${{ parameters.serviceName }} (Local Only)'
  retryCountOnTaskFailure: ${{ parameters.retryCount }}
  inputs:
    command: build
    repository: ${{ parameters.serviceName }}
    dockerfile: ${{ parameters.dockerfile }}
    buildContext: '$(System.DefaultWorkingDirectory)/${{ parameters.context }}'
    tags: ${{ parameters.tags }}
    buildOptions: --pull

- script: |
    echo "=== Build Verification ==="
    echo "Verifying image was built successfully..."
    
    # Check if image exists locally
    echo "Local Docker images:"
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep "${{ parameters.serviceName }}" || echo "No local images found"
    
    # Verify the specific image was built
    if docker images "${{ parameters.serviceName }}:${{ parameters.tags }}" --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep -q "${{ parameters.serviceName }}"; then
      echo "✅ Image ${{ parameters.serviceName }}:${{ parameters.tags }} built successfully"
    else
      echo "❌ Image ${{ parameters.serviceName }}:${{ parameters.tags }} not found locally"
      exit 1
    fi
    
    echo "=== Build Summary ==="
    echo "Service: ${{ parameters.serviceName }}"
    echo "Image: ${{ parameters.serviceName }}:${{ parameters.tags }}"
    echo "Build completed successfully!"
  displayName: 'Verify Build Success'

- script: |
    echo "Image built locally: ${{ parameters.serviceName }}:${{ parameters.tags }}"
    echo "Ready for security scan before pushing to ACR"
  displayName: 'Echo Built Image Tag for ${{ parameters.serviceName }}'