parameters:
  acrName: ''  # Required: ACR name
  resourceGroup: ''  # Required: Resource group name
  serviceName: ''  # Required: Service name to build
  dockerfile: ''  # Required: Dockerfile path
  context: ''  # Required: Build context
  retryCount: 2  # Optional: Number of retries on failure
  azureSubscription: ''  # Required: Azure subscription service connection name
  tags: ''  # Optional: Image tags

steps:
- script: |
    echo "=== ACR Build Debug Information ==="
    echo "Service: ${{ parameters.serviceName }}"
    echo "ACR Name: ${{ parameters.acrName }}"
    echo "Resource Group: ${{ parameters.resourceGroup }}"
    echo "Dockerfile: ${{ parameters.dockerfile }}"
    echo "Context: ${{ parameters.context }}"
    echo "Tags: ${{ parameters.tags }}"
    echo "Azure Subscription: ${{ parameters.azureSubscription }}"
    echo "Retry Count: ${{ parameters.retryCount }}"
    echo "====================================="
    
    # Check if files exist
    echo "=== File Existence Check ==="
    if [ -f "${{ parameters.dockerfile }}" ]; then
      echo "✅ Dockerfile exists: ${{ parameters.dockerfile }}"
    else
      echo "❌ Dockerfile not found: ${{ parameters.dockerfile }}"
      exit 1
    fi
    
    if [ -d "$(System.DefaultWorkingDirectory)/${{ parameters.context }}" ]; then
      echo "✅ Build context exists: $(System.DefaultWorkingDirectory)/${{ parameters.context }}"
    else
      echo "❌ Build context not found: $(System.DefaultWorkingDirectory)/${{ parameters.context }}"
      exit 1
    fi
    
    # List context contents
    echo "=== Build Context Contents ==="
    ls -la "$(System.DefaultWorkingDirectory)/${{ parameters.context }}"
    
    # Check Docker version
    echo "=== Docker Version ==="
    docker --version
    
    # Check available disk space
    echo "=== Disk Space ==="
    df -h
  displayName: 'Debug Build Information'

- task: AzureCLI@2
  displayName: 'Login to Azure Container Registry'
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "=== ACR Login Debug ==="
      echo "Logging into ACR: ${{ parameters.acrName }}"
      
      # Check current Azure context
      echo "Current Azure subscription:"
      az account show --query "{name:name, id:id}" --output table
      
      # Login to ACR
      if az acr login --name "${{ parameters.acrName }}"; then
        echo "✅ Successfully logged into ACR ${{ parameters.acrName }}"
      else
        echo "❌ Failed to login to ACR ${{ parameters.acrName }}"
        exit 1
      fi
      
      # Verify ACR access
      echo "ACR details:"
      az acr show -n "${{ parameters.acrName }}" -g "${{ parameters.resourceGroup }}" --query "{name:name, loginServer:loginServer, provisioningState:provisioningState}" --output table

- script: |
    echo "=== Docker Build Debug ==="
    echo "Building image: ${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.tags }}"
    
    # Check Docker daemon
    echo "Docker daemon status:"
    docker info --format "table {{.ServerVersion}}\t{{.OperatingSystem}}\t{{.KernelVersion}}"
    
    # Check available Docker images
    echo "Current Docker images:"
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
  displayName: 'Debug Docker Environment'

- task: Docker@2
  displayName: 'Build and Push ${{ parameters.serviceName }}'
  retryCountOnTaskFailure: ${{ parameters.retryCount }}
  inputs:
    command: buildAndPush
    repository: ${{ parameters.serviceName }}
    dockerfile: ${{ parameters.dockerfile }}
    buildContext: '$(System.DefaultWorkingDirectory)/${{ parameters.context }}'
    containerRegistry: ${{ parameters.acrName }}
    tags: ${{ parameters.tags }}
    buildOptions: --pull --cache-from type=registry,ref=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.tags }} --cache-to type=registry,ref=${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.tags }}

- script: |
    echo "=== Build Verification ==="
    echo "Verifying image was built and pushed successfully..."
    
    # Check if image exists locally
    echo "Local Docker images:"
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep "${{ parameters.serviceName }}" || echo "No local images found"
    
    # Verify image in ACR
    echo "Checking image in ACR..."
    if az acr repository show-tags -n "${{ parameters.acrName }}" --repository "${{ parameters.serviceName }}" --query "[?contains(@, '${{ parameters.tags }}')]" --output table; then
      echo "✅ Image ${{ parameters.serviceName }}:${{ parameters.tags }} found in ACR"
    else
      echo "❌ Image ${{ parameters.serviceName }}:${{ parameters.tags }} not found in ACR"
    fi
    
    echo "=== Build Summary ==="
    echo "Service: ${{ parameters.serviceName }}"
    echo "Image: ${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.tags }}"
    echo "Build completed successfully!"
  displayName: 'Verify Build Success'

- script: |
    echo "Image built and pushed: ${{ parameters.acrName }}.azurecr.io/${{ parameters.serviceName }}:${{ parameters.tags }}"
  displayName: 'Echo Built Image Tag for ${{ parameters.serviceName }}'