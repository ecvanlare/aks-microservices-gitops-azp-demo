# GitOps Update Template
# Updates Helm chart values.yaml with new image tags and creates PR

parameters:
  # Required parameters
  semver: "" # Semantic version for image tags
  gitopsRepoUrl: "" # GitOps repository URL
  gitopsBranch: "" # GitOps repository branch

  # Optional parameters with defaults
  chartDir: "cluster/helm/online-boutique" # Path to Helm chart directory
  valuesFile: "values.yaml" # Name of the values file
  acrName: $(ACR_NAME) # Azure Container Registry name
  services: "cartservice,frontend,productcatalogservice,currencyservice,emailservice,paymentservice,shippingservice,recommendationservice,adservice,checkoutservice,shoppingassistantservice" # Services to check
  gitUserEmail: "azure-pipeline@example.com" # Git user email for commits
  gitUserName: "Azure Pipeline" # Git user name for commits

steps:
  # Checkout pipeline code for SSH key access
  - checkout: self
    fetchDepth: 0

  # Setup SSH authentication for Git operations
  - script: |
      mkdir -p ~/.ssh
      echo "$AZURE_DEVOPS_SSH_KEY" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      ssh-keyscan github.com >> ~/.ssh/known_hosts
      eval $(ssh-agent -s)
      ssh-add ~/.ssh/id_rsa
    displayName: "Setup SSH Authentication"
    env:
      AZURE_DEVOPS_SSH_KEY: $(AZURE_DEVOPS_SSH_KEY)

  # Clone GitOps repository
  - script: |
      # Clean up any existing content
      rm -rf .git
      rm -rf *

      # Clone the repository
      git clone --branch "${{ parameters.gitopsBranch }}" "${{ parameters.gitopsRepoUrl }}" .
      git config user.email "${{ parameters.gitUserEmail }}"
      git config user.name "${{ parameters.gitUserName }}"
    displayName: "Clone GitOps Repository"

  # Verify values.yaml file exists
  - script: |
      VALUES_FILE="${{ parameters.chartDir }}/${{ parameters.valuesFile }}"

      if [ ! -f "$VALUES_FILE" ]; then
        echo "❌ Error: $VALUES_FILE not found"
        exit 1
      fi

      echo "✅ Found values file: $VALUES_FILE"
    displayName: "Verify Values File"

  # Check ACR for services with new semver tags
  - task: AzureCLI@2
    inputs:
      azureSubscription: "$(AZURE_SUBSCRIPTION)"
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        # Login to ACR
        az acr login --name "${{ parameters.acrName }}"

        # Convert comma-separated services string to array
        IFS=',' read -ra ALL_SERVICES <<< "${{ parameters.services }}"

        # Check which services have the new semver tag in ACR
        SERVICES_TO_UPDATE=()
        for service in "${ALL_SERVICES[@]}"; do
          if az acr repository show-tags --name "${{ parameters.acrName }}" --repository $service --query "[?contains(@, '${{ parameters.semver }}')]" --output tsv | grep -q "${{ parameters.semver }}"; then
            echo "✅ $service:${{ parameters.semver }} found in ACR"
            SERVICES_TO_UPDATE+=("$service")
          fi
        done

        # Save services to file for next steps
        printf '%s\n' "${SERVICES_TO_UPDATE[@]}" > services_to_update.txt
    displayName: "Detect Services with New Images"

  # Update values.yaml with new image tags
  - script: |
      # Read services from file
      if [ -f services_to_update.txt ]; then
        mapfile -t SERVICES_TO_UPDATE < services_to_update.txt
      else
        echo "No services to update"
        exit 0
      fi

      VALUES_FILE="${{ parameters.chartDir }}/${{ parameters.valuesFile }}"

      # Install yq if not available
      if ! command -v yq &> /dev/null; then
        wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
      fi

      # Update only services that have the new semver in ACR
      for service in "${SERVICES_TO_UPDATE[@]}"; do
        if [ -n "$service" ]; then
          echo "Updating $service to semver ${{ parameters.semver }}"
          yq eval ".${service}.image.tag = \"${{ parameters.semver }}\"" -i "$VALUES_FILE"
        fi
      done
    displayName: "Update Values.yaml"

  # Commit and push changes
  - script: |
      # Check if there are any changes to commit
      if git diff --quiet; then
        echo "No changes to commit"
        exit 0
      fi

      # Commit and push
      VALUES_FILE="${{ parameters.chartDir }}/${{ parameters.valuesFile }}"
      git add "$VALUES_FILE"
      git commit -m "Update image tags to ${{ parameters.semver }}"
      git push origin HEAD:${{ parameters.gitopsBranch }}

      echo "✅ Changes committed and pushed successfully"
    displayName: "Commit and Push Changes"
