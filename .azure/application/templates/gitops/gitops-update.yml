# Update GitOps Values Template
# Updates Helm chart values.yaml with new image tags

parameters:
  semver: ''  # Required: Semantic version for image tags
  gitopsRepoUrl: ''  # Required: GitOps repository URL
  gitopsBranch: ''  # Required: GitOps repository branch
  repoSubdir: 'online-boutique-private'  # Optional: Repository subdirectory to navigate to
  chartDir: 'gitops/helm-charts/app-chart'  # Optional: Path to Helm chart directory
  valuesFile: 'values.yaml'  # Optional: Name of the values file

steps:
  - checkout: self
    fetchDepth: 0

  - script: |
      echo "=== GitOps Update Parameters ==="
      echo "Semver: '${{ parameters.semver }}'"
      echo "GitOps repo: '${{ parameters.gitopsRepoUrl }}'"
      echo "GitOps branch: '${{ parameters.gitopsBranch }}'"
      echo "Repo subdirectory: '${{ parameters.repoSubdir }}'"
      echo "Chart directory: '${{ parameters.chartDir }}'"
      echo "Values file: '${{ parameters.valuesFile }}'"
    displayName: 'Display Parameters'

  - script: |
      echo "Setting up SSH authentication..."
      mkdir -p ~/.ssh
      echo "$AZURE_DEVOPS_SSH_KEY" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      ssh-keyscan github.com >> ~/.ssh/known_hosts
      eval $(ssh-agent -s)
      ssh-add ~/.ssh/id_rsa
      echo "SSH setup completed"
    displayName: 'Setup SSH'
    env:
      AZURE_DEVOPS_SSH_KEY: $(AZURE_DEVOPS_SSH_KEY)

  - script: |
      echo "Cloning GitOps repository..."
      git clone --branch "${{ parameters.gitopsBranch }}" "${{ parameters.gitopsRepoUrl }}" .
      cd "${{ parameters.repoSubdir }}"
      echo "Repository cloned successfully"
      echo "Current directory after clone: $(pwd)"
      echo "Contents of current directory:"
      ls -la
      echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
      echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
    displayName: 'Clone GitOps Repo'

  - script: |
      # Navigate to the correct subdirectory
      cd "${{ parameters.repoSubdir }}"
      
      # Navigate to the Helm chart directory
      CHART_DIR="${{ parameters.chartDir }}"
      VALUES_FILE="$CHART_DIR/${{ parameters.valuesFile }}"
      
      echo "Current working directory: $(pwd)"
      echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
      echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
      
      if [ ! -f "$VALUES_FILE" ]; then
        echo "❌ Error: $VALUES_FILE not found"
        echo "Current directory: $(pwd)"
        echo "Available files:"
        ls -la
        echo "GitOps repo contents:"
        ls -la || echo "Current directory contents not found"
        exit 1
      fi
      
      echo "✅ Values file found: $VALUES_FILE"
    displayName: 'Verify Values File'

  - script: |
      # Navigate to the correct subdirectory
      cd "${{ parameters.repoSubdir }}"
      
      echo "Checking ACR for services with semver ${{ parameters.semver }}..."
      
      # Login to ACR
      az acr login --name $(ACR_NAME)
      
      # Define all services
      ALL_SERVICES=("cartservice" "frontend" "productcatalogservice" "currencyservice" "emailservice" "paymentservice" "shippingservice" "recommendationservice" "adservice" "checkoutservice" "shoppingassistantservice")
      
      # Check which services have the new semver tag in ACR
      SERVICES_TO_UPDATE=()
      for service in "${ALL_SERVICES[@]}"; do
        echo "Checking if $service:${{ parameters.semver }} exists in ACR..."
        
        # Check if the image tag exists in ACR
        if az acr repository show-tags --name $(ACR_NAME) --repository $service --query "[?contains(@, '${{ parameters.semver }}')]" --output tsv | grep -q "${{ parameters.semver }}"; then
          echo "✅ $service:${{ parameters.semver }} found in ACR"
          SERVICES_TO_UPDATE+=("$service")
        else
          echo "⚠️  $service:${{ parameters.semver }} not found in ACR, skipping"
        fi
      done
      
      echo "Services with new semver in ACR: ${SERVICES_TO_UPDATE[*]}"
    displayName: 'Check ACR for Services with New Semver'

  - script: |
      # Navigate to the correct subdirectory
      cd "${{ parameters.repoSubdir }}"
      
      # Navigate to the Helm chart directory
      CHART_DIR="${{ parameters.chartDir }}"
      VALUES_FILE="$CHART_DIR/${{ parameters.valuesFile }}"
      
      # Update only services that have the new semver in ACR
      for service in "${SERVICES_TO_UPDATE[@]}"; do
        if [ -n "$service" ]; then
          echo "Updating $service to semver ${{ parameters.semver }}"
          sed -i "/^${service}:/,/^[a-z]/ s/tag: \".*\"/tag: \"${{ parameters.semver }}\"/" "$VALUES_FILE"
        fi
      done
      
      echo "Updated ${{ parameters.valuesFile }}:"
      cat "$VALUES_FILE"
    displayName: 'Update Image Tags'

  - script: |
      # Navigate to the correct subdirectory
      cd "${{ parameters.repoSubdir }}"
      
      git config user.email "azure-pipeline@example.com"
      git config user.name "Azure Pipeline"
      git add "$VALUES_FILE"
      git commit -m "Update image tags to ${{ parameters.semver }} in ${{ parameters.valuesFile }}"
      echo "Changes committed successfully"
    displayName: 'Commit Changes'

  - script: |
      # Navigate to the correct subdirectory
      cd "${{ parameters.repoSubdir }}"
      
      echo "Pushing changes to GitOps repository..."
      git push origin "${{ parameters.gitopsBranch }}"
      echo "✅ Changes pushed successfully!"
    displayName: 'Push Changes' 