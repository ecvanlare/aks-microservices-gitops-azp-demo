# Update GitOps Values Template
# Updates Helm chart values.yaml with new image tags

parameters:
  semver: ''  # Required: Semantic version for image tags
  gitopsRepoUrl: ''  # Required: GitOps repository URL
  gitopsBranch: ''  # Required: GitOps repository branch
  acrName: ''  # Required: Azure Container Registry name

steps:
  - checkout: self
    fetchDepth: 0

  - script: |
      echo "=== GitOps Update Parameters ==="
      echo "Semver: ${{ parameters.semver }}"
      echo "GitOps repo: ${{ parameters.gitopsRepoUrl }}"
      echo "GitOps branch: ${{ parameters.gitopsBranch }}"
      echo "ACR: ${{ parameters.acrName }}"
    displayName: 'Display Parameters'

  - script: |
      echo "Setting up SSH authentication..."
      mkdir -p ~/.ssh
      echo "$AZURE_DEVOPS_SSH_KEY" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      ssh-keyscan github.com >> ~/.ssh/known_hosts
      eval $(ssh-agent -s)
      ssh-add ~/.ssh/id_rsa
      echo "SSH setup completed"
    displayName: 'Setup SSH'
    env:
      AZURE_DEVOPS_SSH_KEY: $(AZURE_DEVOPS_SSH_KEY)

  - script: |
      echo "Cloning GitOps repository..."
      git clone --branch "${{ parameters.gitopsBranch }}" "${{ parameters.gitopsRepoUrl }}" gitops-repo
      cd gitops-repo
      echo "Repository cloned successfully"
    displayName: 'Clone GitOps Repo'

  - script: |
      VALUES_FILE="gitops/helm-charts/app-chart/values.yaml"
      
      if [ ! -f "$VALUES_FILE" ]; then
        echo "‚ùå Error: $VALUES_FILE not found"
        exit 1
      fi
      
      echo "‚úÖ Values file found: $VALUES_FILE"
    displayName: 'Verify Values File'

  - task: AzureCLI@2
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "üîç Checking ACR for services with semver ${{ parameters.semver }}..."
        
        # Login to ACR
        az acr login --name "${{ parameters.acrName }}" || echo "Failed to login to ACR"
        
        # Check which services have images with the current semver tag
        SERVICES_TO_UPDATE=()
        for service in cartservice frontend productcatalogservice currencyservice emailservice paymentservice shippingservice recommendationservice adservice checkoutservice shoppingassistantservice; do
          if az acr repository show-tags --name "${{ parameters.acrName }}" --repository "$service" --query "[?contains(@, '${{ parameters.semver }}')]" --output tsv 2>/dev/null | grep -q "${{ parameters.semver }}"; then
            echo "‚úÖ Found image for $service with tag ${{ parameters.semver }}"
            SERVICES_TO_UPDATE+=("$service")
          else
            echo "‚ùå No image found for $service with tag ${{ parameters.semver }}"
          fi
        done
        
        echo "Services to update: ${SERVICES_TO_UPDATE[*]}"
        echo "##vso[task.setvariable variable=SERVICES_TO_UPDATE]${SERVICES_TO_UPDATE[*]}"
    displayName: 'Check ACR for Built Services'

  - script: |
      VALUES_FILE="gitops/helm-charts/app-chart/values.yaml"
      
      # Get services from previous task
      SERVICES=($(echo "$(SERVICES_TO_UPDATE)" | tr ' ' '\n'))
      
      if [ ${#SERVICES[@]} -eq 0 ] || [ -z "$(SERVICES_TO_UPDATE)" ]; then
        echo "‚ö†Ô∏è  No services found with semver ${{ parameters.semver }} - using all services as fallback"
        SERVICES=("cartservice" "frontend" "productcatalogservice" "currencyservice" "emailservice" "paymentservice" "shippingservice" "recommendationservice" "adservice" "checkoutservice" "shoppingassistantservice")
      fi
      
      echo "Services to update: ${SERVICES[*]}"
      
      # Update only services that have the new semver
      for service in "${SERVICES[@]}"; do
        if [ -n "$service" ]; then
          echo "Updating $service to semver ${{ parameters.semver }}"
          sed -i "/^${service}:/,/^[a-z]/ s/tag: \".*\"/tag: \"${{ parameters.semver }}\"/" "$VALUES_FILE"
        fi
      done
      
      echo "Updated values.yaml:"
      cat "$VALUES_FILE"
    displayName: 'Update Image Tags'

  - script: |
      git config user.email "azure-pipeline@example.com"
      git config user.name "Azure Pipeline"
      git add gitops/helm-charts/app-chart/values.yaml
      git commit -m "Update image tags to ${{ parameters.semver }}"
      echo "Changes committed successfully"
    displayName: 'Commit Changes'

  - script: |
      echo "Pushing changes to GitOps repository..."
      git push origin "${{ parameters.gitopsBranch }}"
      echo "‚úÖ Changes pushed successfully!"
    displayName: 'Push Changes' 