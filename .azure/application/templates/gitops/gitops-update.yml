# Update GitOps Values Template (Helm Values Override)
# Updates Helm chart values.yaml with new image tags using Helm values override

parameters:
  semver: ''  # Required: Semantic version for image tags
  builtServices: ''  # Required: Space-separated list of services that were built
  gitopsRepoUrl: ''  # Required: GitOps repository URL
  gitopsBranch: ''  # Required: GitOps repository branch
  prTitle: 'Update Image Tags for All Services'
  prDescription: 'Automatically created PR to update image tags for all services'

steps:
  - checkout: self
    fetchDepth: 0

  - script: |
      echo "=== Update GitOps Values using Helm Values Override ==="
      echo "Semver: ${{ parameters.semver }}"
      echo "Built services: ${{ parameters.builtServices }}"
      echo "GitOps repo: ${{ parameters.gitopsRepoUrl }}"
      echo "GitOps branch: ${{ parameters.gitopsBranch }}"

      # Setup SSH key for repository access
      echo "Setting up SSH authentication..."
      mkdir -p ~/.ssh
      
      # Write SSH key with proper formatting
      echo "$AZURE_DEVOPS_SSH_KEY" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      
      # Add GitHub to known_hosts
      ssh-keyscan github.com >> ~/.ssh/known_hosts
      
      # Start SSH agent and add key
      eval $(ssh-agent -s)
      ssh-add ~/.ssh/id_rsa

      # Clone GitOps repository using SSH
      echo "Cloning GitOps repository using SSH..."
      git clone --branch "${{ parameters.gitopsBranch }}" "${{ parameters.gitopsRepoUrl }}" gitops-repo
      cd gitops-repo

      # Navigate to the Helm chart directory
      CHART_DIR="gitops/helm-charts/app-chart"
      VALUES_FILE="$CHART_DIR/values.yaml"
      
      if [ ! -f "$VALUES_FILE" ]; then
        echo "‚ùå Error: $VALUES_FILE not found"
        exit 1
      fi

      echo "Using Helm values override to update values.yaml..."
      
      # Convert space-separated services with tags to array
      IFS=' ' read -ra SERVICES_WITH_TAGS <<< "${{ parameters.builtServices }}"
      
      # Create a values override file
      OVERRIDE_VALUES="override-values.yaml"
      echo "# Values override for image tag updates" > "$OVERRIDE_VALUES"
      
      for service_with_tag in "${SERVICES_WITH_TAGS[@]}"; do
        if [ -n "$service_with_tag" ]; then
          # Split service:tag format
          IFS=':' read -ra SERVICE_AND_TAG <<< "$service_with_tag"
          SERVICE="${SERVICE_AND_TAG[0]}"
          TAG="${SERVICE_AND_TAG[1]}"
          
          echo "Adding override for $SERVICE: $TAG"
          
          # Add to override values file with proper YAML structure
          echo "${SERVICE}:" >> "$OVERRIDE_VALUES"
          echo "  image:" >> "$OVERRIDE_VALUES"
          echo "    tag: \"$TAG\"" >> "$OVERRIDE_VALUES"
          echo "" >> "$OVERRIDE_VALUES"
        fi
      done

      echo "Override values file:"
      cat "$OVERRIDE_VALUES"

      # Use yq to merge the override values with the main values file
      if [ -s "$OVERRIDE_VALUES" ]; then
        echo "Running yq to merge values..."
        
        # Install yq if not available
        if ! command -v yq &> /dev/null; then
          echo "Installing yq..."
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
        fi
        
        # Use yq to merge the override values with the main values file
        # This preserves all existing values and only updates the specified ones
        yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' "$VALUES_FILE" "$OVERRIDE_VALUES" > "${VALUES_FILE}.tmp"
        
        # Check if the merge was successful and the file has content
        if [ -s "${VALUES_FILE}.tmp" ]; then
          mv "${VALUES_FILE}.tmp" "$VALUES_FILE"
          echo "Values.yaml updated successfully using yq merge"
        else
          echo "‚ùå Error: Merge failed, keeping original values file"
          rm -f "${VALUES_FILE}.tmp"
          exit 1
        fi
      else
        echo "No services to update"
      fi

      # Show the updated values
      echo "Updated values.yaml:"
      cat "$VALUES_FILE"

      # Commit and push changes
      git config user.email "azure-pipeline@example.com"
      git config user.name "Azure Pipeline"
      
      git add "$VALUES_FILE"
      git commit -m "Update image tags using Helm values override for services: ${{ parameters.builtServices }}"
      
      # Push changes using SSH
      echo "Pushing changes using SSH..."
      git push origin "${{ parameters.gitopsBranch }}"
      
      echo "üìù Changes pushed successfully!"
      echo "To create a PR, visit: https://github.com/$(echo "${{ parameters.gitopsRepoUrl }}" | sed 's|git@github.com:||' | sed 's|.git||')/compare/main...${{ parameters.gitopsBranch }}"

      echo "‚úÖ GitOps values updated successfully using Helm values override"
    displayName: 'Update GitOps Values using Helm Values Override'
    env:
      AZURE_DEVOPS_SSH_KEY: $(AZURE_DEVOPS_SSH_KEY) 