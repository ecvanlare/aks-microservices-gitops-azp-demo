# Update GitOps Values Template
# Updates Helm chart values.yaml with new image tags

parameters:
  semver: ''  # Required: Semantic version for image tags
  gitopsRepoUrl: ''  # Required: GitOps repository URL
  gitopsBranch: ''  # Required: GitOps repository branch
  repoSubdir: 'online-boutique-private'  # Optional: Repository subdirectory to navigate to
  chartDir: 'gitops/helm-charts/app-chart'  # Optional: Path to Helm chart directory
  valuesFile: 'values.yaml'  # Optional: Name of the values file
  acrName: $(ACR_NAME)  # Required: Azure Container Registry name
  services: 'cartservice,frontend,productcatalogservice,currencyservice,emailservice,paymentservice,shippingservice,recommendationservice,adservice,checkoutservice,shoppingassistantservice'  # Optional: Comma-separated list of services to check
  gitUserEmail: 'azure-pipeline@example.com'  # Optional: Git user email for commits
  gitUserName: 'Azure Pipeline'  # Optional: Git user name for commits

steps:
  - checkout: self
    fetchDepth: 0

  - script: |
      echo "=== GitOps Update Parameters ==="
      echo "Semver: '${{ parameters.semver }}'"
      echo "GitOps repo: '${{ parameters.gitopsRepoUrl }}'"
      echo "GitOps branch: '${{ parameters.gitopsBranch }}'"
      echo "Repo subdirectory: '${{ parameters.repoSubdir }}'"
      echo "Chart directory: '${{ parameters.chartDir }}'"
      echo "Values file: '${{ parameters.valuesFile }}'"
      echo "ACR name: '${{ parameters.acrName }}'"
      echo "Services: '${{ parameters.services }}'"
      echo "Git user email: '${{ parameters.gitUserEmail }}'"
      echo "Git user name: '${{ parameters.gitUserName }}'"
    displayName: 'Display Parameters'

  - script: |
      echo "Setting up SSH authentication..."
      mkdir -p ~/.ssh
      echo "$AZURE_DEVOPS_SSH_KEY" | sed 's/-----BEGIN OPENSSH PRIVATE KEY----- //' | sed 's/ -----END OPENSSH PRIVATE KEY-----//' | tr ' ' '\n' | (echo "-----BEGIN OPENSSH PRIVATE KEY-----"; cat; echo "-----END OPENSSH PRIVATE KEY-----") > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      ssh-keyscan github.com >> ~/.ssh/known_hosts
      eval $(ssh-agent -s)
      ssh-add ~/.ssh/id_rsa
      echo "SSH setup completed"
    displayName: 'Setup SSH'
    env:
      AZURE_DEVOPS_SSH_KEY: $(AZURE_DEVOPS_SSH_KEY)

  - script: |
      echo "Cloning GitOps repository..."
      git clone --branch "${{ parameters.gitopsBranch }}" "${{ parameters.gitopsRepoUrl }}" .
      cd "${{ parameters.repoSubdir }}"
      echo "Repository cloned successfully"
      echo "Current directory after clone: $(pwd)"
      echo "Contents of current directory:"
      ls -la
    displayName: 'Clone GitOps Repo'

  - script: |
      # Navigate to the correct subdirectory
      cd "${{ parameters.repoSubdir }}"
      
      # Navigate to the Helm chart directory
      CHART_DIR="${{ parameters.chartDir }}"
      VALUES_FILE="$CHART_DIR/${{ parameters.valuesFile }}"
      
      echo "Current working directory: $(pwd)"
      
      if [ ! -f "$VALUES_FILE" ]; then
        echo "‚ùå Error: $VALUES_FILE not found"
        echo "Current directory: $(pwd)"
        echo "Available files:"
        ls -la
        exit 1
      fi
      
      echo "‚úÖ Values file found: $VALUES_FILE"
    displayName: 'Verify Values File'

  - task: AzureCLI@2
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Navigate to the correct subdirectory
        cd "${{ parameters.repoSubdir }}"
        
        echo "Checking ACR for services with semver ${{ parameters.semver }}..."
        
        # Login to ACR
        az acr login --name "${{ parameters.acrName }}"
        
        # Convert comma-separated services string to array
        IFS=',' read -ra ALL_SERVICES <<< "${{ parameters.services }}"
        
        # Check which services have the new semver tag in ACR
        SERVICES_TO_UPDATE=()
        for service in "${ALL_SERVICES[@]}"; do
          echo "Checking if $service:${{ parameters.semver }} exists in ACR..."
          
          # Check if the image tag exists in ACR
          if az acr repository show-tags --name "${{ parameters.acrName }}" --repository $service --query "[?contains(@, '${{ parameters.semver }}')]" --output tsv | grep -q "${{ parameters.semver }}"; then
            echo "‚úÖ $service:${{ parameters.semver }} found in ACR"
            SERVICES_TO_UPDATE+=("$service")
          else
            echo "‚ö†Ô∏è  $service:${{ parameters.semver }} not found in ACR, skipping"
          fi
        done
        
        echo "Services with new semver in ACR: ${SERVICES_TO_UPDATE[*]}"
        
        # Save services to file for next steps (in root directory)
        cd ..
        printf '%s\n' "${SERVICES_TO_UPDATE[@]}" > services_to_update.txt
        echo "Saved services to update: ${SERVICES_TO_UPDATE[*]}"
    displayName: 'Detect Services with New Images'

  - script: |
      # Read services from file
      echo "Checking for services_to_update.txt file..."
      if [ -f services_to_update.txt ]; then
        echo "Found services_to_update.txt, reading contents..."
        cat services_to_update.txt
        mapfile -t SERVICES_TO_UPDATE < services_to_update.txt
        echo "Services to update: ${SERVICES_TO_UPDATE[*]}"
        echo "Number of services: ${#SERVICES_TO_UPDATE[@]}"
      else
        echo "No services_to_update.txt file found"
        echo "Current directory: $(pwd)"
        echo "Available files:"
        ls -la
        exit 0
      fi
      
      # Navigate to the correct subdirectory
      cd "${{ parameters.repoSubdir }}"
      
      # Navigate to the Helm chart directory
      CHART_DIR="${{ parameters.chartDir }}"
      VALUES_FILE="$CHART_DIR/${{ parameters.valuesFile }}"
      
      echo "Updating values.yaml with new image tags using yq..."
      
      # Install yq if not available
      if ! command -v yq &> /dev/null; then
        echo "Installing yq..."
        wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
      fi
      
      # Update only services that have the new semver in ACR
      for service in "${SERVICES_TO_UPDATE[@]}"; do
        if [ -n "$service" ]; then
          echo "Updating $service to semver ${{ parameters.semver }}"
          
          # Use yq to update the image tag for this service
          yq eval ".${service}.image.tag = \"${{ parameters.semver }}\"" -i "$VALUES_FILE"
          
          # Verify the change was made
          echo "Checking if $service tag was updated:"
          yq eval ".${service}.image.tag" "$VALUES_FILE"
        fi
      done
      
      # Show what was updated
      if [ ${#SERVICES_TO_UPDATE[@]} -gt 0 ]; then
        echo "üìù Updated services in ${{ parameters.valuesFile }}:"
        for service in "${SERVICES_TO_UPDATE[@]}"; do
          echo "  - $service: ${{ parameters.semver }}"
        done
        
              # Navigate to git repository root and add file to git tracking
      cd ..
      
      # Show file content before git add
      echo "File content before git add:"
      cat "$VALUES_FILE"
      
      git add "$VALUES_FILE"
      
      # Show the actual changes made to the file using git diff
      echo "üîç Changes made to ${{ parameters.valuesFile }}:"
      git diff --cached "$VALUES_FILE" || echo "No changes detected"
      else
        echo "‚ÑπÔ∏è  No services found with new semver in ACR - no changes needed"
        exit 0
      fi
      
      echo "‚úÖ Values.yaml updated successfully"
    displayName: 'Update Values.yaml'

  - script: |
      # Navigate to the git repository root
      cd ..
      
      # Configure git
      git config user.email "${{ parameters.gitUserEmail }}"
      git config user.name "${{ parameters.gitUserName }}"
      
      # Add and commit changes
      VALUES_FILE="${{ parameters.repoSubdir }}/${{ parameters.chartDir }}/${{ parameters.valuesFile }}"
      git add "$VALUES_FILE"
      git commit -m "Update image tags to ${{ parameters.semver }} for services: ${{ parameters.services }}"
      
      echo "‚úÖ Changes committed successfully"
    displayName: 'Commit Changes'

  - script: |
      # Push changes using SSH
      echo "Pushing changes using SSH..."
      git push origin "${{ parameters.gitopsBranch }}"
      
      echo "üìù Changes pushed successfully!"
      echo "To create a PR, visit: https://github.com/$(echo "${{ parameters.gitopsRepoUrl }}" | sed 's|git@github.com:||' | sed 's|.git||')/compare/main...${{ parameters.gitopsBranch }}"
      
      echo "‚úÖ GitOps changes pushed successfully"
    displayName: 'Push Changes'

 