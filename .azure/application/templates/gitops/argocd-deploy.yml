# Deploy Tasks Template
# Focuses on ArgoCD monitoring and approval gates

parameters:
  # User-configurable deployment settings
  namespace: $(NAMESPACE)
  releaseName: $(RELEASE_NAME)
  includeVerification: true
  semver: ''  # Semantic version for deployment (passed from pipeline)

  # Argo CD configuration
  useArgoCD: true
  argocdNamespace: 'argocd'
  gitopsRepoUrl: $(GITOPS_REPO_URL)
  gitopsBranch: $(GITOPS_BRANCH)

steps:
  # ========================================
  # SECTION 1: ARGO CD MONITORING
  # ========================================
  - checkout: self
    fetchDepth: 0

  # ========================================
  # SECTION 2: ARGO CD SYNC MONITORING
  # ========================================
  - ${{ if eq(parameters.useArgoCD, 'true') }}:
    - task: AzureCLI@2
      displayName: 'Monitor ArgoCD Sync Status'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          
          # Get AKS credentials
          az aks get-credentials -n $(AKS_CLUSTER_NAME) -g $(RESOURCE_GROUP) --overwrite-existing
          kubelogin convert-kubeconfig -l azurecli
          
          # Check ArgoCD application sync status
          echo "Checking ArgoCD application sync status..."
          kubectl get applications -n ${{ parameters.argocdNamespace }}
          
          # Wait for application to be healthy
          echo "Waiting for application to be healthy..."
          kubectl wait --for=condition=healthy application/online-boutique-app -n ${{ parameters.argocdNamespace }} --timeout=300s
          
          # Display application status
          echo "Application sync status:"
          kubectl describe application/online-boutique-app -n ${{ parameters.argocdNamespace }}
          
          # Show pods with new image tags
          echo "Pods with current image tags:"
          kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }} -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].image}{"\n"}{end}'

  # ========================================
  # SECTION 3: DEPLOYMENT VERIFICATION
  # ========================================
  - ${{ if eq(parameters.includeVerification, 'true') }}:
    - task: AzureCLI@2
      displayName: 'Verify ArgoCD Sync Status'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          
          # Get AKS credentials
          az aks get-credentials -n $(AKS_CLUSTER_NAME) -g $(RESOURCE_GROUP) --overwrite-existing
          kubelogin convert-kubeconfig -l azurecli
          
          # Check ArgoCD application sync status
          echo "Checking ArgoCD application sync status..."
          kubectl get applications -n ${{ parameters.argocdNamespace }}
          
          # Check if application is synced
          kubectl wait --for=condition=healthy application/online-boutique-app -n ${{ parameters.argocdNamespace }} --timeout=300s
          
          # Display application status
          kubectl describe application/online-boutique-app -n ${{ parameters.argocdNamespace }}
          
          # Show pods with new image tags
          kubectl get pods -n ${{ parameters.namespace }} -l app.kubernetes.io/instance=${{ parameters.releaseName }} -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].image}{"\n"}{end}' 