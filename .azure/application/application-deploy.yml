# Application CD Pipeline - Deploy to Environments
trigger: none  # CD should not auto-trigger, only manual or from CI

pr: none  # CD should not run on PRs

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.kubernetes'
  - group: 'online-boutique.gitops'
  - name: VM_IMAGE
    value: 'ubuntu-latest'

pool:
  vmImage: $(VM_IMAGE)

stages:
  - stage: GetBuildInfo
    displayName: 'Get Build Information'
    jobs:
    - job: GetInfo
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/versioning/gitversion.yml
        parameters:
          name: 'SetSemver'
          fetchDepth: 0
          useConfigFile: false
      
      - script: |
          echo "ðŸ“‹ BUILD INFORMATION"
          echo "Semver: $(SEMVER)"
          echo "Build ID: $(Build.BuildId)"
          echo "Build Number: $(Build.BuildNumber)"
          echo "Source Branch: $(Build.SourceBranch)"
          echo "Source Version: $(Build.SourceVersion)"
        displayName: 'Display Build Information'

  - stage: UpdateGitOps
    displayName: 'Update GitOps with New Image Tags'
    dependsOn: GetBuildInfo
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.GetBuildInfo.GetInfo.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: UpdateGitOpsValues
      displayName: 'Update GitOps Repository with New Image Tags'
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - script: |
          echo "ðŸ“‹ GITOPS UPDATE SUMMARY"
          echo "Semver: $(SEMVER)"
          echo "GitOps Repo: $(GITOPS_REPO_URL)"
          echo "GitOps Branch: $(GITOPS_BRANCH)"
          echo "All services will be updated to version: $(SEMVER)"
        displayName: 'GitOps Update Summary'
        
      - template: templates/gitops/gitops-update.yml
        parameters:
          semver: $(SEMVER)
          builtServices: 'cartservice frontend productcatalogservice currencyservice emailservice paymentservice shippingservice recommendationservice adservice checkoutservice shoppingassistantservice'
          gitopsRepoUrl: $(GITOPS_REPO_URL)
          gitopsBranch: $(GITOPS_BRANCH)

  - stage: DeployToDev
    displayName: 'Deploy to Development Environment'
    dependsOn: UpdateGitOps
    condition: succeeded()
    variables:
      - group: 'online-boutique.dev'
      - group: 'online-boutique.common'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.GetBuildInfo.GetInfo.outputs['SetSemver.SEMVER'] ]
    jobs:
    - deployment: DeployToDev
      environment: 'development'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            
            - script: |
                echo "ðŸš€ DEPLOYING TO DEVELOPMENT"
                echo "Environment: Development"
                echo "Semver: $(SEMVER)"
                echo "ArgoCD Namespace: $(ARGOCD_NAMESPACE)"
                echo "GitOps Repo: $(GITOPS_REPO_URL)"
                echo "GitOps Branch: $(GITOPS_BRANCH)"
              displayName: 'Deploy to Dev Summary'
            
            - template: templates/gitops/argocd-deploy.yml
              parameters:
                includeVerification: true
                semver: $(SEMVER)
                useArgoCD: true
                argocdNamespace: $(ARGOCD_NAMESPACE)
                gitopsRepoUrl: $(GITOPS_REPO_URL)
                gitopsBranch: $(GITOPS_BRANCH)

  - stage: DeployToProduction
    displayName: 'Deploy to Production Environment'
    dependsOn: DeployToDev
    condition: succeeded()
    variables:
      - group: 'online-boutique.prod'
      - group: 'online-boutique.common'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.GetBuildInfo.GetInfo.outputs['SetSemver.SEMVER'] ]
    jobs:
    - deployment: DeployToProduction
      environment: 'production'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            
            - script: |
                echo "ðŸš€ DEPLOYING TO PRODUCTION"
                echo "Environment: Production"
                echo "Semver: $(SEMVER)"
                echo "ArgoCD Namespace: $(ARGOCD_NAMESPACE)"
                echo "GitOps Repo: $(GITOPS_REPO_URL)"
                echo "GitOps Branch: $(GITOPS_BRANCH)"
              displayName: 'Deploy to Production Summary'
            
            - template: templates/gitops/argocd-deploy.yml
              parameters:
                includeVerification: true
                semver: $(SEMVER)
                useArgoCD: true
                argocdNamespace: $(ARGOCD_NAMESPACE)
                gitopsRepoUrl: $(GITOPS_REPO_URL)
                gitopsBranch: $(GITOPS_BRANCH)

  - stage: PostDeploymentVerification
    displayName: 'Post-Deployment Verification'
    dependsOn: DeployToProduction
    condition: succeeded()
    variables:
      - group: 'online-boutique.common'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.GetBuildInfo.GetInfo.outputs['SetSemver.SEMVER'] ]
    jobs:
    - job: VerifyDeployment
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - script: |
          echo "âœ… POST-DEPLOYMENT VERIFICATION"
          echo "Semver: $(SEMVER)"
          echo "All environments deployed successfully!"
          echo ""
          echo "ðŸ“Š DEPLOYMENT SUMMARY"
          echo "====================="
          echo "âœ… Development: Deployed and verified"
          echo "âœ… Production: Deployed and verified"
          echo "âœ… ArgoCD Sync: Completed"
          echo "âœ… GitOps: Updated with new image tags"
          echo ""
          echo "ðŸŽ‰ Deployment completed successfully!"
        displayName: 'Deployment Verification Summary'
      
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'deployment-summary'
          publishLocation: 'pipeline' 