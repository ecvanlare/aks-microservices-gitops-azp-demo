# Application Development CD Pipeline
# Deploys microservices to development environment using GitOps
# Triggered by successful build pipeline runs

trigger: none # CD should not auto-trigger from code changes

pr: none # CD should not run on PRs

# Trigger on successful build pipeline runs
resources:
  pipelines:
    - pipeline: build-pipeline
      source: "app-build.yml" # Name of your build pipeline
      trigger:
        branches:
          include:
            - dev

variables:
  - group: "online-boutique.common"
  - group: "online-boutique.docker"
  - group: "online-boutique.kubernetes"
  - group: "online-boutique.gitops"
  - name: VM_IMAGE
    value: "ubuntu-latest"

pool:
  vmImage: $(VM_IMAGE)

stages:
  # Download build artifacts and get version info
  - stage: DownloadBuildArtifacts
    displayName: "Download Build Artifacts"
    jobs:
      - job: GetBuildInfo
        steps:
          - checkout: self
            fetchDepth: 0

          # Download artifacts from the triggering build pipeline
          - download: build-pipeline
            artifact: "build-artifacts"
            displayName: "Download Build Artifacts"

          # Extract build artifacts using template
          - template: templates/deploy/extract-build-artifacts.yml
            parameters:
              artifactPath: "$(Pipeline.Workspace)/build-pipeline/build-artifacts"
              semverOutputName: "BUILD_SEMVER"
              servicesOutputName: "BUILT_SERVICES"

  # Update GitOps repository with new image tags for development
  - stage: UpdateGitOpsDev
    displayName: "Update GitOps for Development"
    dependsOn: DownloadBuildArtifacts
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DownloadBuildArtifacts.GetBuildInfo.outputs['ExtractBuildSemver.BUILD_SEMVER'] ]
      BUILT_SERVICES: $[ stageDependencies.DownloadBuildArtifacts.GetBuildInfo.outputs['ReadBuiltServices.BUILT_SERVICES'] ]
    jobs:
      - job: UpdateGitOpsValues
        displayName: "Update GitOps Repository with New Image Tags"
        pool:
          vmImage: $(VM_IMAGE)
        steps:
          - checkout: self
            fetchDepth: 0

          - template: templates/gitops/gitops-update.yml
            parameters:
              semver: $(SEMVER)
              gitopsRepoUrl: $(GITOPS_REPO_URL)
              gitopsBranch: $(GITOPS_BRANCH)

  # Update GitOps repository with new image tags for production
  - stage: UpdateGitOpsProd
    displayName: "Update GitOps for Production"
    dependsOn: UpdateGitOpsDev
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.DownloadBuildArtifacts.GetBuildInfo.outputs['ExtractBuildSemver.BUILD_SEMVER'] ]
      BUILT_SERVICES: $[ stageDependencies.DownloadBuildArtifacts.GetBuildInfo.outputs['ReadBuiltServices.BUILT_SERVICES'] ]
    jobs:
      - deployment: UpdateGitOpsProd
        environment: "production"
        pool:
          vmImage: $(VM_IMAGE)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  fetchDepth: 0

                - template: templates/gitops/gitops-update.yml
                  parameters:
                    semver: $(SEMVER)
                    gitopsRepoUrl: $(GITOPS_REPO_URL)
                    gitopsBranch: $(GITOPS_BRANCH_PROD)

  # Post-deployment verification for production
  - stage: PublishDeploymentSummary
    displayName: "Publish Deployment Summary"
    dependsOn: UpdateGitOpsProd
    condition: succeeded()
    variables:
      - group: "online-boutique.common"
      - group: "online-boutique.kubernetes"
      - name: SEMVER
        value: $[ stageDependencies.DownloadBuildArtifacts.GetBuildInfo.outputs['ExtractBuildSemver.BUILD_SEMVER'] ]
    jobs:
      - job: VerifyDeployment
        pool:
          vmImage: $(VM_IMAGE)
        steps:
          - checkout: self

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              artifact: "deployment-summary"
              publishLocation: "pipeline"
