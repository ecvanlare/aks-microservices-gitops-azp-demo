# Application CD Pipeline
# Deploys microservices to environments using GitOps
# Triggered by successful build pipeline runs

trigger: none  # CD should not auto-trigger from code changes

pr: none  # CD should not run on PRs

# Trigger on successful build pipeline runs
resources:
  pipelines:
    - pipeline: build-pipeline
      source: 'app-build.yml'  # Name of your build pipeline
      trigger:
        branches:
          include:
            - dev

variables:
  - group: 'online-boutique.common'
  - group: 'online-boutique.docker'
  - group: 'online-boutique.kubernetes'
  - group: 'online-boutique.gitops'
  - name: VM_IMAGE
    value: 'ubuntu-latest'

pool:
  vmImage: $(VM_IMAGE)

stages:
  # Download build artifacts and get version info
  - stage: GetBuildInfo
    displayName: 'Get Build Information'
    jobs:
    - job: GetBuildInfo
      steps:
      - checkout: self
        fetchDepth: 0
        
      # Download artifacts from the triggering build pipeline
      - download: build-pipeline
        artifact: 'build-artifacts'
        displayName: 'Download Build Artifacts'
        
      # Extract semver from build artifacts
      - script: |
          SEMVER_FILE="$(Pipeline.Workspace)/build-pipeline/build-artifacts/semver.txt"
          if [ -f "$SEMVER_FILE" ]; then
            SEMVER=$(cat "$SEMVER_FILE")
            echo "‚úÖ Using semver from build artifacts: $SEMVER"
            echo "##vso[task.setvariable variable=BUILD_SEMVER;isOutput=true]$SEMVER"
          else
            echo "‚ùå No semver artifact found from build pipeline"
            echo "##vso[task.logissue type=error]Build artifacts not found - deployment cannot proceed"
            exit 1
          fi
        displayName: 'Extract Build Semver'
        name: ExtractBuildSemver
        
      # Read built services list
      - script: |
          SERVICES_FILE="$(Pipeline.Workspace)/build-pipeline/build-artifacts/services-to-deploy.txt"
          if [ -f "$SERVICES_FILE" ]; then
            echo "üì¶ Built services from CI pipeline:"
            cat "$SERVICES_FILE"
            echo "##vso[task.setvariable variable=BUILT_SERVICES;isOutput=true]$(cat $SERVICES_FILE)"
          else
            echo "‚ùå No built services list found from build pipeline"
            echo "##vso[task.logissue type=error]Build artifacts not found - deployment cannot proceed"
            exit 1
          fi
        displayName: 'Read Built Services'
        name: ReadBuiltServices

  # Update GitOps repository with new image tags
  - stage: UpdateGitOps
    displayName: 'Update GitOps with New Image Tags'
    dependsOn: GetBuildInfo
    condition: succeeded()
    variables:
      SEMVER: $[ stageDependencies.GetBuildInfo.GetBuildInfo.outputs['ExtractBuildSemver.BUILD_SEMVER'] ]
      BUILT_SERVICES: $[ stageDependencies.GetBuildInfo.GetBuildInfo.outputs['ReadBuiltServices.BUILT_SERVICES'] ]
    jobs:
    - job: UpdateGitOpsValues
      displayName: 'Update GitOps Repository with New Image Tags'
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
        fetchDepth: 0
        
      - template: templates/gitops/gitops-update.yml
        parameters:
          semver: $(SEMVER)
          gitopsRepoUrl: $(GITOPS_REPO_URL)
          gitopsBranch: $(GITOPS_BRANCH)

  # Deploy to development environment
  - stage: DeployToDev
    displayName: 'Deploy to Development Environment'
    dependsOn: UpdateGitOps
    condition: succeeded()
    variables:
      - group: 'online-boutique.dev'
      - group: 'online-boutique.common'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.GetBuildInfo.GetBuildInfo.outputs['ExtractBuildSemver.BUILD_SEMVER'] ]
    jobs:
    - deployment: DeployToDev
      environment: 'development'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            
            - template: templates/gitops/argocd-deploy.yml
              parameters:
                includeVerification: true
                semver: $(SEMVER)
                useArgoCD: true
                argocdNamespace: $(ARGOCD_NAMESPACE)
                gitopsRepoUrl: $(GITOPS_REPO_URL)
                gitopsBranch: $(GITOPS_BRANCH)

  # Deploy to production environment
  - stage: DeployToProduction
    displayName: 'Deploy to Production Environment'
    dependsOn: DeployToDev
    condition: succeeded()
    variables:
      - group: 'online-boutique.prod'
      - group: 'online-boutique.common'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.GetBuildInfo.GetBuildInfo.outputs['ExtractBuildSemver.BUILD_SEMVER'] ]
    jobs:
    - deployment: DeployToProduction
      environment: 'production'
      pool:
        vmImage: $(VM_IMAGE)
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            
            - template: templates/gitops/argocd-deploy.yml
              parameters:
                includeVerification: true
                semver: $(SEMVER)
                useArgoCD: true
                argocdNamespace: $(ARGOCD_NAMESPACE)
                gitopsRepoUrl: $(GITOPS_REPO_URL)
                gitopsBranch: $(GITOPS_BRANCH)

  # Post-deployment verification
  - stage: PostDeploymentVerification
    displayName: 'Post-Deployment Verification'
    dependsOn: DeployToProduction
    condition: succeeded()
    variables:
      - group: 'online-boutique.common'
      - group: 'online-boutique.kubernetes'
      - name: SEMVER
        value: $[ stageDependencies.GetBuildInfo.GetBuildInfo.outputs['ExtractBuildSemver.BUILD_SEMVER'] ]
    jobs:
    - job: VerifyDeployment
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - checkout: self
      
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'deployment-summary'
          publishLocation: 'pipeline'