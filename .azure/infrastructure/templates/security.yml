parameters:
  workingDirectory: ''
  checkovFramework: 'terraform' # terraform, arm, kubernetes, etc.
  failOnHigh: true

steps:
- script: |
    pip install --upgrade pip checkov jq
    checkov -d . --framework ${{ parameters.checkovFramework }} --output json --output-file checkov-results.json --soft-fail

    echo "==== Checkov Severity Summary ===="
    for level in CRITICAL HIGH MEDIUM LOW; do
      jq --arg level "$level" '[.results.failed_checks[] | select(.severity==$level)] | length' checkov-results.json | xargs -I{} echo "$level: {}"
    done
    jq '[.results.failed_checks[] | select(.severity==null)] | length' checkov-results.json | xargs -I{} echo "UNASSIGNED: {}"

    HIGH_COUNT=$(jq '[.results.failed_checks[] | select(.severity=="HIGH" or .severity=="CRITICAL")] | length' checkov-results.json)
    FAIL_COUNT=$(jq '[.results.failed_checks[]] | length' checkov-results.json)
    NON_NULL_SEVERITY=$(jq '[.results.failed_checks[] | select(.severity != null)] | length' checkov-results.json)

    if [ "${{ parameters.failOnHigh }}" = "true" ]; then
      if [ "$NON_NULL_SEVERITY" -gt 0 ]; then
        [ "$HIGH_COUNT" -gt 0 ] && echo "ERROR: Found $HIGH_COUNT HIGH or CRITICAL issues." && exit 1
      else
        [ "$FAIL_COUNT" -gt 0 ] && echo "WARNING: No severity assigned. Failing on any failed check." && exit 1
      fi
    else
      [ "$FAIL_COUNT" -gt 0 ] && echo "ERROR: Found $FAIL_COUNT failed check(s)." && exit 1
    fi
  displayName: 'Checkov Security Scan'
  workingDirectory: ${{ parameters.workingDirectory }}

- task: PublishBuildArtifacts@1
  displayName: 'Publish Checkov JSON Report'
  inputs:
    PathtoPublish: '${{ parameters.workingDirectory }}/checkov-results.json'
    ArtifactName: 'CheckovReport'