parameters:
  workingDirectory: ''
  command: ''  # validate, plan, apply, destroy, or fmt

steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: '1.12.2'

- ${{ if not(eq(parameters.command, 'fmt')) }}:
  - task: AzureCLI@2
    displayName: 'Initialize Terraform Backend'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      workingDirectory: ${{ parameters.workingDirectory }}
      inlineScript: |
        set -e
        terraform init \
          -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
          -backend-config="container_name=$(CONTAINER_NAME)" \
          -backend-config="key=$(TERRAFORM_STATE_KEY)" \
          -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
          -reconfigure

- task: AzureCLI@2
  displayName: 'Run Terraform Command'
  inputs:
    azureSubscription: $(AZURE_SUBSCRIPTION)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    workingDirectory: ${{ parameters.workingDirectory }}
    inlineScript: |
      set -e
      
      # Retry with state lock handling
      terraform_retry() {
        local max_attempts=3
        for ((i=1; i<=max_attempts; i++)); do
          echo "Attempt $i/$max_attempts"
          if TF_CLI_ARGS="-timeout=30m" "$@"; then
            return 0
          else
            local exit_code=$?
            # Handle state lock
            if [[ $exit_code -eq 1 ]]; then
              local output=$(terraform output 2>&1)
              if echo "$output" | grep -q "state blob is already locked"; then
                local lock_id=$(echo "$output" | grep -o "ID: [a-f0-9-]*" | cut -d' ' -f2)
                [[ -n "$lock_id" ]] && {
                  echo "Force unlocking: $lock_id"
                  terraform force-unlock -force "$lock_id"
                  sleep 30
                }
              fi
            fi
            [[ $i -lt $max_attempts ]] && sleep 60
          fi
        done
        return 1
      }

      case "${{ parameters.command }}" in
        fmt)
          terraform fmt -check -recursive
          ;;
        validate)
          terraform_retry terraform validate
          ;;
        plan)
          terraform_retry terraform plan -out="${{ parameters.workingDirectory }}/tfplan"
          ;;
        apply)
          [[ ! -f "${{ parameters.workingDirectory }}/tfplan" ]] && {
            echo "##vso[task.logissue type=error]Plan file not found"
            exit 1
          }
          terraform_retry terraform apply -auto-approve "${{ parameters.workingDirectory }}/tfplan"
          ;;
        destroy)
          terraform_retry terraform plan -destroy -out="${{ parameters.workingDirectory }}/destroy-plan"
          echo "Resources to be destroyed:"
          terraform show -json "${{ parameters.workingDirectory }}/destroy-plan" | jq -r '.resource_changes[] | select(.change.actions[] == "delete") | .address' | head -5
          terraform_retry terraform apply -auto-approve "${{ parameters.workingDirectory }}/destroy-plan"
          ;;
        *)
          echo "Invalid command: ${{ parameters.command }}"
          exit 1
          ;;
      esac

- ${{ if eq(parameters.command, 'plan') }}:
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Plan'
    inputs:
      targetPath: '${{ parameters.workingDirectory }}/tfplan'
      artifact: 'tfplan'
      publishLocation: 'pipeline'
