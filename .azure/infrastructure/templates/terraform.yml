parameters:
  workingDirectory: ""
  command: "" # validate, plan, apply, destroy

steps:
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
    displayName: "Install Terraform"
    inputs:
      terraformVersion: "latest"

  - task: AzureCLI@2
    displayName: "Initialize Terraform Backend"
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: ${{ parameters.workingDirectory }}
      inlineScript: |
        set -e
        echo "Initializing Terraform backend..."
        terraform init \
          -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
          -backend-config="container_name=$(CONTAINER_NAME)" \
          -backend-config="key=$(TERRAFORM_STATE_KEY)" \
          -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
          -reconfigure

  - task: AzureCLI@2
    displayName: "Run Terraform Command"
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: ${{ parameters.workingDirectory }}
      inlineScript: |
        set -e
        
        # Set Azure environment variables
        export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
        export ARM_TENANT_ID=$(az account show --query tenantId -o tsv)
        
        echo "Using subscription: $ARM_SUBSCRIPTION_ID"

        case "${{ parameters.command }}" in
          validate)
            echo "Validating Terraform configuration..."
            terraform validate
            ;;
          plan)
            echo "Creating plan file..."
            terraform plan -input=false -detailed-exitcode -out=tfplan
            echo "Plan file created at: $(pwd)/tfplan"
            ls -la tfplan
            ;;
          apply)
            echo "Looking for plan file..."
            ls -la tfplan || echo "Plan file not found"
            echo "Applying Terraform..."
            terraform apply -input=false -auto-approve "${{ parameters.workingDirectory }}/tfplan"
            ;;
          destroy)
            echo "Destroying infrastructure..."
            terraform destroy -input=false -auto-approve
            ;;
          *)
            echo "Invalid command: ${{ parameters.command }}"
            exit 1
            ;;
        esac
