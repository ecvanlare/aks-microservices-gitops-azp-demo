parameters:
  workingDirectory: ''
  command: ''  # validate, plan, apply, destroy, or fmt
  timeoutMinutes: 60

steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: 'latest'

- ${{ if not(eq(parameters.command, 'fmt')) }}:
  - task: AzureCLI@2
    displayName: 'Initialize Terraform Backend'
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      workingDirectory: ${{ parameters.workingDirectory }}
      inlineScript: |
        set -e
        echo "Initializing Terraform backend..."
        terraform init \
          -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
          -backend-config="container_name=$(CONTAINER_NAME)" \
          -backend-config="key=$(TERRAFORM_STATE_KEY)" \
          -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
          -reconfigure

- task: AzureCLI@2
  displayName: 'Run Terraform Command'
  timeoutInMinutes: ${{ parameters.timeoutMinutes }}
  inputs:
    azureSubscription: $(AZURE_SUBSCRIPTION)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    workingDirectory: ${{ parameters.workingDirectory }}
    inlineScript: |
      case "${{ parameters.command }}" in
        fmt)
          terraform fmt -check -recursive
          ;;
        validate)
          terraform validate
          ;;
        plan)
          terraform plan -out=tfplan
          ;;
        apply)
          for i in {1..3}; do
            echo "Apply attempt $i/3"
            timeout 1800 terraform apply -auto-approve tfplan && break || {
              [ $i -lt 3 ] && echo "Retrying in 30s..." && sleep 30 || exit 1
            }
          done
          ;;
        destroy)
          timeout 1800 terraform destroy -auto-approve
          ;;
        *)
          echo "Invalid command: ${{ parameters.command }}"
          exit 1
          ;;
      esac

- ${{ if eq(parameters.command, 'plan') }}:
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Plan'
    inputs:
      targetPath: '${{ parameters.workingDirectory }}/tfplan'
      artifact: 'tfplan'
      publishLocation: 'pipeline'
